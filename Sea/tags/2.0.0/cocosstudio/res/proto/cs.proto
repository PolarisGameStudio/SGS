//cleint <---> scene

package cs;


enum ID {
	//网关中的协议
	ID_C2S_KeepAlive = 30000;
	ID_S2C_KeepAlive = 30001;
	ID_C2S_Login = 30002;
	ID_S2C_Login = 30003;
	ID_C2S_Create = 30004;
	ID_S2C_Create = 30005;

	ID_C2S_ActivateAccount = 30082;
	ID_S2C_ActivateAccount = 30083;

	ID_S2C_GetTitle = 30090;

    ID_C2S_Flush = 30006;
	ID_S2C_Flush = 30007;
	ID_S2C_GetUser = 30008;
	ID_C2S_Offline = 30009;
    ID_S2C_GetHero = 30010;
	ID_C2S_GetServerTime = 30011;
	ID_S2C_GetServerTime = 30012;
	ID_S2C_GetPet    = 30013;
	ID_S2C_GetFriend = 30014;
	ID_S2C_GetPetFormation = 30015;	//神兽护卫队
	ID_S2C_FightHero = 30016;
	ID_S2C_KickOutUser = 30017;
	ID_S2C_GetActiveAvatarPhoto = 30018;
	ID_S2C_GetResourceBackData = 30019;
	ID_S2C_GetActivePetPhoto = 30020;
	ID_S2C_GetEquipSilkbag = 30021;
	ID_S2C_GetGemstone = 30022;
	ID_S2C_GetItem = 30023;
	ID_S2C_GetFragment = 30024;
	ID_S2C_GetGem = 30025;
	ID_S2C_GetSilkbag = 30026;
	ID_S2C_GetFormation = 30027;  // 发送阵容列表
	ID_S2C_GetDestiny = 30028;  // 发送缘分信息
	ID_S2C_GetCurrency = 30029;	    //货币类统一
	ID_S2C_GetRecover = 30030;	    //恢复类统一

	// 更换昵称
	ID_C2S_ChangeName = 30031;
	ID_S2C_ChangeName = 30032;

	//聊天
	ID_C2S_ChatGetSimpleMsg  = 30033;
	ID_S2C_ChatGetSimpleMsg  = 30034;
	ID_C2S_ChatRequest = 30035;
	ID_S2C_ChatRequest = 30036;
	ID_S2C_Chat        = 30037;
	ID_S2C_Notify      = 30038;
	ID_C2S_ChatGetMsg  = 30039;
	ID_S2C_ChatGetMsg  = 30040;
	ID_C2S_ChatMsgStatusUpdate  = 30041;
	ID_S2C_ChatMsgStatusUpdate  = 30042;
	ID_C2S_ChatMsgDelete  = 30043;
	ID_S2C_ChatMsgDelete  = 30044;


	ID_S2C_RollNotice = 30045; //公告
	ID_S2C_ActivityNotice = 30046; // 活动通知
	ID_S2C_GetJade = 30047; //玉石

	ID_C2S_ExecCommand = 30048;
	ID_S2C_ExecCommand = 30049;


	ID_C2S_UseItem = 30050; //道具使用
	ID_S2C_UseItem = 30051;
	ID_C2S_UseItemTest = 30052; //道具使用测试

	ID_S2C_ServerRecord = 30053; //全服计数

	ID_C2S_JadeEquip = 30054; //玉石装卸
	ID_S2C_JadeEquip = 30055;
	ID_C2S_JadeSell = 30056; //玉石出售
	ID_S2C_JadeSell = 30057;

	ID_S2C_RedPointNotify = 30060; //红点通知协议
	ID_S2C_ServerRecordNotify = 30061; //全服记录更新通知协议

	ID_S2C_OpObject = 30065;
	ID_S2C_GetDailyCount = 30066;	//每日次数

	ID_S2C_GetActiveWarHorsePhoto = 30080;
	//碎片合成
	ID_C2S_SyntheticFragments = 30100;
	ID_S2C_SyntheticFragments = 30101;
	ID_S2C_SellFragments = 30102;  // 碎片出售
	ID_C2S_SellFragments = 30103;

	ID_C2S_GetTotalOnlineTime = 30104;  //!获取总在线时间请求
	ID_S2C_GetTotalOnlineTime = 30105;  //!获取总在线时间响应

	ID_C2S_EquipTitle = 30110;  //装备称号
	ID_S2C_EquipTitle = 30111;  //装备称号

	ID_C2S_ClearTitleRedPoint = 30120; //清除称号红点


	ID_C2S_GachaEntry = 30121;
	ID_S2C_GachaEntry = 30122;
	ID_C2S_GetGachaLadder = 30123;
	ID_S2C_GetGachaLadder = 30124;
	ID_C2S_Gacha = 30125;
	ID_S2C_Gacha = 30126;
	ID_C2S_GachaExit = 30127;
	ID_S2C_GachaExit = 30128;
	ID_S2C_GachaNotify = 30129; //金将弹幕
	ID_S2C_GachaLuckDrawList = 30130; //下发中奖名单
	ID_S2C_GetGacha = 30132;
	ID_S2C_GachaRechrageReward = 30133;

	// 活动
	ID_C2S_ActCheckinSuper = 30136; // 签到
	ID_S2C_ActCheckinSuper = 30137;
	ID_C2S_GetActCheckinSuper = 30138;
	ID_S2C_GetActCheckinSuper = 30139;
	ID_C2S_GetActCheckin = 30140; // 获取签到数据
	ID_S2C_GetActCheckin = 30141;
	ID_C2S_ActCheckin = 30142; // 签到
	ID_S2C_ActCheckin = 30143;
	ID_C2S_ActReCheckin = 30144; // 补签
	ID_S2C_ActReCheckin = 30145;
	ID_C2S_GetActDinner = 30146; // 获取宴会数据
	ID_S2C_GetActDinner = 30147;
	ID_C2S_ActDinner = 30148; // 领取体力
	ID_S2C_ActDinner = 30149;
	ID_C2S_ActReDinner = 30150; // 追回体力
	ID_S2C_ActReDinner = 30151;
	ID_C2S_GetActFund = 30152; // 获取基金数据
	ID_S2C_GetActFund = 30153;
	ID_C2S_ActFund = 30154; // 领取基金奖励
	ID_S2C_ActFund = 30155;
	ID_C2S_GetActDiscount = 30156; // 获取每日折扣数据
	ID_S2C_GetActDiscount = 30157;
	ID_C2S_ActDiscount = 30158; // 购买折扣商品
	ID_S2C_ActDiscount = 30159;
	ID_C2S_GetActMoneyTree = 30160; // 获取摇钱树数据
	ID_S2C_GetActMoneyTree = 30161;
	ID_C2S_ActMoneyTree = 30162; // 摇钱树摇一摇
	ID_S2C_ActMoneyTree = 30163;
	ID_C2S_GetActDailyBoss = 30164; // 获取每日boss数据
	ID_S2C_GetActDailyBoss = 30165;
	ID_C2S_ActDailyBoss = 30166; // 挑战Boss关卡
	ID_S2C_ActDailyBoss = 30167;
	ID_C2S_ActGetRechargeAward = 30168; // 充值
	ID_S2C_ActGetRechargeAward = 30169;
	ID_C2S_ActRechargeAward = 30170;
	ID_S2C_ActRechargeAward = 30171;
	ID_C2S_ActMoneyTreeBox = 30172; // 摇钱树摇一摇
	ID_S2C_ActMoneyTreeBox = 30173;
	ID_C2S_GetActLevelDiscount = 30174; // 获取等级礼包数据
	ID_S2C_GetActLevelDiscount = 30175;
	ID_S2C_ActLevelDiscountAward = 30176;
	ID_C2S_ActResourceBackAward = 30177; // 资源找回
	ID_S2C_ActResourceBackAward = 30178;

	// 七日活动
	ID_C2S_GetSevenDaysData = 30180;
	ID_S2C_GetSevenDaysData = 30181;
	ID_C2S_SevenDaysReward = 30182;
	ID_S2C_SevenDaysReward = 30183;
	ID_S2C_UpdateSevenDaysInfo = 30184;
	ID_C2S_SevenDaysShop = 30185;
	ID_S2C_SevenDaysShop = 30186;

	// 游历
	ID_C2S_GetExplore = 30200;
	ID_S2C_GetExplore = 30201;
	ID_C2S_EnterExplore = 30202;
	ID_S2C_EnterExplore = 30203;
	ID_C2S_RollExplore = 30204;
	ID_S2C_RollExplore = 30205;
	ID_C2S_ExploreGetReward = 30206;
	ID_S2C_ExploreGetReward = 30207;
	ID_C2S_ExploreDoEvent = 30208;
	ID_S2C_ExploreDoEvent = 30209;

	//主线副本
	ID_C2S_GetChapterList = 30300;
	ID_S2C_GetChapterList = 30301;
	ID_C2S_ExecuteStage = 30302; //执行关卡
	ID_S2C_ExecuteStage = 30303; //执行关卡
	ID_C2S_GetChapterRank = 30304;
	ID_S2C_GetChapterRank = 30305;
	ID_C2S_FastExecuteStage = 30309;
	ID_S2C_FastExecuteStage = 30310;
	ID_C2S_FinishChapterBoxRwd = 30315; //获取箱子奖励
	ID_S2C_FinishChapterBoxRwd = 30316;
	ID_C2S_ResetStage = 30317; //重置副本次数
	ID_S2C_ResetStage = 30318;
	ID_S2C_FirstEnterChapter = 30323; //第一次进入设置TAG
	ID_C2S_FirstEnterChapter = 30324;
	ID_C2S_GetBattleReport = 30327;//拉取或者生成战报
	ID_S2C_GetBattleReport = 30328;
	ID_C2S_GetBattleUser = 30329; //通用协议 查看玩家阵容
	ID_S2C_GetBattleUser = 30330;
	ID_C2S_GetFirstKillReport = 30331;//查看首杀战报
	ID_S2C_GetFirstKillReport = 30332;//
	ID_C2S_ReceiveStageBox = 30333;//领取关卡宝箱
	ID_S2C_ReceiveStageBox = 30334;//领取关卡宝箱
	ID_C2S_DoBattleReport = 30335;//战斗
	ID_S2C_DoBattleReport = 30336;
	ID_S2C_NewFirstKill = 30337;
	ID_S2C_GetFirstKill = 30338;
	ID_C2S_GetAllAwardBox = 30339;//领取所有宝箱
	ID_S2C_GetAllAwardBox = 30340;//领取所有宝箱
	ID_C2S_ChallengeHeroChapter = 30341; // 挑战名将副本
	ID_S2C_ChallengeHeroChapter = 30342; // 挑战名将副本
    ID_C2S_GetPeriodBoxAward = 30343;  // 领取章节宝箱
    ID_S2C_GetPeriodBoxAward = 30344;

	//日常副本
	ID_C2S_FirstEnterDailyDungeon = 30350;
	ID_S2C_FirstEnterDailyDungeon = 30351;
	ID_C2S_ExecuteDailyDungeon = 30352;
	ID_S2C_ExecuteDailyDungeon = 30353;
	ID_C2S_EnterDailyDungeonData = 30354;
	ID_S2C_EnterDailyDungeonData = 30355;


	//阵容
	ID_C2S_ChangeHeroFormation = 30370; // 阵容更换
	ID_S2C_ChangeHeroFormation = 30371; // 阵容更换
	ID_C2S_ChangeEmbattle = 30372;  // 布阵
	ID_S2C_ChangeEmbattle = 30373;  // 布阵
	ID_C2S_ChangeHeroSecondFormation = 30374; // 援军更换
	ID_S2C_ChangeHeroSecondFormation = 30375; // 援军更换

	//vip
	ID_C2S_GetVip = 30400;
	ID_S2C_GetVip = 30401;

	//综合排行榜
	ID_C2S_GetUserLevelRank = 30500;
	ID_S2C_GetUserLevelRank = 30501;
	ID_C2S_GetUserPowerRank = 30502;
	ID_S2C_GetUserPowerRank = 30503;
	ID_C2S_GetStageStarRank = 30504;
	ID_S2C_GetStageStarRank = 30505;
	ID_C2S_GetTowerStarRank	= 30506;
	ID_S2C_GetTowerStarRank	= 30507;
	ID_C2S_GetRebelArmyHurtRank = 30508;
	ID_S2C_GetRebelArmyHurtRank = 30509;
	ID_C2S_GetRebelArmyGuildHurtRank = 30510;
	ID_S2C_GetRebelArmyGuildHurtRank = 30511;
	ID_C2S_GetGuildRank = 30512;
	ID_S2C_GetGuildRank = 30513;
	ID_C2S_GetUserActivePhotoRank = 30514;
	ID_S2C_GetUserActivePhotoRank = 30515;

	//邮件系统
	ID_C2S_GetMail = 30601;
	ID_S2C_GetMail = 30602;
	ID_C2S_ProcessMail = 30603;
	ID_S2C_ProcessMail = 30604;
	ID_S2C_AddSimpleMail = 30605;
	ID_S2C_SendSimpleMail = 30606;
	ID_C2S_Mail = 30607;
	ID_S2C_Mail = 30608;
	ID_C2S_DelMail = 30611;
	ID_S2C_DelMail = 30612;
	ID_C2S_ProcessAllMail = 30613;
	ID_S2C_ProcessAllMail = 30614;
	ID_C2S_DelAllMail = 30615;
	ID_S2C_DelAllMail = 30616;


	//招募
	ID_C2S_RecruitInfo 	 = 30700;
	ID_S2C_RecruitInfo 	 = 30701;
	ID_C2S_RecruitNormal  = 30702;
	ID_S2C_RecruitNormal  = 30703;
	ID_C2S_RecruitGoldOne = 30704;
	ID_S2C_RecruitGoldOne = 30705;
	ID_C2S_RecruitGoldTen = 30706;
	ID_S2C_RecruitGoldTen = 30707;
	ID_C2S_RecruitPointGet= 30708;
	ID_S2C_RecruitPointGet= 30709;

	//神兽
	ID_C2S_PetRankUp	= 30713;  // 神兽突破
	ID_S2C_PetRankUp	= 30714;  // 神兽突破
    ID_C2S_PetOnTeam  	= 30715; //神兽上阵下阵
    ID_S2C_PetOnTeam  	= 30716;
	ID_C2S_PetLevelUp 	= 30717; //神兽升级
	ID_S2C_PetLevelUp 	= 30718;
	ID_C2S_PetStarUp 	= 30719; //神兽升星
	ID_S2C_PetStarUp 	= 30720;
	ID_C2S_PetReborn 	= 30721; //神兽重生
	ID_S2C_PetReborn 	= 30722;
	ID_C2S_PetRecycle	= 30723; //神兽分解
	ID_S2C_PetRecycle 	= 30724;
	ID_C2S_ActivePetPhoto = 30725; // 激活图鉴
	ID_S2C_ActivePetPhoto = 30726; // 激活图鉴
	ID_C2S_PetPostRankUpMaterial = 30727; // 提交神兽突破材料
	ID_S2C_PetPostRankUpMaterial = 30728; // 提交神兽突破材料



	//武将升级
	ID_C2S_HeroLevelUp = 30730;
	ID_S2C_HeroLevelUp = 30731;
	//武将突破
	ID_C2S_HeroRankUp = 30732;
	ID_S2C_HeroRankUp = 30733;
	ID_C2S_HeroActiveDestiny = 30734;
	ID_S2C_HeroActiveDestiny = 30735;
	ID_C2S_HeroRecycle = 30736;
	ID_S2C_HeroRecycle = 30737;
	ID_C2S_HeroReborn = 30738;
	ID_S2C_HeroReborn = 30739;
	ID_C2S_HeroEquipAwaken = 30740;
	ID_S2C_HeroEquipAwaken = 30741;
	ID_C2S_HeroAwaken = 30742;
	ID_S2C_HeroAwaken = 30743;
	ID_C2S_HeroTransform = 30744; //武将置换
	ID_S2C_HeroTransform = 30745; //武将置换
	ID_C2S_TreasureTransform = 30746; //武将置换
	ID_S2C_TreasureTransform = 30747; //武将置换
	ID_C2S_InstrumentTransform = 30748; //神兵置换
	ID_S2C_InstrumentTransform = 30749;

	// 宝物
	ID_C2S_GetTreasure   	= 30750;
	ID_S2C_GetTreasure   	= 30751;
	ID_C2S_EquipTreasure    = 30752; //装备宝物
	ID_S2C_EquipTreasure    = 30753;
	ID_C2S_RemoveTreasure   = 30754; //卸下宝物
	ID_S2C_RemoveTreasure   = 30755;
	ID_C2S_UpgradeTreasure  = 30756; //宝物强化
	ID_S2C_UpgradeTreasure  = 30757;
	ID_C2S_RefineTreasure   = 30758; //宝物精炼
	ID_S2C_RefineTreasure   = 30759;
	ID_S2C_RebornTreasure   = 30760; //宝物重生
	ID_C2S_RebornTreasure   = 30761;
	ID_C2S_TreasureRecycle  = 30762;
	ID_S2C_TreasureRecycle  = 30763;
	ID_C2S_TreasureLimitCost = 30764;//宝物突破(橙升红)
	ID_S2C_TreasureLimitCost = 30765;

	// 金将
	ID_C2S_GoldHeroRankUp = 30770;
	ID_S2C_GoldHeroRankUp = 30771;
	ID_C2S_GoldHeroResource = 30772;
	ID_S2C_GoldHeroResource = 30773;


	//装备
	ID_C2S_GetEquipment   	= 30800;
	ID_S2C_GetEquipment   	= 30801;
	ID_C2S_UpgradeEquipment = 30802; //装备强化
	ID_S2C_UpgradeEquipment = 30803;
	ID_C2S_RefineEquipment 	= 30804; //装备精炼
	ID_S2C_RefineEquipment 	= 30805;
	//穿装备
	ID_C2S_AddFightEquipment = 30806;
	ID_S2C_AddFightEquipment = 30807;
	 //脱装备
	ID_C2S_ClearFightEquipment = 30808;
	ID_S2C_ClearFightEquipment = 30809;
	//获取上阵装备
	ID_C2S_GetBattleResource = 30810;
	ID_S2C_GetBattleResource = 30811;
	//装备重生和回收
	ID_C2S_EquipmentRecycle = 30812;
	ID_S2C_EquipmentRecycle = 30813;
	ID_C2S_EquipmentReborn  = 30814;
	ID_S2C_EquipmentReborn  = 30815;
	ID_C2S_SuperUpgradeEquipment = 30816; //一键强化
	ID_S2C_SuperUpgradeEquipment = 30817;
	ID_C2S_EquipmentLimitCost = 30818;
	ID_S2C_EquipmentLimitCost = 30819;

	//商店相关
	ID_C2S_GetShopInfo 		= 30830; //
	ID_S2C_GetShopInfo 		= 30831;
	ID_C2S_BuyShopGoods 	= 30832;
	ID_S2C_BuyShopGoods 	= 30833;
	ID_C2S_ShopRefresh 		= 30834;
	ID_S2C_ShopRefresh 		= 30835;
	ID_C2S_GetShopCrystal   = 30836;
	ID_S2C_GetShopCrystal   = 30837;
	ID_C2S_GetShopCrystalAward = 30838;
	ID_S2C_GetShopCrystalAward = 30839;
	ID_C2S_RefreshCrystalShop = 30840;
	ID_S2C_RefreshCrystalShop = 30841;
	ID_C2S_ShopCrystalBuy = 30842;
	ID_S2C_ShopCrystalBuy = 30843;

	//图鉴信息
	ID_C2S_GetResPhoto		= 30845;
	ID_S2C_GetResPhoto		= 30846;
	//爬塔
	ID_C2S_GetTower			= 30850;
	ID_S2C_GetTower			= 30851;
	ID_C2S_ExecuteTower		= 30852;
	ID_S2C_ExecuteTower		= 30853;
	ID_C2S_FastExecuteTower	= 30854;
	ID_S2C_FastExecuteTower	= 30855;
	ID_C2S_GetTowerBox		= 30856;
	ID_S2C_GetTowerBox		= 30857;
	ID_C2S_ExecuteSurprise	= 30858;
	ID_S2C_ExecuteSurprise	= 30859;
	ID_C2S_ExecuteTowerSuperStage	= 30860;
	ID_S2C_ExecuteTowerSuperStage	= 30861;
	//官衔
	ID_C2S_UpOfficerLevel	= 30870;
	ID_S2C_UpOfficerLevel	= 30871;
	//充值
	ID_C2S_RechargeTest 	= 30875;//测试充值
	ID_S2C_RechargeNotice 	= 30876;//充值成功提示
	ID_C2S_GetRecharge 		= 30877;//获取充值信息
	ID_S2C_GetRecharge 		= 30878;//获取充值信息
	ID_C2S_UseMonthlyCard   = 30879; //领取月卡每日奖励
	ID_S2C_UseMonthlyCard   = 30880;
	ID_C2S_GetVipReward     = 30881; //领取vip礼包
	ID_S2C_GetVipReward   	= 30882;
	ID_S2C_SendVipReward   	= 30883; //推送vip礼包信息

	//日常任务
	ID_C2S_GetDailyTaskInfo 		= 30890; //拉取日常任务
	ID_S2C_GetDailyTaskInfo 		= 30891;
	ID_C2S_GetDailyTaskAward 		= 30892; //领取日常任务奖励
	ID_S2C_GetDailyTaskAward 		= 30893;
	ID_S2C_UpdateDailyTaskInfo 		= 30894; //日常任务数据更新
	//围剿叛军
	ID_C2S_GetRebelArmy 		= 30900; //
	ID_S2C_GetRebelArmy 		= 30901;
	ID_C2S_RebelArmyBattle 		= 30902; //挑战
	ID_S2C_RebelArmyBattle		= 30903;
	ID_C2S_RebArmyKillReward	= 30904; //领取叛军击杀奖励
	ID_S2C_RebArmyKillReward	= 30905;
	ID_C2S_RebArmyHurtReward	= 30906; //领取伤害奖励
	ID_S2C_RebArmyHurtReward	= 30907;
	ID_C2S_RebArmyPublic		= 30908; //分享boss
	ID_S2C_RebArmyPublic		= 30909;
	ID_C2S_RebArmyPublicMulti 	= 30910; // 一键分享boss
	ID_S2C_RebArmyPublicMulti	= 30911;
	ID_C2S_RebArmyKillRewardMulti =	30912;// 一键领取叛军击杀奖励
	ID_S2C_RebArmyKillRewardMulti = 30913;


	//竞技场
	ID_C2S_GetArenaInfo 		= 30920;//进入竞技场
	ID_S2C_GetArenaInfo 		= 30921;
	ID_C2S_ChallengeArena 		= 30922;//挑战
	ID_S2C_ChallengeArena 		= 30923;
	ID_C2S_GetArenaTopInfo 		= 30924;//竞技场排行榜
	ID_S2C_GetArenaTopInfo 		= 30925;
	ID_C2S_GetArenaTopTenReport = 30926;//巅峰对决
	ID_S2C_GetArenaTopTenReport = 30927;
	ID_C2S_GetArenaRankReward   = 30928;//领取最高排行奖励
	ID_S2C_GetArenaRankReward   = 30929;
	ID_S2C_SendArenaRankRewardClient   = 30930;//

	//
	ID_C2S_BuyCommonCount = 30940;
	ID_S2C_BuyCommonCount = 30941;
	ID_C2S_CommonGetReport = 30942; //获取战报
	ID_S2C_CommonGetReport = 30943; //获取战报

	ID_C2S_CommonPhoneOrder = 30944; //公测预约
	ID_S2C_CommonPhoneOrder = 30945; //公测预约

	//成就
	ID_C2S_GetAchievementInfo = 30950;    //登录拉取成就
	ID_S2C_GetAchievementInfo = 30951;
	ID_C2S_GetAchievementReward = 30952;  //得到成就奖励
	ID_S2C_GetAchievementReward = 30953;
	ID_S2C_UpdateAchievementInfo = 30954; //成就数据更新
	//公会
	ID_C2S_GetGuildBase = 30958; //获取公会基础信息
	ID_S2C_GetGuildBase = 30959;
	ID_C2S_CreateGuild = 30960; //创建公会
	ID_S2C_CreateGuild = 30961;
	ID_C2S_QueryGuildMall = 30962;//进入公会大厅
	ID_S2C_QueryGuildMall = 30963;
	ID_C2S_GuildApplication = 30964;//申请加入公会
	ID_S2C_GuildApplication = 30965;
	ID_C2S_GuildCheckApplication = 30967;//审核公会申请
	ID_S2C_GuildCheckApplication = 30968;
	ID_C2S_GetGuildApplication = 30969;//获取公会申请列表
	ID_S2C_GetGuildApplication = 30970;
	ID_C2S_GuildLeave = 30971;//退会
	ID_S2C_GuildLeave = 30972;
	ID_C2S_GetUserGuild = 30973;//获取个人公会信息
	ID_S2C_GetUserGuild = 30974;
	ID_C2S_GuildDismiss = 30975;//解散公会
	ID_S2C_GuildDismiss = 30976;
	ID_C2S_GuildKick = 30977;//踢人
	ID_S2C_GuildKick = 30978;
	ID_C2S_GetGuildMember = 30979;//获取公会成员列表
	ID_S2C_GetGuildMember = 30980;
	ID_C2S_LeaderImpeachment = 30981;//弹劾会长
	ID_S2C_LeaderImpeachment = 30982;
	ID_C2S_GuildTransfer = 30983;//转让会长
	ID_S2C_GuildTransfer = 30984;
	ID_C2S_GuildPromote	= 30985;//公会升降职
	ID_S2C_GuildPromote = 30986;
	ID_C2S_SetGuildMessage = 30987;//修改公会公告
	ID_S2C_SetGuildMessage = 30988;
	ID_C2S_GetGuildSystemNotify = 30989;//公会动态
	ID_S2C_GetGuildSystemNotify = 30990;
	ID_C2S_GetGuildList = 30991;//公会列表
	ID_S2C_GetGuildList = 30992;
	ID_C2S_GetGuildHelp = 30993;//获取公会援助
	ID_S2C_GetGuildHelp = 30994;
	ID_C2S_AppGuildHelp = 30995;//申请公会援助
	ID_S2C_AppGuildHelp = 30996;
	ID_C2S_UseGuildHelp = 30997;//领取公会援助
	ID_S2C_UseGuildHelp = 30998;
	ID_C2S_SurGuildHelp = 30999;//支援公会援助
	ID_S2C_SurGuildHelp = 31000;
	ID_C2S_GuildHelpReward = 31001;//领取公会援助奖励
	ID_S2C_GuildHelpReward = 31002;
	//公会副本
	ID_C2S_GetGuildDungeon = 31003;//获取公会副本信息
	ID_S2C_GetGuildDungeon = 31004;
	ID_C2S_GuildDungeonBattle = 31005;//公会副本挑战
	ID_S2C_GuildDungeonBattle = 31006;
	ID_C2S_GuildSourceReward  = 31007;//GuildSourceReward
	ID_S2C_GuildSourceReward = 31008;//
	//公会任务
	ID_C2S_GetGuildTaskReward  = 31009;//领取公会任务奖励
	ID_S2C_GetGuildTaskReward = 31010;//
	//公会成员状态改变
	ID_S2C_GuildChangeState = 31011;//
	// 更换昵称
	ID_C2S_GuildChangeName = 31012;
	ID_S2C_GuildChangeName = 31013;
	//公会副本
	ID_C2S_GetGuildDungeonRecord = 31014;//获取公会副本记录
	ID_S2C_GetGuildDungeonRecord = 31015;
	ID_S2C_GuildDungeonRecordRespond = 31016;

	ID_C2S_ChangeGuildIcon = 31017;//更改公会旗子
	ID_S2C_ChangeGuildIcon = 31018;

    ID_S2C_GetSevenDaySprintInfo = 31020; // 策划

	// 公会演武
	ID_C2S_QueryGuildTrain = 31021;
	ID_S2C_QueryGuildTrain = 31022;
	ID_S2C_InviteGuildTrainNotify = 31023;
	ID_C2S_ConfirmGuildTrain = 31024;
	ID_S2C_ConfirmGuildTrain = 31025;
	ID_S2C_StartGuildTrainNotify = 31026;
	ID_S2C_EndGuildTrainNotify = 31027;
	ID_C2S_EndGuildTrain = 31028;
	ID_S2C_EndGuildTrain = 31029;
	ID_S2C_GuildTrainChange = 31030;
	ID_S2C_InviteGuildTrainReturn = 31031;

	//占山为王
	ID_C2S_GetAllPatrolAward = 31098;
	ID_S2C_GetAllPatrolAward = 31099;
	ID_C2S_GetTerritory = 31100;
	ID_S2C_GetTerritory = 31101;
	ID_C2S_AttackTerritory = 31102;
	ID_S2C_AttackTerritory = 31103;
	ID_C2S_PatrolTerritory = 31104;
	ID_S2C_PatrolTerritory = 31105;
	ID_C2S_GetPatrolAward = 31106;
	ID_S2C_GetPatrolAward = 31107;
	ID_C2S_TerritoryForHelp = 31108;
	ID_S2C_TerritoryForHelp = 31109;
	ID_C2S_TerritoryHelpRepressRiot = 31110;
	ID_S2C_TerritoryHelpRepressRiot = 31111;
	ID_C2S_GetTerritoryForHelp = 31112;
	ID_S2C_GetTerritoryForHelp = 31113;
	ID_C2S_GetTerritoryRiotAward = 31114;
	ID_S2C_GetTerritoryRiotAward = 31115;
	ID_C2S_GetTerritorySingle = 31116;
	ID_S2C_GetTerritorySingle = 31117;
	ID_S2C_UpdateTerritoryForHelp = 31118;

    // 配置活动
    ID_C2S_GetCustomActivityInfo = 31120;
    ID_S2C_GetCustomActivityInfo = 31121;
    ID_C2S_GetCustomActivityAward = 31122;
    ID_S2C_GetCustomActivityAward = 31123;
    ID_S2C_UpdateCustomActivity = 31124; //更新可配置活动
    ID_S2C_UpdateCustomActivityQuest = 31125; //更新可配置活动任务
	ID_C2S_GetUserCustomActivityQuest = 31126;
	ID_S2C_GetUserCustomActivityQuest = 31127;
	ID_S2C_UpdateRechargeReset = 31128;//首冲重置

	// 调查问卷
	ID_C2S_GetQuestionnaireInfo = 31130;
	ID_S2C_GetQuestionnaireInfo = 31131;
	ID_C2S_Questionnaire = 31132;
	ID_S2C_Questionnaire = 31133;
	ID_S2C_UpdateQuestionnaireInfo = 31134;

    // 配置活动
    ID_C2S_GetCustomActivityFundAward = 31136;
    ID_S2C_GetCustomActivityFundAward = 31137;


	// 狂欢活动
	ID_C2S_GetCarnivalActivityInfo = 31140;
	ID_S2C_GetCarnivalActivityInfo = 31141;
	ID_C2S_GetCarnivalActivityAward = 31142;
	ID_S2C_GetCarnivalActivityAward = 31143;
	ID_S2C_UpdateCarnivalActivity = 31144; //更新可配置活动
	ID_S2C_UpdateCarnivalActivityQuest = 31145; //更新可配置活动任务
	ID_C2S_GetUserCarnivalActivityQuest = 31146;
	ID_S2C_GetUserCarnivalActivityQuest = 31147;


	//新手指引
	ID_C2S_UpdateGuideId = 31200;
	ID_S2C_UpdateGuideId = 31201;
	ID_C2S_GeneralGuide = 31202;
	ID_S2C_GeneralGuide = 31203;

		//test
	ID_C2S_SetUserLevel = 31205;  //测试用 设置玩家等级
	ID_S2C_SetUserLevel = 31206;

	 //游戏礼包
	ID_C2S_GetGameGiftBag = 31207;
	ID_S2C_GetGameGiftBag = 31208;


	// 查看玩家信息
	ID_C2S_GetUserBaseInfo = 31210;  // 查看玩家基本信息
	ID_S2C_GetUserBaseInfo = 31211;
	ID_C2S_OpBlackList = 31212;      // 黑名单操作
	ID_S2C_OpBlackList = 31213;
	ID_S2C_GetBlackList = 31214;
	ID_C2S_Practice = 31215;         // 切磋
	ID_S2C_Practice = 31216;
	ID_C2S_GetUserDetailInfo = 31217;  // 查看玩家详细信息（阵容）
	ID_S2C_GetUserDetailInfo = 31218;

	// 变身卡
	ID_S2C_GetAvatar = 31220;
	ID_C2S_EquipAvatar = 31221; //穿戴变身卡
	ID_S2C_EquipAvatar = 31222; //穿戴变身卡
	ID_C2S_EnhanceAvatar = 31223; //强化变身卡
	ID_S2C_EnhanceAvatar = 31224; //强化变身卡
	ID_C2S_RebornAvatar = 31225; //变身卡重生
	ID_S2C_RebornAvatar = 31226; //变身卡重生
	ID_C2S_ActiveAvatarPhoto = 31227; // 变身卡激活图鉴
	ID_S2C_ActiveAvatarPhoto = 31228; // 变身卡激活图鉴

	//世界boss
	ID_C2S_EnterWorldBoss = 31230;
	ID_S2C_EnterWorldBoss = 31231;
	ID_C2S_AttackWorldBoss = 31232;
	ID_S2C_AttackWorldBoss = 31233;
	ID_S2C_WorldBossNotice = 31234;
	ID_C2S_GetWorldBossGrabList= 31235;
	ID_S2C_GetWorldBossGrabList= 31236;
	ID_C2S_GrabWorldBossPoint	= 31237;
	ID_S2C_GrabWorldBossPoint	= 31238;
	ID_S2C_GetWorldBossInfo		= 31239;
	ID_C2S_UpdateWorldBossRank	= 31240;
	ID_S2C_SyncWorldBossRank	= 31241;

	//神兵
	ID_S2C_GetInstrument   		= 31245;
	ID_C2S_AddFightInstrument 	= 31246;
	ID_S2C_AddFightInstrument 	= 31247;
	ID_C2S_ClearFightInstrument = 31248;
	ID_S2C_ClearFightInstrument = 31249;
	ID_C2S_InstrumentUpLevel 	= 31250;
	ID_S2C_InstrumentUpLevel 	= 31251;
	ID_C2S_InstrumentRecycle 	= 31252;
	ID_S2C_InstrumentRecycle 	= 31253;
	ID_C2S_InstrumentReborn 	= 31254;
	ID_S2C_InstrumentReborn 	= 31255;
	ID_C2S_InstrumentUpLimitLevel 	= 31256;
	ID_S2C_InstrumentUpLimitLevel 	= 31257;
	ID_C2S_InstrumentLimitLvPutRes = 31258;
	ID_S2C_InstrumentLimitLvPutRes = 31259;
	// 拍卖系统
	ID_C2S_GetAuctionInfo  = 31260; // 获取拍卖行信息
	ID_S2C_GetAuctionInfo  = 31261;
	ID_C2S_Auction  = 31262;  // 竞价
	ID_S2C_Auction  = 31263;
	ID_C2S_GetAuctionLog = 31264;
	ID_S2C_GetAuctionLog = 31265;
	ID_S2C_AuctionBuyerReplace = 31266;
	ID_C2S_GetAllAuctionInfo  = 31267; // 获取拍卖行信息
	ID_S2C_GetAllAuctionInfo  = 31268;
	ID_S2C_UpdateAuctionItem = 31269; // 拍卖品刷新

	ID_S2C_SellObjects = 31270;  // object出售
	ID_C2S_SellObjects = 31271;
	//test
	ID_C2S_SetUserResource = 31272;  //测试用 设置玩家资源
	ID_S2C_SetUserResource = 31273;

	ID_S2C_BulletNotice = 31274;  //弹幕


	//好友
	ID_C2S_GetFriendList = 31280;//获取好友列表
	ID_S2C_GetFriendList = 31281;
	ID_C2S_RecommandFriend = 31282;//推荐好友
	ID_S2C_RecommandFriend = 31283;
	ID_C2S_AddFriend = 31284; //添加好友/黑名单
	ID_S2C_AddFriend = 31285;
	ID_C2S_DelFriend = 31286; //刪除好友/黑名单
	ID_S2C_DelFriend = 31287;
	ID_C2S_ConfirmAddFriend = 31288; //确认添加好友
	ID_S2C_ConfirmAddFriend = 31289;
	ID_C2S_FriendPresent = 31290; //赠送好友精力
	ID_S2C_FriendPresent = 31291;
	ID_C2S_GetFriendPresent = 31292; //领取好友精力
	ID_S2C_GetFriendPresent = 31293;
	ID_S2C_FriendRespond = 31294;


	//充值返利
	ID_C2S_GetRechargeRebateInfo = 31300;
	ID_S2C_GetRechargeRebateInfo = 31301;
	ID_C2S_GetRechargeRebateAward = 31302;
	ID_S2C_GetRechargeRebateAward = 31303;

	//封测补偿(跨服)
	ID_C2S_BetaCompInfo = 31304;
	ID_S2C_BetaCompInfo = 31305;
	ID_C2S_BetaCompAward = 31306;
	ID_S2C_BetaCompAward = 31307;

	ID_C2S_GetCurrentRechargeRebate = 31308;
	ID_S2C_GetCurrentRechargeRebate = 31309;


	//军团红包
	ID_C2S_GetGuildRedBagList = 31310;
	ID_S2C_GetGuildRedBagList = 31311;
	ID_C2S_OpenGuildRedBag	  = 31314;
	ID_S2C_OpenGuildRedBag	  = 31315;
	ID_C2S_PutGuildRedBag 	  = 31316;
	ID_S2C_PutGuildRedBag 	  = 31317;
	ID_S2C_GuildRedBagRespondNew = 31318;
	ID_S2C_GuildRedBagRespondDel = 31319;

	//军团捐献
	ID_C2S_GuildDonate = 31325;
	ID_S2C_GuildDonate = 31326;
	ID_C2S_GetGuildDonateReward = 31327;
	ID_S2C_GetGuildDonateReward = 31328;

	//军团答题
	ID_C2S_EnterGuildAnswer = 31330;
	ID_S2C_EnterGuildAnswer = 31331;
	ID_C2S_AnswerGuildQuestion = 31332;
	ID_S2C_AnswerGuildQuestion = 31333;
	ID_C2S_SetGuildAnswerTime = 31334;
	ID_S2C_SetGuildAnswerTime = 31335;
	ID_S2C_GuildAnswerPublic = 31336;
	ID_S2C_GetGuildAnswer = 31337;

	//pvp矿战
	ID_S2C_SendMineInfo	 	 = 31338;
	ID_S2C_SysMineOwn	 	 = 31339;//同步矿坑占领信息
	ID_C2S_EnterMine		 = 31340;//进入矿区
	ID_S2C_EnterMine		 = 31341;
	ID_C2S_SettleMine 		 = 31342;//迁入矿坑
	ID_S2C_SettleMine		 = 31343;
	ID_C2S_BattleMine 		 = 31344;//pk
	ID_S2C_BattleMine		 = 31345;
	ID_S2C_MineRespond 	 	 = 31346;//矿区状态改变刷新
	ID_C2S_GetMineWorld		 = 31347;//矿区世界地图
	ID_S2C_GetMineWorld 	 = 31348;//
	ID_C2S_ChangeMineGuildBorn	 = 31349;//更改矿区公会重生点
	ID_S2C_ChangeMineGuildBorn 	 = 31350;//
	ID_C2S_GetMineSysNotice	 = 31351;//获取矿战日志
	ID_S2C_GetMineSysNotice 	 = 31352;//
	ID_S2C_SendMineSysNotice 	 = 31353;//同步矿区日志
	ID_C2S_GetMineMoney			 = 31354;//领取产出资源
	ID_S2C_GetMineMoney		 	 = 31355;//
	ID_C2S_BattleMineFast 		 = 31356;//扫荡
	ID_S2C_BattleMineFast		 = 31357;
	ID_C2S_MineBuyArmy 		 	 = 31358;//购买兵力
	ID_S2C_MineBuyArmy		 	 = 31359;

	ID_C2S_GetOpCount            = 31360; // 操作计数
	ID_S2C_GetOpCount            = 31361;

	//分享
	ID_C2S_GameShare	            = 31362; // 分享
	//认证
	ID_C2S_GameAdmit	            = 31363; // 认证
	ID_S2C_GameAdmit	            = 31364; // 认证

	//锦囊系统
	ID_C2S_EquipSilkbag      = 31370;
	ID_S2C_EquipSilkbag      = 31371;


	//客户端日志
	ID_C2S_SendClientLog = 31400;
	ID_S2C_SendClientLog = 31401;


	//加载三国杀手杀激活码领奖记录
	ID_C2S_LoadSGSCodeRecord = 31402;
	ID_S2C_LoadSGSCodeRecord = 31403;

	//领取三国杀手杀激活码
	ID_C2S_TakeSGSCode = 31404;
	ID_S2C_TakeSGSCode = 31405;

	// 开服活动
	ID_C2S_GetSevenDaysSprintGuild = 31700;
	ID_S2C_GetSevenDaysSprintGuild = 31701;
	ID_C2S_GetSevenDaysSprintGuildRank = 31702;
	ID_S2C_GetSevenDaysSprintGuildRank = 31703;

	ID_C2S_AvatarActivity = 31705; // 变身卡活动
	ID_S2C_AvatarActivity = 31706;

	ID_C2S_PlaySpecialActivity = 31710; // 特殊装活动
	ID_S2C_PlaySpecialActivity = 31711;
	ID_C2S_SpecialActInfo = 31712; // 特殊活动信息
	ID_S2C_SpecialActInfo = 31713;
	ID_S2C_SpecialActLimitInfo = 31714;

	ID_C2S_GetWeChatBindCode = 31800;
	ID_S2C_GetWeChatBindCode = 31801;

	ID_S2C_GetWeChatBindInfo = 31802;

	ID_C2S_FastGrowTest = 31803;
	ID_S2C_FastGrowTest = 31804;


	//出售
	ID_S2C_SellOnlyObjects = 31900;  // only object出售
	ID_C2S_SellOnlyObjects = 31901;
	//仇人
	ID_C2S_GetEnemyList = 31950;//获取仇人列表
	ID_S2C_GetEnemyList = 31951;
	ID_S2C_EnemyRespond = 31952;
	ID_C2S_DelEnemy		= 31953;//删除仇人
	ID_S2C_DelEnemy		= 31954;
	ID_C2S_EnemyBattle	= 31955;
	ID_S2C_EnemyBattle	= 31956;

	// 阵营竞技
	ID_S2C_CampRaceAward = 32000; // 参赛奖励
	ID_C2S_CampRaceSignUp = 32001; // 阵营竞技报名
	ID_S2C_CampRaceSignUp = 32002;
	ID_C2S_GetCampRaceBaseInfo = 32003; // 阵营报名后基本信息
	ID_S2C_GetCampRaceBaseInfo = 32004;
	ID_C2S_GetCampRaceRank = 32005; // 获取排行榜
	ID_S2C_GetCampRaceRank = 32006;
	ID_C2S_GetCampRaceLastRank = 32007; // 上次信息
	ID_S2C_GetCampRaceLastRank = 32008;
	ID_C2S_CampRaceBet = 32009;
	ID_S2C_CampRaceBet = 32010;
	ID_C2S_GetCampRaceFormation = 32011;
	ID_S2C_GetCampRaceFormation = 32012;
	ID_S2C_CampRaceResultShow = 32013;
	ID_S2C_UpdateCampRace = 32014;
	ID_S2C_AddCampRaceBattleReport = 32015;
	ID_S2C_UpdateCampRaceBet = 32016;
	ID_C2S_GetCampRaceChampion = 32017;
	ID_S2C_GetCampRaceChampion = 32018;
	ID_S2C_UpdateCampRaceFormation = 32019;
	ID_S2C_CampRaceBattleResult = 32020;

	//三国战纪
	ID_C2S_EnterCountryBoss = 32030;
	ID_S2C_EnterCountryBoss = 32031;
	ID_C2S_AttackCountryBoss = 32032;
	ID_S2C_AttackCountryBoss = 32033;
	ID_C2S_GetMaxCountryBossList = 32034;
	ID_S2C_GetMaxCountryBossList = 32035;
	ID_C2S_CountryBossVote = 32036;
	ID_S2C_CountryBossVote = 32037;
	ID_C2S_InterceptCountryBossList = 32038;
	ID_S2C_InterceptCountryBossList = 32039;
	ID_C2S_InterceptCountryBossUser = 32040;
	ID_S2C_InterceptCountryBossUser = 32041;
	ID_S2C_SyncCountryBoss = 32042;
	ID_S2C_SyncCountryBossVote = 32043;
	ID_S2C_SyncCountryBossUser = 32044;
	ID_S2C_SyncCountryBossTime = 32045;

	//家园
	ID_C2S_GetHomeTree = 32060;
	ID_S2C_GetHomeTree = 32061;
	ID_S2C_UpdateHomeTree = 32062;
	ID_S2C_UpdateHomeTreeManager = 32063;
	ID_C2S_HomeTreeUpLevel = 32064; // 升级
	ID_S2C_HomeTreeUpLevel = 32065;
	ID_C2S_HomeTreeHarvest = 32066; // 收获
	ID_S2C_HomeTreeHarvest = 32067;
	ID_C2S_VisitFriendHome = 32068;
	ID_S2C_VisitFriendHome = 32069;

	//老玩家回归
	ID_C2S_GetRegression = 32070; //回归活动列表
	ID_S2C_GetRegression = 32071;
	ID_C2S_ReceiveAwards = 32072; //领奖
	ID_S2C_ReceiveAwards = 32073;
	ID_C2S_LevelDirect = 32074; //一键升级
	ID_S2C_LevelDirect = 32075;
	ID_S2C_RegressionBuyDiscount = 32076;


	// 跑马
	ID_C2S_PlayHorseInfo = 32080;
	ID_S2C_PlayHorseInfo = 32081;
	ID_C2S_PlayHorseBet = 32082;
	ID_S2C_PlayHorseBet = 32083;
	ID_C2S_PlayHorseResult = 32084;
	ID_S2C_PlayHorseResult = 32085;
	ID_S2C_PlayHorseBetNotice = 32086;

	// 称号
	ID_C2S_TitleInfo = 32090;
	ID_S2C_TitleInfo = 32091;

	// 军团战
	ID_C2S_GetGuildWarWorld		 = 32100;//军团战世界地图
	ID_S2C_GetGuildWarWorld 	 = 32101;//
	ID_C2S_EnterGuildWar 		 = 32102;//进入战斗场景
	ID_S2C_EnterGuildWar 		 = 32103;
	ID_C2S_MoveGuildWarPoint 		 = 32104;//移动据点
	ID_S2C_MoveGuildWarPoint 		 = 32105;
	ID_S2C_SyncGuildWar		 		= 32106;//同步
	ID_S2C_SyncGuildWarWorld		 		= 32107;//同步世界
	ID_C2S_GuildWarBattleWatch 		 = 32108;//挑战建筑物
	ID_S2C_GuildWarBattleWatch 		 = 32109;
	ID_C2S_GuildWarBattleUser 		 = 32110;//挑战玩家
	ID_S2C_GuildWarBattleUser 		 = 32111;
	ID_C2S_GuildWarDeclareCity 		 = 32112;//宣战
	ID_S2C_GuildWarDeclareCity		 = 32113;
	ID_C2S_GuildWarData 		 = 32114;//获取军团战数据
	ID_S2C_GuildWarData			 = 32115;
	ID_S2C_GuildWarNotice			 = 32116;//军团战通知

	ID_C2S_GetMultiUserBaseInfo = 32120; // 获取多名玩家基本信息
	ID_S2C_GetMultiUserBaseInfo = 32121; // 获取多名玩家基本信息


	ID_C2S_HeroLimitLvPutRes 		 = 32125;//武将界限突破投资源
	ID_S2C_HeroLimitLvPutRes		 = 32126;
	ID_C2S_HeroLimitLvUp 		 	= 32127;//武将界限突破
	ID_S2C_HeroLimitLvUp		 	= 32128;


	//无差别竞技
	ID_C2S_FightsEntrance = 32130; //入口
	ID_S2C_FightsEntrance = 32131;
	ID_C2S_FightsInitiate = 32132; //匹配
	ID_S2C_FightsInitiate = 32133;
	ID_C2S_FightsCancel = 32134; //取消匹配
	ID_S2C_FightsCancel = 32135;
	ID_C2S_FightsBanPick = 32136; //ban选
	ID_S2C_FightsBanPick = 32137;
	ID_C2S_FightsSilkbagSetting = 32138; //设置锦囊组
	ID_S2C_FightsSilkbagSetting = 32139;
	ID_C2S_FightsSilkbagBinding = 32140; //锦囊绑定英雄
	ID_S2C_FightsSilkbagBinding = 32141;
	ID_S2C_FightsMatchedOpponent = 32142; //匹配到玩家
	ID_C2S_FightsBonus = 32143; //领奖
	ID_S2C_FightsBonus = 32144;
	ID_C2S_FightsLadder = 32145;
	ID_S2C_FightsLadder = 32146;
	ID_C2S_FightsFight = 32147;
	ID_S2C_FightsFight = 32148;
	ID_C2S_GetFightInfo = 32149;
	ID_S2C_GetFightInfo = 32150;
	ID_C2S_FightsBan = 32151;
	ID_S2C_FightsBan = 32152;
	ID_S2C_FightsBanCheck = 32153;
	ID_C2S_FightsReconnection = 32154;
	ID_S2C_FightsReconnection = 32155;

	ID_C2S_GetActVipGift = 32160;
	ID_S2C_GetActVipGift = 32161;
	ID_S2C_BuyVipGift = 32162;

	ID_S2C_GetStarWeapon = 32168;
	ID_S2C_GetStars = 32169;
	ID_C2S_StarBreakThrough	= 32170; //突破
	ID_S2C_StarBreakThrough = 32171;
	ID_C2S_StarEquip = 32172; //装备&更换&卸下
	ID_S2C_StarEquip = 32173;
	ID_C2S_StarReborn = 32174; //重生
	ID_S2C_StarReborn = 32175;
	ID_C2S_StarCollection = 32176; //激活图鉴
	ID_S2C_StarCollection = 32177;
	ID_S2C_GetStarCollection = 32178; //获取图鉴信息
	ID_S2C_GetStarFormation = 32179; //获取名将阵容

	//跨服军团战
	//ID_S2C_BrawlGuildsSchedule = 32180;
	ID_C2S_BrawlGuildsEntry = 32181;
	ID_S2C_BrawlGuildsEntry = 32182;
	ID_C2S_BrawlGuildsFight = 32183;
	ID_S2C_BrawlGuildsFight = 32184;
	ID_C2S_BrawlGuildsLadder = 32185;
	ID_S2C_BrawlGuildsLadder = 32186;
	ID_S2C_BrawlGuildsUpdatePlayer = 32187;
	ID_C2S_BrawlGuildsMove = 32188;
	ID_S2C_BrawlGuildsMove = 32189;
	ID_S2C_BrawlGuildsUpdateKeyPoint = 32190;
	ID_S2C_BrawlGuildsFightNotice = 32191;
	ID_C2S_BrawlGuildsFollowMe = 32192;
	ID_S2C_BrawlGuildsFollowMe = 32193;

	// 战马
	ID_C2S_WarHorseUpgrade = 32200; // 升星
	ID_S2C_WarHorseUpgrade = 32201;
	ID_C2S_WarHorseReclaim = 32202; // 回收
	ID_S2C_WarHorseReclaim = 32203;
	ID_C2S_WarHorseFit = 32204; // 装备
	ID_S2C_WarHorseFit = 32205;
	ID_C2S_WarHorseUnFit = 32206; // 卸载
	ID_S2C_WarHorseUnFit = 32207;
	ID_C2S_WarHorseInfo = 32208; // 战马信息
	ID_S2C_WarHorseInfo = 32209;
	ID_C2S_WarHorseReborn = 32210; // 战马重生
	ID_S2C_WarHorseReborn = 32211;
	ID_C2S_WarHorseDraw = 32212; // 相马
	ID_S2C_WarHorseDraw = 32213;
	ID_C2S_WarHorseRide = 32214; // 骑马
	ID_S2C_WarHorseRide = 32215;
	ID_C2S_WarHorseRideInfo = 32216; // 骑马信息
	ID_S2C_WarHorseRideInfo = 32217; // 骑马信息
	ID_C2S_WarHorseRideStart = 32218; // 骑马开始
	ID_S2C_WarHorseRideStart = 32219; // 骑马开始

	ID_S2C_GetHorseEquip = 32225;
	ID_C2S_ActiveWarHorsePhoto = 32226;
	ID_S2C_ActiveWarHorsePhoto = 32227;
	ID_C2S_EquipWarHorseEquipment = 32228;
	ID_S2C_EquipWarHorseEquipment = 32229;
	ID_C2S_WarHorseEquipmentRecovery = 32230;// 战马装备回收
	ID_S2C_WarHorseEquipmentRecovery = 32231;

	//组队系统
	ID_C2S_GetTeamList = 32240;//获取队伍列表信息
	ID_S2C_GetTeamList = 32241;
	ID_S2C_UpdateTeamInfo = 32242;//更新队伍列表信息
	ID_S2C_UpdateTeamAppList = 32243;//更新队伍申请列表信息
	ID_C2S_CreateTeam = 32244;//创建队伍
	ID_S2C_CreateTeam = 32245;
	ID_S2C_UpdateMyTeam = 32246;//更新自己队伍信息 如果之前不再队伍中立刻加入队伍
	////////////ID_S2C_MyTeamKicked = 32247;
	ID_C2S_AppTeam = 32248;//申请加入队伍
	ID_S2C_AppTeam = 32249;
	ID_C2S_LeaveTeam = 32250;//离开队伍
	ID_S2C_LeaveTeam = 32251;
	ID_C2S_ApproveTeam = 32252;//审批申请
	ID_S2C_ApproveTeam = 32253;
	ID_C2S_ChangeTeamSet = 32254;//改变队伍设置
	ID_S2C_ChangeTeamSet = 32255;
	ID_C2S_TransferLeader = 32256;//转让队长
	ID_S2C_TransferLeader = 32257;
	ID_C2S_AppTransferLeader = 32258;//请求带队
	ID_S2C_AppTransferLeader = 32259;
	ID_S2C_AppTransferLeaderNotice = 32260;//请求带队通知
	ID_C2S_OpTransferLeader = 32261;//审批请求带队
	ID_S2C_OpTransferLeader = 32262;
	ID_C2S_InviteJoinTeam = 32263;//邀请好友组队
	ID_S2C_InviteJoinTeam = 32264;
	ID_S2C_InviteJoinTeamNotice = 32265;//邀请好友组队通知
	ID_C2S_OpInviteJoinTeam = 32266;//审批邀请好友组队
	ID_S2C_OpInviteJoinTeam = 32267;
	ID_S2C_TeamTips = 32268;
	ID_C2S_TeamEnterScene = 32269;//组队进入玩法场景
	ID_S2C_TeamEnterScene = 32270;
	ID_S2C_UpdateEnterSceneState = 32271;//组队进入玩法场景确认通知
	ID_C2S_OpEnterScene = 32272;//组队进入玩法场景确认操作
	ID_S2C_OpEnterScene = 32273;
	ID_C2S_TeamKick = 32274;//提出队伍
	ID_S2C_TeamKick = 32275;
	ID_C2S_TeamChangeMemberNo = 32276;//转换站位
	ID_S2C_TeamChangeMemberNo = 32277;
	ID_S2C_SyncInviteList = 32278;//新加入队伍同步邀请好友列表
	ID_S2C_SyncAppTeamList = 32279;//同步申请队伍列表

	//先秦皇陵
	ID_C2S_GraveEnterScene = 32349;//组队进入场景世界
	ID_S2C_GraveEnterScene = 32350;//组队进入场景世界
	ID_S2C_UpdateGrave = 32351;//更新先秦皇陵
	ID_C2S_GraveMove = 32352;//移动
	ID_S2C_GraveMove = 32353;
	ID_C2S_GraveBattlePoint = 32354;//抢夺挂机点
	ID_S2C_GraveBattlePoint = 32355;
	ID_S2C_GraveBattleNotice = 32356;//战斗结束
	ID_C2S_GraveLeaveBattle = 32357;//离开战斗
	ID_S2C_GraveLeaveBattle = 32358;
	ID_S2C_GraveReward = 32359;//推送奖励

	//通用战报接口
	ID_C2S_GetNormalBattleReport = 32400;
	ID_S2C_GetNormalBattleReport = 32401;

	// 手杀联运
	ID_C2S_GetCombineTaskStatus = 32500;
	ID_S2C_GetCombineTaskStatus = 32501;
	ID_C2S_MJZ2SS_CombineTaskQueryTask = 32502;
	ID_S2C_MJZ2SS_CombineTaskQueryTask = 32503;
	ID_C2S_MJZ2SS_CombineTaskSignUp = 32504;
	ID_S2C_MJZ2SS_CombineTaskSignUp = 32505;
	ID_C2S_MJZ2SS_CombineTaskAward = 32506;
	ID_S2C_MJZ2SS_CombineTaskAward = 32507;

	// 用于推送的玩家必要信息上报
	ID_C2S_ReportUserInfo = 32510;
	
	// 商店评论
	ID_C2S_ShopCommentAction = 32511;
	ID_S2C_ShopCommentAction = 32512;
	// 每日奖励
	ID_C2S_GetDailyGiftInfo = 32513;
	ID_S2C_GetDailyGiftInfo = 32514;
	ID_C2S_GetDailyGiftAward = 32515;
	ID_S2C_GetDailyGiftAward = 32516;

	
	//个人跨服竞技
	ID_C2S_GetSingleRacePkInfo = 32520;//获取个人竞技对战图
	ID_S2C_GetSingleRacePkInfo = 32521;//获取个人竞技对战图
	ID_S2C_UpdateSingleRacePkInfo = 32522;//更新个人竞技对战图
	ID_C2S_SingleRaceChangeEmbattle = 32523;//个人竞技调整站位
	ID_S2C_SingleRaceChangeEmbattle = 32524;//
	ID_S2C_UpdateSingleRaceEmbattle = 32525;//更新阵营竞技站位
	ID_C2S_SingleRaceSupport = 32526;//个人竞技押注
	ID_S2C_SingleRaceSupport = 32527;//
	ID_C2S_GetSingleRacePositionInfo = 32528;//获取某个位置信息
	ID_S2C_GetSingleRacePositionInfo = 32529;//
	ID_S2C_GetSingleRaceStatus = 32530;//获取个人竞技状态

	ID_C2S_SingleRaceAnswerSupport = 32531;//
	ID_S2C_SingleRaceAnswerSupport = 32532;//
	ID_S2C_UpdateSingleRaceAnswerSupport = 32533;//更新押注

	// 更换头像窗
	ID_C2S_ChangeHeadFrame = 32540;	// 请求更换头像窗
	ID_S2C_ChangeHeadFrame = 32541; // 更换头像窗
	ID_S2C_GetHeadFrameInfo = 32542; // 刷新请求
	// 新的答题系统
	ID_S2C_GuildAnswerSysNotify = 32543;    // 新答题系统变更通知
	ID_S2C_GuildAnswerChangeNotify = 32544; // 玩家更换答案通知
	ID_C2S_EnterNewAnswer = 32545; 		 // 新答题进入
	ID_S2C_EnterNewAnswer = 32546; 		 //
	ID_C2S_GuildAnswerChange = 32547; 		 // 更换答案req
	ID_S2C_GuildAnswerChange = 32548; 		 // 更换答案resp
	ID_S2C_GetGuildNewAnswer = 32549;		// 新版答题
	ID_S2C_GuildNewAnswerPublic = 32550;	// 新答题

	// 清除头像框红点
	ID_C2S_ClearHeadFrameRedPoint = 32579; 			//清除红点
	ID_S2C_ClearHeadFrameRedPoint = 32580; 			//清除红点

	// 新版红包雨
	ID_S2C_NewRedPacketStartNotify = 32581;			// 新版红包雨开启提醒
	ID_C2S_EnterNewRedPacket = 32582;				// 请求进入新版红包雨
	ID_S2C_EnterNewRedPacket = 32583;				// 进入新版红包雨反馈
	ID_C2S_GetNewRedPacket = 32584;					// 领取红包
	ID_S2C_GetNewRedPacket = 32585;					// 领取红包
	//ID_S2C_GetNewRedPacketNotify = 32586;			// 领取红包雨广播
	ID_S2C_GetNewRedPacketNotifyMulti = 32587;			// 领取红包雨广播
	//蛋糕活动
	ID_C2S_GetCakeActivityTaskReward = 32590;			// 领取蛋糕任务奖励
	ID_S2C_GetCakeActivityTaskReward = 32591;			// 领取蛋糕任务奖励
	ID_C2S_EnterCakeActivity 				= 32592;			// 拉取蛋糕活动数据
	ID_S2C_EnterCakeActivity 				= 32593;			//
	ID_S2C_UpdateCakeTaskInfo 			= 32594; //蛋糕任务数据更新
	ID_S2C_UpdateGuildCakeInfo 			= 32595; //军团蛋糕信息更新
	ID_S2C_UpdateRankCakeAndNotice 		= 32596; //蛋糕排行榜和弹幕信息更新
	ID_C2S_AddGuildCakeExp 				= 32597;			//做蛋糕
	ID_S2C_AddGuildCakeExp 				= 32598;			//
	ID_S2C_GetCakeActivityStatus 		= 32599;			//获取蛋糕活动状态
	ID_C2S_GetGuildCakeUpLvReward 		= 32600;			//做蛋糕
	ID_S2C_GetGuildCakeUpLvReward 		= 32601;			//领取蛋糕升级宝箱
	ID_S2C_UpdateGuildCakeLvUpReward 	= 32602; //军团蛋糕升级奖励更新
	ID_S2C_CakeRechrageReward       	= 32603; //蛋糕充值奖励
	
	// 后注册玩家奖励任务
	ID_C2S_GetLateRegistTaskInfo = 38001;
	ID_S2C_GetLateRegistTaskInfo = 38002;
	ID_C2S_GetLateRegistTaskAward = 38003;
	ID_S2C_GetLateRegistTaskAward = 38004;
	ID_S2C_UpdateLateRegistTaskInfo = 38005;


	ID_C2S_Test = 39998;
	ID_S2C_Test = 39999;

	///////////////////////////////// 不要在下面加了
}

message C2S_WarHorseEquipmentRecovery {
	repeated uint64 horse_equip_id = 1; // 战马装备id
}

message S2C_WarHorseEquipmentRecovery {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}


message C2S_EquipWarHorseEquipment {
	optional uint64 horse_id = 1; // 战马id
	optional uint64 horse_equip_id = 2; // 战马装备id
	optional uint32 pos = 3; // 位置
}

message S2C_EquipWarHorseEquipment {
	optional uint32 ret = 1;
}


message C2S_ClearTitleRedPoint {
	repeated uint32 title_ids = 1;
}

message C2S_EquipTitle {
	optional uint32 title_id = 1;
}

message S2C_EquipTitle {
	optional uint32 ret = 1;
	optional uint32 now_id = 2;
	optional uint32 old_id = 3;
}


message C2S_FightsBan {
	repeated uint32 units = 1;
	repeated uint32 pets = 2;
}

message S2C_FightsBan {
	required uint32 ret = 1;
}

message S2C_FightsBanCheck {
	required uint32 ret = 1;
	repeated uint32 units = 2;
	optional uint32 round_end_time = 3; //先手第一回合结束时间
	repeated uint32 pets = 4;
}

message FightsReport{
	optional uint64 op_sid = 1;
	optional string op_name = 2;
	optional uint32 op_star = 3;
	optional uint32 op_title = 4;
	optional uint64 report_id = 5; //战报id
	optional bool is_win = 6;  // true 胜 false 负
	optional uint32 report_time = 7; //战报时间
	optional string sname = 8; //服务器名称
	optional uint32 user_star = 9; //玩家当时段位
}

//战斗
message C2S_FightsFight{}

message S2C_FightsFight{
	required uint32 ret = 1;
	optional uint64 battle_report = 2;
	optional uint32  exception_res = 3; //1- 己方cd到 2-对方cd到 3 - 己方cd到并扣星 4 -乙方cd到并扣2星
}


//无差别竞技跨服排行榜
message C2S_FightsLadder {}
message S2C_FightsLadder {
	required uint32 ret = 1;
	repeated FightsLadderInfo ladder = 2;
	optional uint32 rank = 3; //自己的排名 0 表示未上榜
	optional uint32 star = 4;
	optional uint32 fight_count = 5;
	optional uint32 win_count = 6;
}


message FightsLadderInfo {
	optional uint64 uid = 1;
	optional uint64 sid = 2;
	optional string name = 3;
	optional uint32 star = 4;
	repeated uint32 units = 5; //常用阵容 6个一取
	optional uint32 time = 6;
	optional uint32 base_id = 7;
	optional uint32 avatar_base_id = 8;
	optional uint32 title = 9;
	optional uint32 fight_count = 10;
	optional uint32 win_count = 11;
	optional string sname = 12;
	optional uint64 avatar_id = 13; //变身卡
	optional uint32 game_title = 14;
	optional uint32 head_icon_id = 15; //头像框id
}

//领取赛季奖励
message C2S_FightsBonus {
	optional uint32 bonus_type = 1; //是否是赛季奖励 1 每日战斗 2 每日胜利 3 赛季
	optional uint32 idx = 2; //每日战斗, 每日胜利奖励 从0开始
}

message S2C_FightsBonus {
	required uint32 ret = 1;
	repeated Award awards = 2;
	optional uint32 bonus_type = 3;
	optional uint32 reward_state = 4;
}

//匹配到玩家
message S2C_FightsMatchedOpponent {
	required uint32 ret = 1;
	optional string uname = 2;//玩家昵称
	optional uint64 sid = 3; //对手服务器id
	optional uint32 star = 4; //对手段位
	optional uint32 is_first = 5; //己方是否先手 是 1 否 2
	optional uint32 base_id = 6; //主将base_id
	optional uint32 avatar_base_id = 7; //头像id
	optional uint32 round_end_time = 8; //先手第一回合结束时间
	optional uint32 title = 9; //玩家头衔
	optional string sname = 10; //服务器名字
	optional uint64 avatar_id = 11; //变身卡id
	optional uint32 head_icon_id = 12;
}

message FightsSilkbagConfig {
	required uint32 idx = 1; //锦囊组索引
	optional string name = 2; //锦囊组名字
	repeated uint32 silkbag = 3; //锦囊组
}

message C2S_FightsReconnection{}
message S2C_FightsReconnection{
	required uint32 ret = 1;
	optional uint32 round = 2; //0 标识ban人回合
	optional uint32 round_end_time = 3; //结束时间
	repeated uint32 own_side = 4; //己方阵容信息
	repeated uint32 other_side = 5; //对方阵容信息
	repeated uint32 ban_units = 6; //ban人信息
	optional uint32 is_first = 7; //是否是先手 己方是否先手 是 1 否 2
	optional string uname = 8;//玩家昵称
	optional uint64 sid = 9; //对手服务器id
	optional uint32 star = 10; //对手段位
	optional string sname = 11; //服务器名字
	optional uint32 title = 12; //玩家头衔
	repeated uint32 own_side_avater = 13; //[0,1,0,1,0,1]
	repeated uint32 ban_pets = 14; //ban宠物
}



//入口
message C2S_FightsEntrance {}
message S2C_FightsEntrance {
	required uint32 ret = 1;
	optional bool   is_inherit = 2; //是否赛季继承
	optional uint32 now_star = 3; //本赛季星数
	repeated FightsSilkbagConfig silkbag_config = 4; //锦囊组
	optional uint32 no_entry_end_time = 5; //禁赛时间
	optional uint32 is_history_bonus_recved = 6; //赛季奖励是否领取 0 - 未领取 1 - 已领取
	optional uint32 history_star = 7; //上赛季段位
	optional uint32 group = 8; //新秀组 or 大师组
	optional uint32 season_end_time = 10; //赛季结束时间
	optional uint32 season = 11; //当前第几赛季
	optional uint64 sid = 12; //玩家服务器id
	repeated FightsUnitSilkbagBinding unit_silkbag_binding = 13;
	optional uint32 daily_fight_reward = 14; //每日战斗奖励 掩码 0 未领取 1 已领取
	optional uint32 daily_win_reward = 15; //每日胜利奖励 0 未领取 1 已领取
	optional uint32 fight_num = 16;  //战斗次数
	optional uint32 win_num = 17; //胜利次数
	repeated uint32 pets = 18; //神兽
	optional uint32 reduce_star = 19; //0,1,2  0未扣星 >0扣的星数
	optional bool be_ongoing = 20; //进行中 true 战斗进行中
	optional uint32 season_fight_num = 21;
	optional uint32 season_win_num = 22;
}

//匹配
message C2S_FightsInitiate {}
message S2C_FightsInitiate{
	required uint32 ret =1;
}

//取消匹配
message C2S_FightsCancel {}
message S2C_FightsCancel {
	required uint32 ret = 1;
}

//banpick
message C2S_FightsBanPick {
	repeated FightsBanPick bp = 1;
}

message FightsBanPick {
	required uint32 unit = 1;//武将id
    required uint32 pos = 2; //布阵位置
	optional uint32 is_avatar = 3;// 0  本身  1 变身卡
}

message S2C_FightsBanPick {
	required uint32 ret = 1;
	repeated uint32 own_side = 2; //己方阵容信息
	repeated uint32 other_side = 3; //对方阵容信息
	optional uint32 round = 4; //下回合
	optional uint32 round_end_time = 5; //回合结束时间
	repeated uint32 own_side_avater = 6;
}

//设置锦囊组
message C2S_FightsSilkbagSetting {
	optional FightsSilkbagConfig silkbag_config = 1;
}

message S2C_FightsSilkbagSetting {
	required uint32 ret = 1;
	optional FightsSilkbagConfig silkbag_config = 2;
}

//锦囊绑定英雄
message C2S_FightsSilkbagBinding {
	repeated FightsUnitSilkbagBinding skb = 1;
	repeated uint32 pets = 2;
}

message S2C_FightsSilkbagBinding {
	required uint32 ret = 1;
}

message FightsUnitSilkbagBinding {
	required uint32 unit = 1;
	required uint32 idx = 2;//锦囊组索引
}

message S2C_CampRaceBattleResult {
	optional uint64 uid = 1;
	optional uint32 camp = 2;
	optional bool win = 3;
}

message S2C_UpdateCampRaceFormation {
	optional uint64 uid = 1;
	optional uint32 camp = 2;
	optional CampRaceUserFormation formation = 3;
}


message CampRaceBattleReport {
	optional uint32 id = 1;
	optional uint32 camp = 2;
	optional uint32 pos1 = 3;
	optional uint32 pos2 = 4;
	optional uint32 win_pos = 5;
	optional uint32 first_hand = 6;
	optional uint64 left_power = 7;
	optional uint64 right_power = 8;
	repeated uint32 left_heros = 9;
	repeated uint32 right_heros = 10;
	optional uint64 report_id = 11;
}

message S2C_AddCampRaceBattleReport {
	optional CampRaceBattleReport battle_report = 1;
}

// 阵营竞技阵容展示
message CampRaceUserFormationBase {
	optional uint64 hero_id = 1;
	optional uint32 hero_base_id = 2;
	optional uint32 avartar_base_id = 3;
	optional uint32 rank_level = 4;
	optional uint32 limit_rank_level = 5;
}

message CampRaceUserFormation {
	optional uint64 uid = 1;
	optional uint32 base_id = 2;
	optional string name = 3;
	optional uint32 officer_level = 4;
	optional uint64 power = 5;
	optional uint32 rank = 6;
	optional bool first_hand = 7;
	optional uint32 status = 8;
	optional uint32 win_num = 9;
	optional uint32 per_rank = 10; // 预赛排名
	repeated uint64 formation = 11;
	repeated CampRaceUserFormationBase hero_data = 12;
}

message CampRaceUserData {
	optional uint64 id = 1;
	optional uint32 base_id = 2;
	optional uint32 avatar_base_id = 3;
	optional string name = 4;
	optional uint32 officer_level = 5;
	optional uint32 score = 6;
	optional uint64 power = 7;
}

message C2S_GetCampRaceChampion {
}


message CampRaceChampion {
	optional uint32 camp = 1;
	optional CampRaceUserData user = 2;
}

message S2C_GetCampRaceChampion {
	optional uint32 ret = 1;
	repeated CampRaceChampion champion = 2;
}


message C2S_GetCampRaceFormation {
	optional uint32 camp = 1;
	optional uint64 uid = 2;
}

message S2C_GetCampRaceFormation {
	optional uint32 ret = 1;
	optional uint32 camp = 2;
    optional uint32 round = 3;
    optional uint32 start_time = 4;
	optional CampRaceUserFormation left_formation = 5;
	optional CampRaceUserFormation right_formation = 6;
}

message S2C_CampRaceResultShow {
	optional uint32 show_type = 1; // 展示类型（1：预赛结果 2：决赛结果）
	optional uint32 show_value = 2;
}

message S2C_UpdateCampRace {
	optional uint32 camp = 1;
	optional uint32 final_status = 2;
	optional uint32 round = 3;
	optional uint32 start_time = 4;
}

message S2C_CampRaceAward {
	optional uint32 win_type = 1;
	repeated Award awards = 2;
}

// 阵营竞技报名
message C2S_CampRaceSignUp {

}

message S2C_CampRaceSignUp {
	optional uint32 ret = 1;
}

message CampRaceBet {
	optional uint32 camp = 1;
	optional uint32 pos = 2;
}

message S2C_UpdateCampRaceBet {
	repeated CampRaceBet bet_info = 1;
}

// 押注
message C2S_CampRaceBet {
	optional uint32 camp = 1;
	optional uint32 pos = 2;
}

message S2C_CampRaceBet {
	optional uint32 ret = 1;
}

message C2S_GetCampRaceBaseInfo {

}

message S2C_GetCampRaceBaseInfo {
	optional uint32 ret = 1;
	optional uint32 camp = 2;  // 所属阵营1:魏 2:蜀 3:吴 4:群
	optional uint32 status = 3; // 状态
}

message C2S_GetCampRaceLastRank {
	optional uint32 camp = 1;
}

message S2C_GetCampRaceLastRank {
	optional uint32 ret = 1;
	optional uint32 camp = 2;  // 所属阵营1:魏 2:蜀 3:吴 4:群
	optional uint32 status = 3; // 决赛状态1：四强赛 2：半决赛 3：决赛 4：决赛比赛结束
	repeated uint64 last_race_ids = 4; // 上次比赛决赛对阵信息
	repeated CampRaceUserData user_data = 5;
	repeated CampRaceBattleReport battle_report = 6;
}

message C2S_GetCampRaceRank {
	repeated uint32 camp = 1;
}


message CampRaceRank {
	optional uint32 camp = 1;
	optional uint32 self_rank = 2;
	optional uint32 self_score = 3;
	repeated CampRaceUserData ranks = 4;
}

message S2C_GetCampRaceRank {
	optional uint32 ret = 1;
	repeated CampRaceRank ranks = 2;
}


message DailyCount {
	optional uint32 key = 1;
	optional uint32 value = 2;
}

message S2C_GetDailyCount {
	repeated DailyCount daily_count = 1;
}

message C2S_AvatarActivity {
	optional uint32 op_type = 1; // 1: 投1次 2: 投5次
}

message AvatarActivityAward {
	optional uint32 index = 1;
	optional Award award = 2;
}

message S2C_AvatarActivity {
	optional uint32 ret = 1;
	optional uint32 use_count = 2;
	repeated AvatarActivityAward awards = 3;
}


// 红装活动信息请求
message C2S_SpecialActInfo {
	optional uint32 act_type = 1;
}

message S2C_SpecialActInfo {
	optional uint32 ret = 1;
	optional uint32 act_type = 2;
	optional uint32 free_use = 3;
	optional uint32 total_use = 4;
	optional int64 last_draw_time = 5;
	repeated uint32 records = 6;
}

// 红装抽取
message C2S_PlaySpecialActivity {
	optional uint32 draw_type = 1;
	optional uint32 act_type = 2;
	optional uint32 drop_index = 3;
}

message S2C_PlaySpecialActivity {
	optional uint32 ret = 1;
	optional uint32 act_type = 2;
	optional uint32 draw_type = 3;
	optional uint32 used_free = 4;
	optional uint32 total_use = 5;
	optional int64 last_draw_time = 6;
	repeated uint32 add_records = 7;
}

message S2C_SpecialActLimitInfo {
	optional uint32 act_type = 1;
	optional uint32 limit_use = 2;
}

message GuildRankData {
	optional uint32 rank = 1;
	optional string guild_name = 2;
	optional string guild_leader_name = 3;
	optional uint32 guild_leader_office_level = 4;
}

message C2S_GetSevenDaysSprintGuild {

}

message S2C_GetSevenDaysSprintGuild {
	optional uint32 ret = 1;
	repeated GuildRankData show_guilds = 2;
	optional uint32 guild_rank = 3;
}


message C2S_GetSevenDaysSprintGuildRank {

}

message S2C_GetSevenDaysSprintGuildRank {
	optional uint32 ret = 1;
	repeated  GuildRankData ranks = 2;
	optional uint32 rank = 3;
}

message SilkbagOnTeam {
	optional uint32 pos = 1;
	optional uint32 index = 2;
	optional uint64 silkbag_id = 3;
}

message S2C_GetEquipSilkbag {
	repeated SilkbagOnTeam equip_silkbag = 1;
}

// 装备锦囊
message C2S_EquipSilkbag {
	optional uint32 pos = 1;
	optional uint32 index = 2;
	optional uint64 silkbag_id = 3;
}

message S2C_EquipSilkbag {
	optional uint32 ret = 1;
	optional uint32 pos = 2;
	optional uint32 index = 3;
	optional uint64 silkbag_id = 4;
}

message C2S_ActivePetPhoto {
	optional uint32 id = 1;
}


message S2C_ActivePetPhoto {
	optional uint32 ret = 1;
	optional uint32 id = 2;
}



message OpCount {
	optional uint32 op_type = 1;
	// 1: 武将回收
	optional uint32 op_count = 2;
}


message C2S_GetOpCount {

}

message S2C_GetOpCount {
	optional uint32 ret = 1;
	repeated OpCount op_count = 2;
}


message C2S_ActResourceBackAward {
	optional uint32 id = 1;
	optional uint32 back_type = 2; // 找回类型0：完美找回 1：普通找回
}

message S2C_ActResourceBackAward {
	optional uint32 ret = 1;
	optional uint32 id = 2;
	repeated Award awards = 3; // 奖励
}

message ResourceBackItem {
	optional uint32 id = 1; // 配置id
	repeated Award awards = 2; // 奖励
	optional uint32 state = 3; // 领取状态
	optional uint32 value = 4; // 参数
}


message S2C_GetResourceBackData {
	repeated ResourceBackItem data = 1;
}


message S2C_GetActiveAvatarPhoto {
	repeated uint32 avatar_photo = 1;
}

message S2C_GetActivePetPhoto {
	repeated uint32 pet_photo = 1;
}

message S2C_GetActiveWarHorsePhoto {
	repeated uint32 horse_photo = 1;
}


message C2S_ActiveAvatarPhoto {
	optional uint32 id = 1;
}

message S2C_ActiveAvatarPhoto {
	optional uint32 ret = 1;
	optional uint32 id = 2;
}


message C2S_CommonPhoneOrder {
	optional string phone_num = 1; // 手机号
}

message S2C_CommonPhoneOrder {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}


message ShopGoodState {
	optional uint32 id = 1;
	optional uint32 value = 2;
	optional uint32 buy_count = 3;
	optional uint32 this_buy_count = 4;
}

message C2S_ShopCrystalBuy {
	optional uint32 good_id = 1;
	optional uint32 good_count = 2;
}

message S2C_ShopCrystalBuy {
	optional uint32 ret = 1;
	optional ShopGoodState goodState = 2;
}

message C2S_GetShopCrystal {
}

message S2C_GetShopCrystal {
	optional uint32 ret = 1;
	repeated ShopGoodState goods = 2;
}

message C2S_GetShopCrystalAward {
	optional uint32 id = 1;
}

message S2C_GetShopCrystalAward {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

message C2S_RefreshCrystalShop {
}

message S2C_RefreshCrystalShop {
	optional uint32 ret = 1;
	repeated ShopGoodState goods = 2;
}

message S2C_GetPetFormation {
	repeated uint64 pet_ids = 1;
}


message C2S_PetRecycle {
	repeated uint64 pet_ids = 1;
}


message S2C_PetRecycle {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

message C2S_PetReborn {
	optional uint64 pet_id = 1;
}

message S2C_PetReborn {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}


message C2S_PetStarUp {
	optional uint64 pet_id = 1;
	repeated uint64 cost_pet_id = 2; //消耗同名卡
	repeated uint64 cost_base_pet_id = 3; //消耗突破前同名卡
}

message S2C_PetStarUp {
	optional uint32 ret = 1;
}


message C2S_PetLevelUp {
	optional uint64 pet_id = 1;
	repeated Item materials = 2; //升级材料
}

message S2C_PetLevelUp {
	optional uint32 ret = 1;
}


message C2S_PetOnTeam {
    optional uint64 pet_id = 1; // 上阵神兽id 下阵填0
	optional uint32 on_team_type = 2; // 1:上阵位 2:上护佑位
	optional uint32 pos = 3; //上护佑位位置,从0开始
}

message S2C_PetOnTeam {
    optional uint32 ret = 1;
    optional uint64 pet_id = 2;
	optional uint32 on_team_type = 3; // 1:上阵位 2:上护佑位
	optional uint32 pos = 4; //上护佑位位置,从0开始
}

message C2S_PetRankUp{
	required uint64 pet_id = 1;
}

message S2C_PetRankUp {
	required uint32 ret = 1;
	optional uint64 old_pet_id = 2;
	optional uint64 new_pet_id = 3;
}

message C2S_PetPostRankUpMaterial{
	required uint64 pet_id = 1;
	optional Item materials = 2; //升级材料
}

message S2C_PetPostRankUpMaterial{
	required uint32 ret = 1;
}


// 武将置换
message C2S_HeroTransform {
	optional uint32 to_id = 1;
	repeated uint64 src_ids = 2;
	optional bool   with_instrument = 3;
}

message S2C_HeroTransform {
	optional uint32 ret = 1;
}

// 武将置换
message C2S_TreasureTransform {
	optional uint32 to_id = 1;
	repeated uint64 src_ids = 2;
}

message S2C_TreasureTransform {
	optional uint32 ret = 1;
}

message C2S_InstrumentTransform {
	optional uint32 to_id = 1;
	repeated uint64 src_ids = 2;
}

message S2C_InstrumentTransform {
	optional uint32 ret = 1;
}



message C2S_GetPeriodBoxAward {
    optional uint32 box_id = 1;
}

message S2C_GetPeriodBoxAward {
    optional uint32 ret = 1;
    optional uint32 box_id = 2;
    repeated Award awards = 3;
}

message S2C_ActLevelDiscountAward {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}


message C2S_Test {

}

message S2C_Test {
	optional uint32 ret = 1;
}


message C2S_GetAuctionLog {
	optional uint32 auction_type = 1;
}

message AuctionLog {
	optional uint32 id = 1;
	optional uint32 main_type = 2;
	optional uint32 deal_time = 3;
	optional Award item = 4;
	optional uint32 price   = 5;
	optional uint32 price_type = 6; //1:竞拍价 2:一口价 3:流拍
}

message S2C_GetAuctionLog {
	optional uint32 ret = 1;
	repeated AuctionLog logs = 2;
}


message C2S_GetAuctionInfo {
	optional uint32 auction_type = 1; // 拍卖行类型 1：军团拍卖行 2：全服拍卖
}

message S2C_AuctionBuyerReplace {
	optional Award item = 1;
}

message AuctionItem {
	optional uint32 id = 1;
	optional uint32 order_id = 2;
	optional uint32 config_id = 3;
	optional Award  item = 4;
	optional uint32 init_price = 5; // 起始价
	optional uint32 add_price = 6;  // 加价
	optional uint32 final_price = 7; // 一口价
	optional uint32 now_price = 8; // 当前价
	optional uint64 now_buyer = 9; // 当前出价人
	optional uint32 open_time = 10; // 准备时间
	optional uint32 start_time = 11; // 开始时间
	optional uint32 end_time = 12; // 结束时间
}

message AuctionInfo {
	optional uint32 config_id = 1;
	optional uint32 bonus = 2;
	optional bool   canBonus = 3;
	optional uint32 end_time = 4;
	repeated AuctionItem auction_items = 5;
	repeated uint32 item_ids = 6;
}

message S2C_GetAuctionInfo {
	optional uint32 ret = 1;
	optional uint32 main_type = 2; // 拍卖行类型 1：军团拍卖 2：全服拍卖
	repeated AuctionInfo auction_info = 3;
	repeated AuctionItem auction_items = 4;
	optional bool first = 5;
	optional bool last = 6;
}

message C2S_GetAllAuctionInfo {

}

message S2C_GetAllAuctionInfo {
	optional uint32 ret = 1;
	repeated AuctionInfo guild_auction = 2;
	repeated AuctionInfo guild_war_auction = 3;
	repeated AuctionInfo gm_auction = 4;
	repeated AuctionInfo world_auction = 5;
    repeated AuctionItem auction_items = 6;
    optional bool first = 7;
    optional bool last = 8;
}

message S2C_UpdateAuctionItem {
	optional uint32 config_id = 1;
	optional uint32 item_id = 2;
	optional uint32 main_type = 3;
	optional bool delete = 4;
	optional uint32 now_price = 5;
	optional uint64 now_buyer = 6;
	optional uint32 end_time = 7;
	optional uint32 share_bonus = 8;
}

message C2S_Auction {
	optional uint32 main_type = 1; // 拍卖行类型 1：军团拍卖 2：全服拍卖
	optional uint32 config_id = 2; // 配置id
	optional uint32 item_id = 3; // 拍卖品id
	optional uint32 auction_type = 4; // 竞价类型 1：加价 2：一口价
}

message S2C_Auction {
	optional uint32 ret = 1;
	optional uint32 main_type = 2; // 拍卖行类型 1：军团拍卖 2：全服拍卖
	optional uint32 config_id = 3; // 配置id
	optional uint32 item_id = 4; // 拍卖品id
	optional uint32 now_price = 5; // 当前价格
	optional uint64 now_price_uid = 6; // 当前价格
	optional uint32 auction_type = 7; // 类型
}

message C2S_GetUserDetailInfo {
	optional uint64 user_id = 1;
}

message UserDetailInfo {
	optional uint32 base_id = 2;
	optional uint64 avatar_id = 3;
	optional uint32 avatar_base_id = 4;
	optional string name = 5;
	optional uint32 level = 6;
	optional uint32 office_level = 7;
	repeated uint32 destiny = 8;
	repeated Hero   heros = 9; // 武将
	repeated uint64 formation = 10;
	repeated uint64 second_formation = 11;
	repeated Equipment equipments = 12; //装备
	repeated Treasure treasures = 13; // 宝物
	repeated BattleResource team_resource = 14; // 上阵装备
	repeated Instrument instruments = 15; // 神兵
	repeated Avatar avatars = 16; //变身卡
	repeated Pet pets = 17; //神兽
	optional uint64 on_team_pet_id = 18; // 上阵神兽
	repeated uint64 protect_pet_ids = 19; // 神兽护卫队
	repeated ResPhoto res_photo = 20; // 图鉴
	repeated ActivePhoto active_photo = 21; // 激活图鉴
	repeated Silkbag silkbags = 22; // 锦囊
	repeated SilkbagOnTeam silkbag_team = 23; // 锦囊
	repeated HomeTree home_tree = 24; // 神树
	repeated WarHorseData war_horses = 25; // 战马
	repeated WarHorseEquipData war_horse_equip = 26; // 战马装备
	repeated Jade jade = 27; //装备的玉石
}

message S2C_GetUserDetailInfo {
	optional uint32 ret = 1;
	optional UserDetailInfo user =2;
}

message C2S_Practice {
	optional uint64 user_id = 1;
}

message S2C_Practice {
	optional uint32 ret = 1;
	optional uint64 battle_report = 2;
}

message S2C_GetBlackList {
	optional uint32 ret = 1;
	repeated uint64 user_ids = 2;
}

message C2S_OpBlackList {
	optional uint32 op_type = 1; // 1 添加黑名单 2 解除黑名单
	optional uint64 user_id = 2;
}

message S2C_OpBlackList {
	optional uint32 ret = 1;
	optional uint32 op_type = 2;
	optional uint64 user_id = 3;
}

message C2S_GetUserBaseInfo {
	optional uint64 user_id = 1;
}

message S2C_GetUserBaseInfo {
	optional uint32 ret = 1;
	optional uint64 user_id = 2;
	optional uint32 base_id = 3;
	optional uint64 avatar_id = 4;
	optional uint32 avatar_base_id = 5;
	optional string name = 6;
	optional uint32 office_level = 7;
	optional uint32 level = 8;
	optional uint64 power = 9;
	optional string guild_name = 10;
	optional bool is_friend = 11;
	repeated uint32 titles = 12;
	optional uint32 head_frame_id = 13;
}

message S2C_KickOutUser{
	required uint64 userId = 1;//
	required uint32 reason = 2;//
}

//奖励
message Award {
	required uint32 type = 1;//5 装备
	required uint32 value = 2;//
	required uint32 size = 3;
}

//掉落的额外奖励
message AddAward {
	required uint32 index = 1;//档次
	required Award award = 2;//奖励
}
//某个玩法的次数
message CommonCount {
	required uint32 func_id = 1; //功能id
	required uint32 left_count = 2;//剩余次数
	required uint32 buy_count = 3;//购买次数
}

message RecruitZyAward {
	repeated Award awards = 1; //单抽的奖励
}

message BattleMember {
	optional uint32 pos = 1;//武将位置
	optional uint32 knight_id = 2;//武将id
	optional uint32 monster_id = 3;
	optional uint64 max_hp = 4;//最大血量
	optional uint64 hp = 5;//当前血量
	optional uint32 anger = 6;//初始怒气
	optional uint32 rank_lv = 7;//武将突破等级
	optional uint32 instrument_id = 8;//法宝Id
	optional uint32 instrument_rank = 9;//法宝突破等级
	optional uint32 camp = 10; //阵营
	optional bool is_user = 11; //属于玩家
	optional bool is_leader = 12; //是否主角
	optional uint32 limit_lv = 13;//武将界限突破等级
	repeated uint32 show_mark = 14;//初始展示
}

//战斗怪物信息
message BattlePet {
	optional uint32 camp = 1;
	optional uint32 pet_base_id = 2;
	optional uint32 pet_star = 3;
}

//战斗怪物信息
message BattleStar {
	optional uint32 camp = 1;
	optional uint32 star_base_id = 2;
}

message BattleOneRound {
	optional uint32 round_index = 1;    //回合数
	repeated BattleOneAttack attacks = 2;
	repeated NewBattleMember new_members = 3;//分身情况 在回合开始的时候判断
	optional uint32 wave_index = 4;
	repeated BattleAnger angers = 5; //攻击后怒气变化 这些全部放在攻击事件里面 全局的效果
}

message NewBattleMember {
	optional BattleMemberPos pos = 1;//召唤者
	repeated BattleMember new_members = 2;//召唤出来的成员
}

message BattleEffect //战斗中buff效果
{
	optional BattleMemberPos member = 1;    //buff 受益者
	optional BattleMemberPos attack_member = 2;
	optional uint32 buff_id = 3;    //buff 系统id
	optional uint32 type = 4;    //事件类型 1扣血 2 加血
	optional uint32 value = 5;    //加减的数值
	optional uint32 skill_id = 6;    //技能id
	optional uint32 pet_id = 7;    //神兽id
	optional bool is_live = 8;    //是否存活
	optional uint32 actual_value = 9;
	repeated BattleBuffEndOp end_op = 10;
}

message BattleOneAttack {
	optional BattleMemberPos attack_pos = 1;    //攻击方
	repeated uint32 unite_pos = 2;//配合方
	optional uint32 type = 3;    //攻击类型 1 技能攻击 2 反击(反击作为一个新的battleRoundUnit) 3天赋攻击(前端不做表现)
	optional uint32 skill_id = 4;   //技能id
	repeated BattleBuff del_buff_before = 5;    //最开始的时候删除的buff 为了模拟攻击者释放的buff效果 流水id 全局的效果
	repeated BattleBuff del_buff_middle = 6;    //首次攻击的时候删除的buff 为了模拟攻击者释放的buff效果 流水id 全局的效果
	repeated BattleBuffEffect buff_effects = 7; //攻击前 buff 效果   攻击者自己的效果
	repeated BattleEffect battle_effects = 8;  //全局的buff效果
	repeated BattleAttackInfo attack_infos = 9; //攻击事件列表
	repeated BattleBuff add_buffs = 10;  //攻击后增加的buff 需要指明buff 对象 增对这次攻击触发的 这些全部放在攻击事件里面 全局的效果
	repeated BattleBuff del_buff = 11;   //攻击后删除的buff 需要指明删除对象 这些全部放在攻击事件里面  全局的效果
	repeated BattleAnger angers = 12; //攻击后怒气变化 这些全部放在攻击事件里面 全局的效果
	optional bool is_live = 13;
	repeated Award awards = 14;  //攻击者死亡掉落
	optional uint32 talent_id = 15;    //攻击者触发的天赋id 为0 或者没有就不是的
	repeated BattleMember new_members = 16;//召唤出来的成员
	//添加宠物战斗
	optional uint32 attack_hero_info = 17;		//type(8):camp(8):id(16)

	repeated BattleAttackAddInfo attack_add_infos = 18; //攻击事件列表
	repeated BattleBuffUpdate buff_update = 19; //buff更新
//	repeated uint64 final_hp = 20; // 最终血量
}

message BattleAttackAddInfo {
	optional BattleMemberPos attack_member = 1;    //被攻击方
	optional BattleMemberPos defense_member = 2;    //被攻击方
	optional uint32 type = 3;  //事件类型 1扣血 2 加血
	optional uint32 value = 4; //加减的数值
	optional bool is_live = 5;  //是否存活
	optional uint32 show_type = 6;  //表现类型
	optional uint32 actual_value = 7;
}

message BattleMemberPos {
	optional uint32 order_pos = 1;  // order(16):pos(16)
	optional uint32 member_info = 2; // type(16):id(16)
}

//dot 类buff 效果
message BattleBuffEffect {
	optional uint32 id = 1;     //buff的流水id 如果为0 就是非buff 效果 直接飘字
	optional uint32 type = 2;  //事件类型 1扣血 2 加血 3 加怒气
	optional uint32 value = 3; //加减的数值
	optional uint32 actual_value = 4;
}

message BattleAttackInfo {
	optional BattleMemberPos defense_member = 1;    //被攻击方
	optional uint32 type = 2;  //事件类型 1扣血 2 加血
	optional uint32 value = 3; //加减的数值
	repeated BattleHurtInfo hurt_infos = 4; //攻击修正
	optional bool is_live = 5;  //是否存活
	repeated Award awards = 6;  //掉落
	optional uint32 actual_value = 7;
}

message BattleHurtInfo {
	optional uint32 id = 1; // 1 闪避 2 暴击 3 招架 4 无敌 5 反弹 6吸血
	optional uint32 value = 2;  //5 6 代表具体的数值
}

// 已存在buff信息更新
message BattleBuffUpdate {
	optional uint32 id = 1;
	optional uint32 round = 2;
}

message BattleBuffEndOp {
	optional BattleMemberPos member = 1;
	optional uint32 type = 2;
	optional uint32 value = 3;
	optional bool is_live = 4;
	optional uint32 actual_value = 5;
}

//战斗增加新的buff
message BattleBuff {
	optional uint32 new_id_and_remove_id = 1; //newid(16):moveid(16)
	optional BattleMemberPos member = 2;//buff 受益者
	optional uint32 buff_id = 3;//buff 系统id
	optional uint32 show_type = 4; // 展示时机
	optional BattleMemberPos add_member = 5;//buff 释放者
	optional uint32 skill_id = 6; // 释放技能
	optional uint32 round = 7; // 持续回合数
	optional uint32 pet_id = 8; // 神兽id
	repeated BattleBuffEndOp end_op = 9;
}

//技能怒气变化
message BattleAnger {
	optional BattleMemberPos member = 1;
	optional uint32 stype_and_show_type = 2;  //stype(16):showtype(16)
	optional uint32 buff_id = 3; //buff id
	optional uint32 type = 4;   //1扣 2 加
	optional uint32 value = 5;  //数值
}

//增加battlewave结构体
message BattleWave {
	repeated BattleMember members = 1;
	repeated BattleMember members_final = 2;  //队伍最终信息
	repeated BattleOneRound rounds = 3;
	repeated BattleBuff init_buff = 4; // 进场初始buff
    optional uint32 first_order = 5;      //谁先手 1 攻击方先手 2 防守方先手
	repeated BattlePet pets = 6; //战斗宠物
	repeated BattleStar stars = 7; //历代名将
	optional uint32 index = 8;
}

//对应BattleReport修改
message BattleReport {
	repeated BattleWave waves = 1;    //每波战斗信息
	optional uint32 pk_type = 2;      //战斗类型 1 pve 2 pvp
	optional bool is_win = 3;         //整场战斗的输赢
	repeated uint32 skill_ids = 4;    //战斗使用的技能，用于整场战斗加载
	optional string attack_name = 5;  //攻击方姓名
	optional uint32 attack_base_id = 6;  //攻击方主将id
	optional uint64 attack_power = 7;  //攻击方战斗力
	optional uint32 attack_hurt = 8;  //总伤害
	optional string defense_name = 9;  //防守方姓名
	optional uint32 defense_base_id = 10;  //防守方主将id
	optional uint64 defense_power = 11;  //防守方战斗力
	optional uint32 attack_officer_level = 12; // 攻击方官衔
	optional uint32 defense_officer_level = 13; // 受击方官衔
	optional uint32 max_round_num = 14; //最大回合数
	optional uint32 first_order = 15; //谁先手 1 攻击方先手 2 防守方先手
	repeated uint32 achievements = 16; //获得战斗的成就
	optional uint32 version = 17; //版本号
}


//获取战报
message C2S_GetNormalBattleReport {
	required uint64 report_id = 1;
}

message S2C_GetNormalBattleReport {
	required uint32 ret = 1;
	optional BattleReport report = 2;
	repeated BattleOneRound rounds = 3;
	optional bool is_begin =4;
	optional bool is_end = 5;
}

message User {
	required uint64 id = 1;
	required string name = 2;
	required uint32 level = 3;
	required uint32 exp = 4;
	optional uint32 create_time = 5; //创角时间
	required uint64 power = 6;
	required uint32 officer_level = 7;//官衔
	optional string server_name = 8;//服务器名称
	optional uint32 change_name_count = 9;//改名次数
	optional float recharge_total = 10;//总充值
	optional uint32 guide_id = 11;//新手引导
	optional uint32 today_init_level = 12;//今日初始等级
	optional uint32 server_open_time = 13;//开服时间
	optional uint32 avatar_base_id = 14;//avatar配置id
	optional uint64 avatar_id = 15;//avatar唯一id
	optional uint64 on_team_pet_id = 16;//上阵神兽id
	optional uint32 order_state = 17;//公测预约
	optional uint32 camp = 18; //阵营
	optional uint32 recharge_fake_total = 19; //假充值
	optional float recharge_today = 20;//今日总充值
	optional uint32 vip_qq = 21;//vip专属客服功能
	optional uint32 grave_left_sec = 22; 		//先秦皇陵剩余时间
	optional uint32 grave_begin_time = 23; 		//先秦皇陵开始时间
	optional bool is_admit = 24; 		//是否认证
	optional uint32 grave_assist_sec = 25; 		//先秦皇陵协助剩余时间
	optional uint32 grave_assist_begin_time = 26; 		//先秦皇陵协助开始时间
	optional bool is_white_list = 27; //是否是白名单
	optional uint32 head_frame_id = 28;// 头像框ID
	optional bool is_regression = 29; //玩家是否可以参与老玩家回归活动
	optional string real_server_name = 30;//服务器名称
	optional uint32 store_comment_flag = 31; // 是否弹出了商店评论
}

message Stage {
	required uint32 id = 1; //关卡id
	required uint32 star = 2; //星数
	required uint32 execute_count = 3; //今日已经挑战次数
	required bool is_finished = 4; //是否完成 如果完成 开启下一个关卡和章节
	optional uint32 reset_count = 5; //今日已经重置次数
	optional bool receive_box = 6;//是否领取了宝箱
}

message Chapter {
	required uint32 id = 1; //章节Id
	required uint32 total_star = 2; //章节总星数
	required uint32 breward = 3; //3个箱子奖励领取情况
	required uint32 sreward = 4;
	required uint32 greward = 5;
	required uint32 preward = 6;
	repeated Stage stages = 7; //关卡列表
	optional bool has_entered = 8; //是否进入过
}

message Explore {
	optional uint32 id = 1; // id
	optional uint32 map_id = 2; // id
	optional uint32 foot_index = 3; //进度
	optional uint32 pass_count = 4; //通关次数
	repeated uint32 events = 5; // 事件
	repeated Award awards = 6;  // 奖励
	repeated uint32 roll_nums = 7; // 色子数
}

message ExploreEvent {
	optional uint32 event_id = 1; // 章节id
	optional uint32 event_type = 2; // 事件类型
	optional uint32 event_time = 3; // 事件类型
	optional uint64 value1      = 4; // 参数1
	optional uint64 value2      = 5; // 参数2
	optional uint64 value3      = 6; // 参数3
	optional uint64 value4      = 7; // 参数4
	optional uint64 value5      = 8; // 参数5
	optional uint64 value6      = 9; // 参数6
	optional uint64 value7      = 10; // 参数7
	optional uint64 value8      = 11; // 参数8
}

message DailyBoss {
	optional uint32 chapter_id = 1;
	optional uint32 boss_id = 2;
}

message FirstKillReport {
    required uint32 id = 1; //关卡id
    required uint64 uid = 2;//uid
    required string name = 3;//玩家姓名
    required uint64 power = 4;//玩家战力
    required uint32 timestamp = 5;
    optional uint32 hero_id = 6;//武将id
    required uint64 report_id = 7;//战报
    repeated SimpleFormation formations = 8;
    optional uint32 rank_lv = 9;//武将突破等级
}

message SimpleFormation {
	required uint32 pos = 1;//位置
	required uint32 hero_id = 2;//武将id
	required uint32 level = 3;//武将等级
	optional uint32 rank_lv = 4;//武将突破等级
}

message SimpleFirstKill {
    required uint32 id = 1; //关卡id
	optional uint64 user_id = 2; // 玩家id
    required string name = 3;//玩家姓名
}

//获取首杀战报
message C2S_GetFirstKillReport {
    required uint32 stage_id = 1;
}

message S2C_GetFirstKillReport {
    required uint32 ret = 1;
    required uint32 stage_id = 2;
    optional FirstKillReport report = 3;
}

message S2C_NewFirstKill {
    required uint32 stage_id = 1;
	optional uint64 user_id = 2;
    required string first_kill_name = 3;
}

message S2C_GetFirstKill {
    repeated SimpleFirstKill first_kill = 1;
}

//物品
message Item {
	required uint32 id = 1;
	required uint32 num = 2;
}

//锦囊
message Silkbag {
	required uint64 id = 1;
	required uint32 base_id = 2;
}

//object
message Object {
	required uint32 type = 1;
	required uint32 id = 2;
	required uint32 num = 3;
}


//宝石
message Gemstone {
	required uint32 id = 1;
	required uint32 num = 2;
}

message Jade {
	optional uint64 id = 1;
	optional uint32 sys_id = 2;
	optional uint64 equipment_id = 3;
}

//装卸玉石
message C2S_JadeEquip {
	required uint64 id = 1; //宝石id 如卸载宝石传0
	required uint64 equipment_id = 2; //装备id
	required uint32 pos = 3; //槽位 从0开始
}

message S2C_JadeEquip {
	required uint32 ret = 1;
	optional uint64 id = 2;
	optional uint64 equipment_id = 3;
	optional uint32 pos = 4;
}

//玉石出售
message C2S_JadeSell {
	repeated uint64 id = 1;
}

message S2C_JadeSell {
	required uint32 ret = 1;
	repeated Award materials = 2;
}

//货币
message Currency {
	optional uint32 id = 1;
	optional uint64 num = 2;
}


//可恢复项
message RecoverItem {
	optional uint32 recover_id = 1;
	optional uint32 recover_num = 2;
	optional uint32 refresh_time = 3;
}

message C2S_ChangeName {
	optional string name = 1;
}

message S2C_ChangeName {
	optional uint32 ret = 1;
}


//心跳 10s
message C2S_KeepAlive {
}

message S2C_KeepAlive {
}

//登陆
message C2S_Login {
	required string token = 1;
	required uint64 sid = 2;
	required string channel_id = 3;
	required string device_id = 4;
	optional uint32 version = 5;
	optional string language = 6;
}

message S2C_Login {
	required uint32 ret = 1;
	optional uint64 uid = 2;
	optional uint32 sid = 3; //gateway client id
	optional string platform_uid = 4;
	optional uint32 version = 5;
	optional uint32 server_version = 6;
	optional uint32 server_status = 7;
	optional string language = 8;
}

//激活
message C2S_ActivateAccount {
	required string code = 1; //!激活码
}

message S2C_ActivateAccount {
	required uint32 ret = 1;
	optional string account = 2;
	optional string code = 3;
	optional uint32 sid = 4;
}
//创建角色
message C2S_Create {
	required string name = 1;
	required uint32 type = 2;
}

message S2C_Create {
	required uint32 ret = 1;
	optional uint64 uid = 2;
	optional uint32 sid = 3;
}


//聊天

message ChatMsg {
	optional uint64 id = 1;
	optional uint64 sender_id = 2;
	optional string sender_name = 3;
	optional uint32 sender_base_id = 4;
	optional uint32 sender_avatar_base_id = 5;
	optional uint32 sender_office_level = 6;
	optional uint32 send_time = 7;
	optional string content = 8;
	optional uint64 recive_id = 9;
	optional string recive_name = 10;
	optional uint32 recive_base_id = 11;
	optional uint32 recive_avatar_base_id = 12;
	optional uint32 recive_office_level = 13;
	optional uint32 status = 14;
	optional uint32 msg_type = 15;
	optional uint32 sender_title = 16;
	optional uint32 sender_head_frame_id = 17;// 头像框ID
	optional uint32 recive_head_frame_id = 18;// 头像框ID
}

message C2S_ChatRequest{
	required uint32 channel = 1; //频道 1-世界 2-私聊 3-军团
	optional uint32 msg_type = 2; //1:文本信息 2:语音信息
	required string content = 3; //内容
	optional uint64 reciver_id = 4; //接收者(私聊用)
	repeated KvPair parameter = 5;
}

message S2C_ChatRequest{
	required uint32 ret = 1;
	optional uint32 channel = 2;
}

message S2C_Chat {
	optional uint32 channel = 1; //频道
	optional string sender = 2; //发送者昵称
	optional uint64 sender_id = 3; //发送者id
	optional uint32 base_id = 4; //主角base_id
	optional uint32 avatar_base_id = 5; //主角base_id
	optional uint32 office_level = 6; //头衔
	optional string content = 7;//聊天内容
	optional string control = 8;
	optional uint64 msg_id = 9; //只有私聊有id
	optional uint32 msg_type = 10;
	optional uint32 sender_title = 11;
	repeated KvPair parameter = 12;
	optional uint32 title = 13;
	optional uint32 sender_head_frame_id = 14;// 头像框ID
}

message C2S_ChatGetMsg {
	optional uint64 user_id = 1;
}

message S2C_ChatGetMsg {
	optional uint32 ret = 1;
	optional uint64 user_id = 2;
	repeated ChatMsg msgs = 3;
}

message C2S_ChatGetSimpleMsg {
}

message S2C_ChatGetSimpleMsg {
	optional uint32 ret = 1;
	repeated ChatMsg msgs = 2;
}

message C2S_ChatMsgStatusUpdate {
	repeated uint64 msg_ids = 1;
}

message S2C_ChatMsgStatusUpdate {
	optional uint32 ret = 1;
	repeated uint64 msg_ids = 2;
}

message C2S_ChatMsgDelete {
	repeated uint64 delete_user_id = 1;
}

message S2C_ChatMsgDelete {
	optional uint32 ret = 1;
	repeated uint64 delete_user_id = 2;
}

message S2C_RollNotice {
	optional string msg = 1;
	optional uint32 notice_type = 2;
	optional uint32 notice_id = 3;
	repeated uint32 location = 4;
    optional uint64 send_id = 5;
}

message S2C_ActivityNotice {
	optional uint32 activity_type = 1; // 活动类型（1:世界BOSS）
}

//获取秘钥
message C2S_GetEncodeKey {
}

message S2C_GetEncodeKey {
    required int32 encode_key = 1;
}

message C2S_Offline {
}

message C2S_GetServerTime {
}

message S2C_GetServerTime {
	required uint32 time = 1;
	required uint32 zone = 2;
}
//刷新玩家信息
message C2S_Flush {
	optional bool user = 1;
	optional bool hero = 2;
	optional bool vip = 3;
	optional bool chapter = 4;
	optional bool item = 5;
	optional bool fragment = 6;
	optional bool mail = 7;
	optional bool formation = 8;
    optional bool first_kill = 9; // 关卡首杀简报
	optional bool recruit = 10; // 招募
	optional bool equipment = 11; // 装备
	optional bool destiny = 12; // 缘分
	optional bool currency =13; //货币
	optional bool recover =14; //可恢复类
	optional bool battle_resource =15; //上阵物品
	optional bool daily_dungeon = 16; //日常副本信息
	optional bool res_photo =17; //图鉴
	optional bool tower =18; //爬塔过关斩将
	optional bool recharge =19; //充值信息
	optional bool vipReward =20; //vip礼包领取记录
	optional bool treasure =21; //宝物
	optional bool daily_task = 22; //日常任务信息
	optional bool rebel_army = 23; //围剿叛军
	optional bool explore = 24; //游历系统
	optional bool achievem = 25; //成就
	optional bool sevenDaysData = 26; //七日活动
	optional bool custom_activity = 27; //配置活动
	optional bool user_guild = 28; //个人公会信息
	optional bool chat_msg = 29; //私聊消息记录
	optional bool arena_rank = 30; //竞技场最大排行信息
	optional bool territory = 31; //领地信息
	optional bool shop = 32; //商店信息
	optional bool questionnaire = 33; //调查问卷
	optional bool black_list = 34; //黑名单
	optional bool instrument = 35; //神兵
	optional bool world_boss = 36; //世界boss
	optional bool gemstone = 37; // 宝石
	optional bool avatar = 38; //变身卡
	optional bool auction = 39; //拍卖
	optional bool red_bag = 40; //红包列表
	optional bool friend = 41; //好友
	optional bool carnival = 42; //狂欢节活动
	optional bool pet = 43; //神兽
	optional bool pet_formation = 44; //神兽护卫队
	optional bool guild_base = 45; //公会信息
	optional bool shop_crystal = 46; //水晶商店信息
	optional bool avatar_photo = 47; //激活的变身卡图鉴
	optional bool resource_back_data = 48; //资源找回数据
	optional bool guild_answer = 49; //军团答题
	optional bool op_count = 50; //操作计数
	optional bool silkbag = 51; //操作计数
	optional bool country_boss = 52; //三国战纪
	optional bool play_horse = 53; // 跑马信息
	optional bool war_horse = 54; // 战马信息
	optional bool horse_ride = 55; // 骑马信息
	optional bool stars = 56; //历代名将
	optional bool star_formation = 57; //上阵名将
	optional bool star_weapon = 58; //历代名将武器
	optional bool title = 59; //称号
	optional bool war_horse_equip = 60; //战马装备
	optional bool jade = 61; // 宝石
	optional bool head_frame = 62;// 头像框
	optional bool gacha = 63; //金将招募
	optional bool daily_gift = 64; // 每日奖励
	optional bool late_regist_task = 65; // 后注册玩家任务
}

message S2C_Flush {
	required uint32 ret = 1;
	optional uint32 today_online_time = 2;
}

message C2S_GetActVipGift {
	required uint32 act_id = 1;
}

message S2C_GetActVipGift {
	required uint32 ret = 1;
	repeated VipGeneralGoods goods = 2;
	optional uint32 act_id = 3;
}

//通用的vip推送礼包结构
message VipGeneralGoods {
	optional uint32 product_id = 1; //商品id关联支付
	repeated Award awards = 2; //实际商品
	optional uint32 purchased_times = 3; //已购买次数
}

//购买vip推送礼包
message S2C_BuyVipGift {
	required uint32 ret = 1;
	optional VipGeneralGoods  good = 2;
}

message C2S_GetFightInfo {

}

message S2C_GetFightInfo{
	optional uint32 season_start = 1; //当前赛季开始时间
	optional uint32 season_end = 2; //赛季结束时间
}

message S2C_GetHero {
	repeated Hero heros = 1;
}

message S2C_GetTitle {
	repeated Title titles = 1;
}


message S2C_GetStars {
	repeated Star stars = 1;
}

message S2C_GetPet {
	repeated Pet pets = 1;
}

message S2C_RedPointNotify {
    required uint32 mask = 1;
	repeated uint32 count = 2;
	//0  围剿叛军
	//1  竞技场防守战报
	//2  竞技场巅峰对决
	//3  神将商店
	//4  领地系统自己的信息
	//5  领地系统朋友的求助信息
	//6  军团审批申请
	//7  军团援助有可领取的碎片
	//8  军团援助 自己能否援助
	//9  好友申请列表
	//10 领取好友体力
	//11 军团红包
	//12 军团捐献
	//13 军团任务
	//14 //军团援助 自己能否援助别人
	//15 //军团副本
	//16 //仇人战报
	//17 //矿战战报
	//18 //矿战被人干死
	//19 //军团战红点
	//20 王者之战每日奖励
	//21 先秦皇陵战报
	//22 头像框
	//23 个人竞技
}

message S2C_ServerRecordNotify {
	repeated IntMap records = 1;
}

message S2C_FightHero {
	repeated uint64 hero_ids = 1;
}

// 阵容列表
message S2C_GetFormation {
    repeated uint64 hero_ids = 1; //阵容
    repeated uint32 embattle = 2; //布阵
	repeated uint64 second_hero_ids = 3; //援军
	repeated uint64 stars = 4; //历代名将
}

message S2C_GetDestiny {
	repeated uint32 hero_base_id = 1; //所有武将id
	repeated uint32 destiny_id = 2; //已激活的缘分
}

//玩家基础信息
message S2C_GetUser {
	required User user = 1;
}

message C2S_GetVip{
}

message S2C_GetVip {
	required uint32 ret = 1;
	required Vip vip = 2;
}

message C2S_GetExplore {

}

message S2C_GetExplore {
	required uint32 ret = 1;
	repeated Explore explores = 2; //游历关卡
	repeated ExploreEvent event_to_do = 3;  // 待完成事件
	optional bool is_begin = 4;
	optional bool is_end = 5;
}

message C2S_EnterExplore {
	optional uint32 id = 1; // 关卡id
}

message S2C_EnterExplore {
	required uint32 ret = 1;
	optional Explore explore = 2; //游历关卡
}

message C2S_RollExplore {
	optional uint32 id = 1; // 关卡id
}

message S2C_RollExplore {
	required uint32 ret = 1;
	optional uint32 num = 2;
	optional Explore explore = 3; //游历关卡
	optional ExploreEvent event = 4; //触发的事件
	repeated Award base_award = 5; //基本银币和经验
	repeated Award box_award = 6; //宝箱奖励
	optional uint32 crit = 7; // 暴击倍数
}

message C2S_ExploreGetReward {
	optional uint32 id = 1; // 关卡id
}

message S2C_ExploreGetReward {
	required uint32 ret = 1;
	optional Explore explore = 3; //游历关卡
}


// 完成事件
message C2S_ExploreDoEvent {
	optional uint32 id = 1; // 事件id
	optional uint32 value1 = 2; //参数
}

message S2C_ExploreDoEvent {
	required uint32 ret = 1;
	optional uint32 id = 2; // 事件id
	repeated Award awards = 3; //获得的奖励
	optional BattleReport battle_report = 4; //战报
	optional uint64 value1 = 5;
	optional uint64 value2 = 6;
	optional uint64 value3 = 7;
	optional uint64 value4 = 8;
	optional uint64 value5 = 9;
	optional uint64 value6 = 10;
	optional uint64 value7 = 11;
	optional uint64 value8 = 12;
}



message C2S_GetChapterList {

}

message S2C_GetChapterList {
	required uint32 ret = 1;
	optional uint32 total_star = 2; //主线总星数
	optional uint32 total_e_star = 3; //精英主线总星数
	repeated Chapter chapters = 4; //主线副本
	repeated Chapter e_chapters = 5; //精英副本
	repeated Chapter hero_chapters = 6; //名将副本
	repeated uint32 hero_chapter_ids = 7; //名将副本挑战记录
	repeated uint32 chapter_box_ids = 8; //章节宝箱记录
	optional uint32 hero_chapter_challenge_count = 9; //名将副本挑战次数
	repeated SimpleFirstKill first_kill = 10; // 首杀信息
	optional bool is_begin = 11;
	optional bool is_end = 12;
}

message C2S_ExecuteStage {
	required uint32 stage_id = 1; //关卡id
}

message S2C_ExecuteStage {
	required uint32 ret = 1; //
	required uint32 stage_id = 2; //关卡id
	optional uint32 type = 3; //关卡类型 如果是宝箱类型 直接显示奖励 如果是战斗类型 判断next_wave_id 在做显示
	optional Stage stage = 4; //刷新当前关卡信息
	optional uint32 stage_money = 5; //获得的金钱
	optional uint32 stage_exp = 6; //获得的经验
	optional uint32 stage_star = 7; //星数
	optional uint64 battle_report = 8; //战报
	repeated Award awards = 9; //奖励
	repeated Award first_awards = 10; //首通奖励
	repeated Award chapter_awards = 11; //通关奖励
	repeated AddAward add_awards = 12;//额外奖励
	optional uint32 rebel_army_id = 13; //触发的叛军id
	optional uint32 rebel_army_level = 14; //触发的叛军level
	optional bool is_win = 15; //触发的叛军level
}

message C2S_ChallengeHeroChapter {
	optional uint32 stage_id = 1; // 关卡id
}

message S2C_ChallengeHeroChapter {
	optional uint32 ret = 1;
	optional uint32 stage_id = 2;
	optional bool win = 3;
	optional uint64 battle_report = 4; //战报
	repeated Award awards = 5; //奖励
}

//扫荡
message C2S_FastExecuteStage {
	optional uint32 stage_id = 1; //关卡id
	optional uint32 count = 2; //扫荡次数
}

// 扫荡每次结果
message FastExecuteStageReward {
	repeated Award awards = 1;
	optional uint32 stage_money = 2;
	optional uint32 stage_exp = 3;
	optional uint32 stage_star = 4;
	repeated AddAward add_awards = 5;//额外奖励
	optional uint32 rebel_army_id = 6; //触发的叛军id
	optional uint32 rebel_army_level = 7; //触发的叛军level
}

message S2C_FastExecuteStage {
	required uint32 ret = 1;
	required uint32 stage_id = 2;
	optional Stage stage = 3;
	repeated FastExecuteStageReward rewards = 4;
}

//首次进入新章节
message C2S_FirstEnterChapter {
	required uint32 ch_id = 1; //章节id
}

message S2C_FirstEnterChapter {
	required uint32 ret = 1;
	required uint32 ch_id = 2; //章节id
	repeated SimpleFirstKill first_kill = 3;
}

//领取关卡宝箱
message C2S_FinishChapterBoxRwd {
	required uint32 ch_id = 1; //章节id
	required uint32 box_type = 2; //1铜箱子 2银箱子 3金箱子 4通关宝箱
}

//领取关卡宝箱
message C2S_ReceiveStageBox {
	required uint32 stage_id = 1; //关卡id
}

message S2C_ReceiveStageBox {
	required uint32 ret = 1;
	required uint32 stage_id = 2; //章节id
}

// 领取所有宝箱
message C2S_GetAllAwardBox {
	required uint32 chapter_id = 1; //章节id
}

message S2C_GetAllAwardBox {
	required uint32 ret = 1;
	required uint32 chapter_id = 2; //章节id
	repeated uint32 box_type = 3; //星数宝箱类型
	repeated uint32 stage_ids = 4; //关卡id
	repeated Award awards = 5; //奖励
}

message S2C_FinishChapterBoxRwd {
	required uint32 ret = 1;
	required uint32 ch_id = 2; //章节id
	required uint32 box_type = 3; //1铜箱子 2银箱子 3金箱子
	repeated Award awards = 4; //奖励
}

//重置副本
message C2S_ResetStage {
	required uint32 stage_id = 1; //关卡id
}

message S2C_ResetStage {
	required uint32 ret = 1;
	required uint32 stage_id = 2;
	optional Stage stage = 3; //这个副本
	optional uint32 next_reset_cost = 4; //下次重置消耗元宝
}

message C2S_EnterDailyDungeonData {

}

message DailyDungeon {
	required uint32 type = 1;
	required uint32 remain_count = 2;          //剩余挑战次数
	optional uint32 last_battle_time = 3;      //上次战斗时间（用于计算CD时间）
	optional uint32 first_enter_max_id = 4; //最高关卡ID（第一次进入）
	optional uint32 max_id = 5;             //最高通关关卡ID
}

message S2C_EnterDailyDungeonData {
	required uint32 ret = 1;
	repeated DailyDungeon dds = 2;
}

message C2S_FirstEnterDailyDungeon {
	required uint32 id = 1;
}

message S2C_FirstEnterDailyDungeon {
	required uint32 ret = 1;
	required uint32 id = 2;
}

message C2S_ExecuteDailyDungeon {
	required uint32 id = 1;    //副本关卡ID
	optional uint32 op_type = 2; //1:挑战 2:扫荡
}

message S2C_ExecuteDailyDungeon {
	required uint32 ret = 1;
	required uint32 id = 2;
	optional uint32 op_type = 3;                //是否通关
	optional bool is_pass = 4;                //是否通关
	optional BattleReport battle_report = 5;  //战报
	repeated Award awards = 6;                //奖励
	optional uint32 remain_count = 7;         //剩余挑战次数
}

message IntMap {
	required uint32 Key = 1;//map id
	required uint32 Value = 2;//map value
}

message Int64Map {
	required uint32 Key = 1;//map id
	required uint64 Value = 2;//map value
}

message IntIntMap {
	required uint32 Key = 1;//map id
	repeated IntMap Values = 2;//map map
}

message MapSlice {
	required uint32 id = 1;//map id
	repeated uint32 ids = 2;//slice ids
}
message MapInt64Slice {
	required uint32 id = 1;//map id
	repeated uint64 ids = 2;//slice ids
}
message Int64MapInt64Slice {
	required uint64 id = 1;//map id
	repeated uint64 ids = 2;//slice ids
}


message Vip {
	required uint32 level = 1;  //vip 等级
	required uint32 exp = 2;    //总经验
}

//武将
message Hero {
	optional uint64 id = 1; //唯一ID
	optional uint32 base_id = 2; //静态表ID
	optional uint32 level = 3; //等级
	optional uint32 exp = 4; //经验
	optional uint32 history_gold = 5; //历史消耗银两
	optional uint32 quality = 6;//品质
	optional uint32 rank_lv = 7; //突破等级
	repeated uint32 association = 8; //羁绊
	optional uint32 awaken_level = 9; // 觉醒等级
	repeated uint32 awaken_slots = 10; // 觉醒材料
	optional uint32 limit_level = 11; //界限等级
	repeated IntMap limit_res = 12;  //界限资源
	repeated IntMap gold_res = 13;  //金将资源
}

message Title {
    optional uint32 id = 1;
    optional bool equip = 2;
    optional uint32 expire_time = 3;
    optional bool on = 4;
    optional bool fresh = 5;
}

message OpTitle {
    repeated Title insert = 1;
    repeated Title update = 2;
    repeated uint32 delete = 3;
}

message Pet {
	optional uint64 id 		= 1; //唯一ID
	optional uint32 base_id = 2; //静态表ID
	optional uint32 level 	= 3; //等级
	optional uint32 exp 	= 4; //经验
	optional uint32 star 	= 5; //星级
	repeated uint32 materials = 6;//橙升红材料
	repeated Award recycle_materials = 7; //橙升红回收材料

}
message HeadFrame{
	optional uint32 id = 1;
	optional uint32 expire_time = 2;
}

message OpHero {
	repeated Hero insert = 1;
	repeated Hero update = 2;
	repeated uint64 delete = 3;
}



message OpVip {
	required Vip update = 1;
}

message OpItem {
	repeated Item insert = 1;
	repeated Item update = 2;
	repeated uint32 delete = 3;
}

message OpSilkbag {
	repeated Silkbag insert = 1;
	repeated Silkbag update = 2;
	repeated uint64 delete = 3;
}


message OpCurrency {
	repeated Currency update = 1;
}

message OpRecover {
	repeated RecoverItem update = 1;
}


message OpFragment {
	repeated Fragment insert = 1;
	repeated Fragment update = 2;
	repeated uint32 delete = 3;
}

message OpGemstone {
	repeated Gemstone insert = 1;
	repeated Gemstone update = 2;
	repeated uint32 delete = 3;
}

message OpJade {
	repeated Jade insert = 1;
	repeated Jade update = 2;
	repeated uint64 delete = 3;
}

message OpEquipment {
	repeated Equipment insert = 1;
	repeated Equipment update = 2;
	repeated uint64 delete = 3;
}

message OpTreasure {
	repeated Treasure insert = 1;
	repeated Treasure update = 2;
	repeated uint64 delete = 3;
}
message OpInstrument {
	repeated Instrument insert = 1;
	repeated Instrument update = 2;
	repeated uint64 delete = 3;
}

message OpAvatar {
	repeated Avatar insert = 1;
	repeated Avatar update = 2;
	repeated uint64 delete = 3;
}

message OpPet {
	repeated Pet insert = 1;
	repeated Pet update = 2;
	repeated uint64 delete = 3;
}

message OpWarHorse {
	repeated WarHorseData insert = 1;
	repeated WarHorseData update = 2;
	repeated uint64 delete = 3;
}

message OpWarHorseEquip {
	repeated WarHorseEquipData insert = 1;
	repeated WarHorseEquipData update = 2;
	repeated uint64 delete = 3;
}
message OpHeadFrame{
	repeated HeadFrame insert = 1;
	repeated HeadFrame update = 2;
	repeated uint32 delete = 3;
	optional HeadFrame cur_head_frame = 4;
}
message S2C_OpObject {
	required uint64 user_id = 1;
	optional OpHero hero = 2;
	optional OpVip vip = 3;//获得的vip经验
	optional OpItem item = 4;
	optional OpFragment fragment = 5;
	optional OpEquipment equipment = 6;
	optional OpCurrency currency = 7;
	optional OpRecover recover = 8;
	optional OpTreasure treasure = 9;
	optional OpInstrument instrument = 10;
	optional OpGemstone gemstone = 11;
	optional OpAvatar avatar = 12;
	optional OpPet pet = 13;
	optional OpSilkbag silkbag = 14;
	optional OpWarHorse warHorse = 15;
	optional OpStar star = 16;
	optional OpStarWeapon star_weapon = 17;
	optional OpTitle title = 18;
	optional OpWarHorseEquip war_horse_equip = 19;
	optional OpJade jade = 20;
	optional OpHeadFrame head_frame= 21;
}

message UserLevelRankInfo {
	required uint64 user_id = 1;
	optional string name = 2;	//名字
	optional uint32 level = 3;
	optional uint32 base_id = 4;
	optional uint32 avatar_base_id = 5;
	optional uint32 office_level = 6;
	optional uint32 rank = 7;	//排名
	optional string guild = 8;	//工会
	optional uint32 title = 9;	//称号
	optional uint32 head_frame_id = 10;// 头像框ID
}

message C2S_GetUserLevelRank {
}

message S2C_GetUserLevelRank {
	required uint32 ret = 1;
	repeated UserLevelRankInfo rank_list = 2;
	optional uint32 user_level = 3;
	optional uint32 user_rank = 4;
}

message C2S_GetGuildRank {

}

message GuildRankInfo {
	required uint64 guild_id = 1;
	optional string name = 2;	//名字
	optional string leader_name = 3;	//名字
	optional uint32 leader_office_level = 4;
	optional uint32 level = 5;
	optional uint32 base_id = 6;
	optional uint32 avatar_base_id = 7;
	optional uint32 member_count = 8;
	optional uint32 rank = 9;
	optional uint32 title = 10;
}

message S2C_GetGuildRank {
	required uint32 ret = 1;
	repeated GuildRankInfo rank_list = 2;
	optional uint32 self_rank = 3;
	optional uint32 guild_level = 4;
}


message UserPowerRankInfo {
	required uint64 user_id = 1;
	optional string name = 2;	//名字
	optional uint64 power = 3;	//战力
	optional uint32 base_id = 4;
	optional uint32 avatar_base_id = 5;
	optional uint32 office_level = 6;
	optional uint32 rank = 7;	//排名
	optional string guild = 8;	//工会
	optional uint32 title = 9;	//称号
	optional uint32 head_frame_id = 10;// 头像框ID
}

message C2S_GetUserPowerRank {
}

message S2C_GetUserPowerRank {
	required uint32 ret = 1;
	repeated UserPowerRankInfo rank_list = 2;
	optional uint64 user_power = 3;
	optional uint32 user_rank = 4;
}

message UserPhotoRankInfo {
	required uint64 user_id = 1;
	optional string name = 2;	//名字
	optional uint32 photo_count = 3;	//激活名将册个数
	optional uint32 base_id = 4;
	optional uint32 avatar_base_id = 5;
	optional uint32 office_level = 6;
	optional uint32 rank = 7;	//排名
	optional string guild = 8;	//工会
	optional uint32 title = 9;	//称号
	optional uint32 head_frame_id = 10;// 头像框ID
}

message C2S_GetUserActivePhotoRank{
}

message S2C_GetUserActivePhotoRank{
	required uint32 ret = 1;
	repeated UserPhotoRankInfo rank_list = 2;
	optional uint32 user_photocount = 3;
	optional uint32 user_rank = 4;
}

message S2C_GetItem {
	repeated Item items = 1;
}

message S2C_GetStarWeapon {
	repeated StarWeapon star_weapons = 1;
}

message S2C_GetSilkbag {
	repeated Silkbag silkbags = 1;
}


message S2C_GetGemstone {
	repeated Gemstone gemstones = 1;
}

message S2C_GetJade {
	repeated Jade jades = 1;
}

//货币
message S2C_GetCurrency {
	repeated Currency currencys = 1;
}

//可恢复类
message S2C_GetRecover {
	repeated RecoverItem recovers = 1;
}


message C2S_ExecCommand {
	optional uint32 id = 1;
}

message S2C_ExecCommand {
	optional uint32 id = 1;
}



//物品使用
message C2S_UseItem {
	required uint32 id = 1;//道具ID
	optional uint32 amount = 2; //数量
	optional uint64 target = 3; //对目标使用道具(武将,装备)
	optional uint32 box_id = 4; //N选1 BOX表的唯一ID
	optional uint32 idx = 5; //N选1 索引项(1~4)
}

message S2C_UseItem {
	required uint32 ret = 1;
	repeated Award awards = 2; //返回獎勵格式
	optional uint32 amount = 3; //实际使用个数
	optional uint64 target = 4; //使用目标
	optional uint32 id = 5; //道具ID
}


message Mail {
	required uint64 id = 1;//邮件全局id
	required uint64 sender_id = 2;//发送方
	required uint32 mid = 3;//邮件模板id
	required uint32 time = 4;//邮件时间戳
	repeated KvPair mail_contents = 5;//邮件内容
	repeated KvPair mail_title = 6;//邮件标题
	repeated KvPair mail_name = 7;//邮件发送者
	repeated Award awards = 8;//邮件奖励
	optional bool is_deal = 9;//是否处理
}


message SimpleMail {
	required uint64 id = 1;//邮件全局id
	required uint32 mid = 2;//邮件模板id
	optional bool is_deal = 3;//是否处理
}

message KvPair {
	required string key = 1;//key
	required string value = 2;//value
}


//获取邮件详细信息
message C2S_GetMail {
	repeated uint64 ids = 1;//邮件的自增id
}

message S2C_GetMail {
	required uint32 ret = 1;
	repeated Mail mails = 2;
}

//给玩家发送邮件
message C2S_Mail {
	required uint64 uid = 1;//收件方的uid(0为发给本军团)
	required string content = 2;//邮件内容
	optional string title = 3;//邮件标题

}

message S2C_Mail{
	required uint32 ret = 1;//返回结果
}

//推送给前端简单邮件列表
message S2C_SendSimpleMail {
	repeated SimpleMail mails = 1;
	optional uint64 last_mail_id = 2;//上次看到的邮件id
}
//玩家获得新邮件后端推送过来
message S2C_AddSimpleMail {
	repeated SimpleMail mails = 1;
}

//领取领奖邮件 或者查看普通邮件
message C2S_ProcessMail {
	required uint64 id = 1;//邮件全局id
}

message S2C_ProcessMail {
	required uint32 ret = 1;
	required uint64 id = 2;//邮件全局id
	optional bool del = 3;//是否删除掉
}

//一键领取
message C2S_ProcessAllMail {
	repeated uint64 ids = 1;//一键领取的所有邮件的ID

}

message S2C_ProcessAllMail {
	required uint32 ret = 1;
	repeated uint64 ids = 2; //返回信息
}


//删除邮件
message C2S_DelMail {
	required uint64 id = 1;//
}

message S2C_DelMail {
	required uint32 ret = 1;
	required uint64 id = 2;
}


//批量删除邮件
message C2S_DelAllMail {
	repeated uint64 ids = 1;//批量删除邮件D
}

message S2C_DelAllMail {
	required uint32 ret = 1;
	repeated uint64 ids = 2; //返回信息
}



//碎片
message Fragment {
	required uint32 id = 1;
	required uint32 num = 2;
}

message S2C_GetFragment {
	repeated Fragment fragments = 1;
}

//碎片合成
message C2S_SyntheticFragments {
	required uint32 id = 1;
	required uint32 num = 2;
}

message S2C_SyntheticFragments {
	required uint32 ret = 1;
	required uint32 id = 2;
	required uint32 num = 3;
}

message C2S_SellFragments {
	repeated Fragment fragments = 1;
}

message S2C_SellFragments {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

message C2S_GetTotalOnlineTime {
}

message S2C_GetTotalOnlineTime {
        optional uint32 ret = 1;
        optional uint64 total_online_time = 2;
}


// 布阵
message C2S_ChangeEmbattle {
	repeated uint32 positions = 1;
}

message S2C_ChangeEmbattle {
	optional uint32 ret = 1;
}

message C2S_ChangeHeroFormation {
	optional uint32 pos = 1; // 上阵位置
	optional uint64 hero_id = 2; // 上阵武将id
}

message S2C_ChangeHeroFormation {
	optional uint32 ret = 1; // 返回错误码
	optional uint32 pos = 2; // 上阵位置
	optional uint64 hero_id = 3; // 上阵武将id
	optional uint64 old_hero_id = 4; // 下阵武将id
}

message C2S_ChangeHeroSecondFormation {
	optional uint32 pos = 1; // 上阵位置
	optional uint64 hero_id = 2; // 上阵武将id
}

message S2C_ChangeHeroSecondFormation {
	optional uint32 ret = 1; // 返回错误码
	optional uint32 pos = 2; // 上阵位置
	optional uint64 hero_id = 3; // 上阵武将id
	optional uint64 old_hero_id = 4; // 下阵武将id
}
message C2S_RecruitInfo {
}
//招募
message S2C_RecruitInfo {
	required uint32 ret = 1;
	optional uint32 normal_cnt = 2;// 普通招募次数
	optional uint32 normal_free_time = 3;// 普通免费时间 当前免费抽奖的时间戳
	optional uint32 gold_cnt = 4;// 元宝招募次数
	optional uint32 recruit_point = 5;// 招募积分
	optional uint32 recruit_point_get = 6;// 招募积分领取 二进制
	optional uint32 gold_baodi_cnt = 7;// 元宝招募保底次数
	optional uint32 daily_normal_cnt = 8;// 版属普通次数
	optional uint32 daily_gold_cnt = 9;// 版属元宝次数
}
message C2S_RecruitNormal {
	optional uint32 recruit_type = 1;
}
message S2C_RecruitNormal{
	optional uint32 ret = 1;
	optional S2C_RecruitInfo recruit_info =2;
	repeated Award awards = 3;  //掉落
}
message C2S_RecruitGoldOne {
	optional uint32 recruit_type = 1;
}
message S2C_RecruitGoldOne{
	optional uint32 ret = 1;
	optional S2C_RecruitInfo recruit_info =2;
	repeated Award awards = 3;  //掉落
}
message C2S_RecruitGoldTen{
	optional uint32 recruit_type = 1;//2 牌子3 元宝
}
message S2C_RecruitGoldTen{
	optional uint32 ret = 1;
	optional S2C_RecruitInfo recruit_info =2;
	repeated Award awards = 3;  //掉落
}
message C2S_RecruitPointGet {
	optional uint32 box_num = 1;//哪个积分盒子
	optional uint32 box_id = 2;//哪个box
	optional uint32 hero_num = 3;//哪个英雄
}
message S2C_RecruitPointGet{
	optional uint32 ret = 1;
	optional S2C_RecruitInfo recruit_info =2;
	repeated Award awards = 3;  //掉落
}

//武将升级
message C2S_HeroLevelUp {
	required uint64 id = 1; //武将唯一id
	repeated Item materials = 2; //升级材料
}

message S2C_HeroLevelUp {
	required uint32 ret = 1;
}

//武将突破
message C2S_HeroRankUp {
	required uint64 id = 1; //武将唯一id
	repeated uint64 hero_id = 2; //消耗同名卡
}

message S2C_HeroRankUp {
	required uint32 ret = 1;
}

//金将突破
message C2S_GoldHeroRankUp {
	required uint64 id = 1; //武将唯一id
}

message S2C_GoldHeroRankUp {
	required uint32 ret = 1;
}

//金将投放资源
message C2S_GoldHeroResource {
	required uint64 id = 1; //武将唯一id
	optional uint32 res_type = 2; // 资源类型1:武将胚子 2:经验 3:突破丹 4:觉醒丹
	repeated uint64 hero_ids = 3;
	repeated Award awards = 4;
}

message S2C_GoldHeroResource {
	required uint32 ret = 1;
}

// 武将回收
message C2S_HeroRecycle {
	repeated uint64 hero_id = 1;
}

message S2C_HeroRecycle {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

// 武将重生
message C2S_HeroReborn {
	optional uint64 hero_id = 1;
}

message S2C_HeroReborn {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

// 武将装备觉醒材料
message C2S_HeroEquipAwaken {
	optional uint64 hero_id = 1;
	repeated uint32 slot = 2;
}

message S2C_HeroEquipAwaken {
	optional uint32 ret = 1;
	repeated uint32 slot = 2;
}

// 武将装备觉醒材料
message C2S_HeroAwaken {
	optional uint64 hero_id = 1;
	repeated uint64 cost_heros = 2;
}

message S2C_HeroAwaken {
	optional uint32 ret = 1;
}

message C2S_HeroActiveDestiny {
	optional uint32 hero_id = 1;  //武将base id
	optional uint32 destiny_id = 2;  //要激活的缘分id
}

message S2C_HeroActiveDestiny {
	optional uint32 ret = 1;
	optional uint32 destiny_id = 2;
}

//宝物
message Treasure {
	required uint64 id = 1; //自增id
	required uint32 base_id = 2; //系统id
	required uint64 user_id = 3; //玩家id
	required uint32 level = 4; //当前等级
	required uint32 exp = 5; //当前经验
	required uint32 history_gold = 6; //强化消耗银币
	required uint32 refine_level = 7; //精炼等级
	repeated uint32  materials = 8;//橙升红材料
	optional uint32 limit_cost = 9; //界限突破等级
	repeated Award recycle_materials = 10; //橙升红回收材料
}

message S2C_GetTreasure {
	repeated Treasure treasures = 1;
}

//装备宝物
message C2S_EquipTreasure {
	required uint64 id = 1;//宝物id
	required uint32 pos = 2; //哪个武将身上
	required uint32 slot = 3;//哪个槽位
}

message S2C_EquipTreasure {
	required uint32 ret = 1;
	optional uint64 id = 2;//宝物id
	optional uint32 pos = 3; //哪个武将身上
	optional uint32 slot = 4;//哪个槽位
	optional uint64 old_id = 5;//原来在这个位置上的宝物
	optional uint32 old_pos = 6;//穿戴的宝物之前的阵位
	optional uint32 old_slot = 7;//穿戴的宝物之前装备槽
}

message C2S_RemoveTreasure {
	required uint32 pos 	= 1;
	required uint32 slot 	= 2;
}

message S2C_RemoveTreasure {
	required uint32 ret 	= 1;
	required uint32 pos 	= 2;
	required uint32 slot 	= 3;
	optional uint64 old_id 	= 4;
}

//宝物强化
message C2S_UpgradeTreasure {
	required uint64 id = 1; //强化宝物ID
	repeated Item materials = 2; //升级材料
}
message S2C_UpgradeTreasure {
	required uint32 ret = 1; //返回结果
}
// 宝物精炼
message C2S_RefineTreasure {
	required uint64 id = 1; //强化宝物ID
	repeated uint64 materials = 2; //吞噬材料
}
message S2C_RefineTreasure {
	required uint32 ret = 1; //返回结果
}

// 宝物回收
message C2S_TreasureRecycle {
	repeated uint64 treasure_id = 1;
}

message S2C_TreasureRecycle {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

// 宝物重生
message C2S_RebornTreasure {
	optional uint64 treasure_id = 1;
}

message S2C_RebornTreasure {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

//宝物橙升红
message C2S_TreasureLimitCost {
	optional uint64 treasure_id = 1;
	optional uint32 idx = 2; //1天宫  2开物  3春秋  4战国
	optional Item materials = 3; //升级材料
}

message S2C_TreasureLimitCost {
	optional uint32 ret = 1;
	optional uint32 idx = 2;
}


//装备
message Equipment {
	optional uint64 id 		= 1;
	optional uint32 base_id = 2;//系统ID
	optional uint32 level 	= 3;//强化等级
	optional uint32 star 	= 4;//星级
	optional uint32 rank 	= 5;//品质
	optional uint32 money 	= 6;//强化消耗的钱
	optional uint32 time 	= 7;//获得时间
	optional uint64 user_id = 8;//玩家id
	optional uint32 r_level = 9;//精炼等级
	optional uint32 r_exp	= 10;//精炼经验
	optional uint32 all_exp	= 11;//精炼消耗的经验
	repeated uint32  materials = 12;//橙升红材料
	repeated Award recycle_materials = 13; //橙升红回收材料
	repeated uint64 jades = 14; //玉石
}
message S2C_GetEquipment {
	repeated Equipment equipments = 1;
}
//装备强化
message C2S_UpgradeEquipment {
	required uint64 id = 1; //强化装备ID
	required uint32 times = 2; //强化次数
}
message S2C_UpgradeEquipment {
	required uint32 ret = 1; //返回结果
	optional uint32 times = 2; //强化次数
	optional uint32 crit_times = 3; //暴击次数
	optional uint32 break_reason = 4; //结束理由
	optional uint32 level = 5; //强化后等级
	repeated uint32 crits = 6; //暴击日志
	optional uint32 save_money = 7; //节省的钱
}
//装备一键强化
message C2S_SuperUpgradeEquipment {
	required uint32 pos = 1; //阵位
}
message S2C_SuperUpgradeEquipment {
	required uint32 ret = 1; //返回结果
	repeated uint32 crits = 2; //暴击日志
	optional uint32 save_money = 3; //节省的钱
}

//装备橙升红
message C2S_EquipmentLimitCost {
	optional uint64 id = 1;
	optional uint32 index = 2; // 0 表示界限突破 1精炼石  2同名卡  3春秋  4战国
	optional Item materials = 3; //升级材料
	repeated uint64 cards = 4; //同名卡
}

message S2C_EquipmentLimitCost {
	optional uint32 ret = 1;
	optional uint32 index = 2;
}

//装备精炼
message C2S_RefineEquipment {
	required uint64 id = 1; //精炼装备ID
	required uint32 type = 2; //精炼类型 1:普通精炼 2:一键精炼
	repeated Item item = 3; //所需要的精炼石 如果类型是2 就不需要
}
message S2C_RefineEquipment {
	required uint32 ret 	= 1; //返回结果
	optional uint32 r_level = 2; //精炼后等级
	optional uint32 r_exp 	= 3; //精炼后的经验
	repeated Item sub_item= 4; //所需要的精炼石
}
//穿装备
message C2S_AddFightEquipment {
	required uint32 pos 	= 1; //阵容位置
	required uint32 slot 	= 2; //装备位置
	required uint64 id 		= 3; //装备ID
}
message S2C_AddFightEquipment {
	optional uint32 pos 	= 1; //阵位
	optional uint32 slot 	= 2; //第几个装备
	optional uint64 id 		= 3; //装备id
	required uint32 ret 	= 4; //返回码
	optional uint64 old_id 	= 5;//穿戴位置旧装备id
	optional uint32 old_pos = 6;//穿戴的装备之前的阵位
	optional uint32 old_slot = 7;//穿戴装备之前装备槽
}
message BattleResource{
	required uint32 pos  = 1;//阵位
	required uint64 id 	 = 2;//装备id
	required uint32 flag = 3;//装备类型
	required uint32 slot = 4;//阵位上的第几个装备
}
message S2C_GetBattleResource{
	repeated BattleResource battle_resource= 1;
}
message C2S_ClearFightEquipment {
	required uint32 pos 	= 1;
	required uint32 slot 	= 2;
}

message S2C_ClearFightEquipment {
	required uint32 ret 	= 1;
	optional uint32 pos 	= 2;
	optional uint32 slot 	= 3;
	optional uint64 old_id 	= 4;
}
// 装备回收
message C2S_EquipmentRecycle {
	repeated uint64 equipment_id = 1;
}

message S2C_EquipmentRecycle {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

// 装备重生
message C2S_EquipmentReborn {
	optional uint64 equipment_id = 1;
}

message S2C_EquipmentReborn {
	required uint32 ret = 1;
	repeated Award awards = 2;
}

//固定商品购买信息
message FixedGoodsBuyInfo {
	required uint32 goods_id = 1; //商店商品id
	required uint32 buy_count = 2; //已购买数量
}
//活动商品购买信息
message ActiveGoodsBuyInfo {
	required uint32 goods_id = 1; //商店商品id
	required uint32 buy_count = 2; //已购买数量
}

//随机商品购买信息
message RandomGoodsBuyInfo {
	required uint32 goods_id = 1; //商店商品id
	required uint32 buy_count = 2; //已购买数量
	required uint32 goods_no = 3; //商店格子No
}

//固定商店信息
message FixedShopInfo {
	repeated FixedGoodsBuyInfo goods = 1;
}
//活动商店信息
message ActiveShopInfo {
	repeated ActiveGoodsBuyInfo goods = 1;
}

//随机商店信息
message RandomShopInfo {
	required uint32 born_time = 1;  //生成时间
	required uint32 today_manual_count = 2; //今天手动刷新累积次数
	required uint32 free_cnt_time = 3; // 免费次数最后刷新时间
	required uint32 free_cnt 	= 4; // 免费剩余次数
	repeated RandomGoodsBuyInfo goods = 5; //刷新出的商品
}

//获得商店信息
message C2S_GetShopInfo {
	required uint32 shop_id = 1;
}

//获得商店信息的回应(或者主动通知客户端商店信息变更协议 触发了一个动态随机商店也用此通知)
message S2C_GetShopInfo {
	optional uint32 shop_id = 1;
	required uint32 ret = 2;
	optional FixedShopInfo fixed_shop = 3;   //如果商店是固定商店，则返回此
	optional RandomShopInfo random_shop = 4; //如果商店是随机商店，则返回此
	optional ActiveShopInfo active_shop = 5; //如果商店是活动商店，则返回此
}
//统一购买商品请求
message C2S_BuyShopGoods {
	required uint32 shop_id = 1;   //购买商品所属商店
	required uint32 goods_id = 2;  //购买商品id 如果是随机商店则发格子No
	required uint32 buy_count = 3; //购买数量
	optional uint32 buy_type = 4; //付款类型1 2
}

//统一购买商品回应
message S2C_BuyShopGoods {
	optional uint32 shop_id = 1;   //购买商品所属商店
	repeated Award awards = 2;  //掉落
	optional uint32 goods_id = 3;  //购买商品id 如果是随机商店则发格子No
	optional uint32 buy_count = 4; //购买数量
	required uint32 ret = 5;
}
//商店刷新
message C2S_ShopRefresh {
	required uint32 shop_id 	 = 1;   //商店id
	required uint32 refresh_type = 2;  //商店刷新类型 1:免费次数刷 2:刷新令刷 3:资源刷
}

//商店刷新回应
message S2C_ShopRefresh {
	optional uint32 shop_id = 1;
	required uint32 ret = 2;
}

//查看星数排行榜
message StageStarRank {
	optional uint32 rank = 1;//排名
	optional uint32 base_id = 2;
	optional uint32 avatar_base_id = 3;
	optional string name = 4;
	optional uint32 star = 5;
	optional uint64 user_id = 6;
	optional uint32 level = 7;
	optional uint32 officer_level = 8;
	optional uint32 chapter = 9;
	optional string guild_name = 10;
	optional uint32 title = 11;
	optional uint32 head_frame_id = 12;// 头像框ID
}

message C2S_GetStageStarRank {
	optional uint32 rank_type = 1; //1 普通关卡 2 精英关卡
}

message S2C_GetStageStarRank {
	required uint32 ret = 1;
	optional uint32 rank_type = 2;
	optional uint32 self_rank = 3; //自己的排名 0 未上榜
	optional uint32 star = 4; //星数
	repeated StageStarRank ranks = 5; //排行榜
}
message ResPhoto {
	required uint32 res_type = 1;//1 武将 2 装备 3 宝物 4 神兵 5 名将
	required uint32 res_id = 2; //
	required uint32 res_lv = 3; //
}

message ActivePhoto {
	required uint32 active_type = 1;
	required uint32 active_id = 2;
}

message C2S_GetResPhoto {
}
message S2C_GetResPhoto {
	required uint32 ret = 1;
	repeated ResPhoto res_photo = 2; //
}
message TowerLayer {
	required uint32 id = 1; //关卡id
	required uint32 star = 2; //星数
	required uint32 now_star = 3; //星数
	optional bool receive_box = 4;//是否领取了宝箱
}
message TowerSurprise {
	required uint32 surprise_id = 1; //surprise id
	required bool win = 2; //
}
message Tower{
	required uint32 now_layer	= 1;//当前最高层数
	required uint32 now_star	= 2;//当前最高总星数
	required uint32 max_layer	= 3;//历史最高层数
	required uint32 max_star	= 4;//历史最高总星数
	repeated TowerLayer layers	= 5;//每一层的信息
	repeated TowerSurprise surprise	= 6;//奇遇
}
message C2S_GetTower{

}
message S2C_GetTower{
	required uint32 ret  = 1;
	optional Tower tower = 2;
	repeated uint32 tower_super_stage = 3;
	required uint32 spuer_cnt  = 4;
}
//挑战关卡
message C2S_ExecuteTower {
	optional uint32 star = 1;//挑战的星数
	optional uint32 layer = 2;//挑战的层数
}

message S2C_ExecuteTower {
	required uint32 ret = 1;
	optional uint32 layer = 2;//挑战的层数
	optional uint64 battle_report = 3;//战报
	optional Tower tower = 4;
	repeated Award total_award = 5; //当前累积的奖励
	optional uint32 surprise = 6; //奇遇的bossid
	repeated AddAward add_award = 7; // 暴击奖励
}
message C2S_FastExecuteTower {
}
message TowerLayerReward{
	required uint32 layerId = 1;
	repeated Award total_award = 2; //当前累积的奖励
	repeated Award box_award = 3; //当前累积的奖励
	optional uint32 surprise = 4; //奇遇的bossid
	repeated AddAward add_award = 5; // 暴击奖励
}
message S2C_FastExecuteTower {
	required uint32 ret = 1;
	optional Tower tower = 2;
	repeated TowerLayerReward award = 3; //奖励
}

message C2S_GetTowerBox{
	optional uint32 layer = 1;//领取的层数
}
message S2C_GetTowerBox{
	required uint32 ret = 1;
	optional uint32 layer = 2;//宝箱的层数
	repeated Award box_reward = 3; //奖励
}
message C2S_ExecuteSurprise{
	optional uint32 surprise_id = 1;//
}
message S2C_ExecuteSurprise{
	required uint32 ret = 1;
	optional uint32 surprise_id = 2;//
	repeated Award reward = 3; //奖励
	optional uint64 battle_report = 4;//战报
	optional Tower tower = 5;
}
message C2S_ExecuteTowerSuperStage{
	required uint32 stage_id = 1;//
	required uint32 type = 2;//1 正常 2 扫荡
}
message S2C_ExecuteTowerSuperStage{
	required uint32 ret = 1;
	optional uint32 stage_id = 2;//
	repeated Award reward = 3; //奖励
	repeated Award first_reward = 4; //首通奖励
	optional uint64 battle_report = 5;//战报
	optional uint32 spuer_cnt  = 6;
	required uint32 type = 7;//1 正常 2 扫荡
}

//查看爬塔排行榜
message C2S_GetTowerStarRank {
}
message TowerStarRank {
	optional uint32 rank = 1;//排名
	optional uint32 base_id = 2;
	optional uint32 avatar_base_id = 3;
	optional string name = 4;
	optional uint32 star = 5;
	optional uint64 user_id = 6;
	optional uint32 level = 7;
	optional uint32 layer = 8;
	optional uint32 officer_level = 9;
	optional string guild_name = 10;
	optional uint32 title = 11;
	optional uint32 head_frame_id = 12;
}
message S2C_GetTowerStarRank {
	required uint32 ret = 1;
	optional uint32 self_rank = 2; //自己的排名 0 未上榜
	optional uint32 star = 3; //自己的排名 0 未上榜
	repeated TowerStarRank ranks = 4;//
}

message C2S_UpOfficerLevel{
}
message S2C_UpOfficerLevel{
	required uint32 ret = 1;
	optional uint32 level = 2;//宝箱的层数
}
message S2C_RechargeNotice {
	required uint32 ret = 1;//
	optional uint64 uid = 2;//玩家id
	optional string order_id = 4;//订单号
	optional uint32 gold = 5;//黄金数量
	optional string product_id = 7;//商品编号
	optional uint32 charge_time = 8;//充值时间
}
message C2S_RechargeTest{
	required float money = 1;// 充值的money
	required uint32 app_id = 2;//
	required string product_id = 3;//
}
message C2S_GetRecharge{
}
message S2C_GetRecharge{
	required uint32 ret = 1;
	repeated MonthlyCard month_card = 2;//月卡
	repeated IntMap recharge_money = 3;//首冲的档位
}
message MonthlyCard{
	required uint32 id = 1; //静态表ID
	required uint32 expire_days = 2; //剩余天数
	required bool using_state = 3; //领取状态  true 可领取 false 不可领取
}
//月卡
message C2S_UseMonthlyCard{
	required uint32 id = 1; //月卡ID
}

message S2C_UseMonthlyCard{
	required uint32 ret = 1;
	optional uint32 id = 2;
	repeated Award reward = 3; //奖励
}
message C2S_GetVipReward{
	required uint32 vip_level = 1; //
}
message S2C_GetVipReward{
	required uint32 ret = 1;
	repeated uint32 vip_reward = 2;
	repeated Award reward = 3; //奖励
}
message S2C_SendVipReward{
	required uint32 ret = 1;
	repeated uint32 vip_reward = 2;
}

message C2S_GetDailyTaskInfo {
}

message DailyTask {
	required uint32 type = 1;       //任务类型
	required uint32 value = 2;      //对应类型的当前积累值
	repeated uint32 reward_id = 3;  //已领取过的ID集合
}

message S2C_GetDailyTaskInfo {
	required uint32 ret = 1;
	optional uint32 level = 2;      //重置时间点的玩家等级
	repeated DailyTask tasks = 3;   //各模块日常任务数据
}

//领取日常任务奖励
message C2S_GetDailyTaskAward {
	required uint32 id = 1;         //任务ID
}

message S2C_GetDailyTaskAward {
	required uint32 ret = 1;
	optional uint32 id = 2;         //任务ID
	repeated Award awards = 3;      //奖励
}
message S2C_UpdateDailyTaskInfo {
	repeated DailyTask tasks = 1;   //有改变的日常任务信息
}
//围剿叛军
message C2S_GetRebelArmy {
}
message RebelArmyUser {
	required uint64 total_hurt = 1;      //累计伤害
	repeated uint32 hurt_reward = 2;  //已领取过的ID集合
	repeated uint32 cnt_reward = 3;  //已领取过的ID集合
	required uint32 user_level = 4;      //玩家等级
	required uint32 self_rank = 5;      //自己的排名
	required uint32 self_guild_rank = 6;      //自己的军团排名
}

message RebelArmyInfo {
	required uint64 uid = 1;//发现者uid
	required string user_name = 2;//发现者名字
	required uint32 officer_level = 3;//发现者官衔等级
	required uint32 id = 4;//boss id //叛军的baseId
	required uint32 end_time = 5;//结束时间
	required uint64 hp_now = 6;// 怪物血量
	required uint64 hp_max = 7;// 怪物总血量
	required uint64 killer_id = 8;//击杀者ID，有过有就是被击杀了
	required string killer_name = 9;//击杀者名字
	required uint32 killer_officer_level = 10;//击杀折官衔等级
	required bool   public = 11;//是否共享
	required uint32  boss_level = 12;//boss level
}
message S2C_GetRebelArmy {
	required uint32 ret = 1;
	optional RebelArmyUser army_user =2;
	repeated RebelArmyInfo army_info =3;
}
message C2S_RebelArmyBattle {
	required uint64 uid = 1;//要挑战的boos发现者的uid
	required uint32 boss_id = 2;//要挑战的boosid
	required uint32 battle_type = 3;//挑战类型
}
message S2C_RebelArmyBattle {
	required uint32 ret = 1;
	optional uint32 boss_id= 2;
	repeated Award reward = 3; //奖励
	repeated AddAward add_rewards = 4; //暴击
	optional BattleReport battle_report = 5;//战报
	optional uint32 user_begin_rank= 6;
	optional uint32 user_end_rank= 7;
	optional uint32 guild_begin_rank= 8;
	optional uint32 guild_end_rank= 9;
	optional RebelArmyInfo army   = 10;
	optional uint64 total_hurt= 11;//累计伤害
	optional uint64 once_hurt= 12;//伤害
}
message C2S_RebArmyKillReward {
	required uint64 uid = 1;//boos发现者的uid
	required uint32 boss_id = 2;//boosid
}
message S2C_RebArmyKillReward {
	required uint32 ret = 1;
	optional uint32 boss_id= 2;
	repeated Award reward = 3; //奖励
	optional uint64 user_id= 4;//发现者id
}
message C2S_RebArmyKillRewardMulti {
	repeated uint64 uids = 1;	//boss发现者的uid
}
message S2C_RebArmyKillRewardMulti {
	required uint32 ret = 1;
	repeated uint32 boss_id= 2;
	repeated Award reward = 3; //奖励
	repeated uint64 user_id= 4;//发现者id
}
message C2S_RebArmyHurtReward {
	required uint32 reward_id = 1;//
}
message S2C_RebArmyHurtReward {
	required uint32 ret = 1;
	repeated Award reward = 3; //奖励
}
message C2S_RebArmyPublic {
	required uint32 boss_id = 1;//boosid
}
message S2C_RebArmyPublic {
	required uint32 ret = 1;
	optional uint32 boss_id= 2;
}

message C2S_RebArmyPublicMulti{
}
message S2C_RebArmyPublicMulti{
	required uint32 ret = 1;
	repeated uint32 boss_id = 2;
}

//查看围剿叛军伤害排行榜
message C2S_GetRebelArmyHurtRank {
}
message RebelArmyHurtRank {
	required uint32 rank = 1;//排名
	required string name = 2;
	required uint64 hurt = 3;
	required uint64 user_id = 4;
	required uint32 level = 5;
	required uint32 officer_level = 6;
}
message S2C_GetRebelArmyHurtRank {
	required uint32 ret = 1;
	optional uint32 self_rank = 2; //自己的排名 0 未上榜
	repeated RebelArmyHurtRank ranks = 3;//
}
//查看围剿叛军军团排行榜
message C2S_GetRebelArmyGuildHurtRank {
}
message RebelArmyGuildHurtRank {
	required uint32 rank = 1;//排名
	required string name = 2;
	required uint64 hurt = 3;
	required uint64 guild_id = 4;
}
message S2C_GetRebelArmyGuildHurtRank {
	required uint32 ret = 1;
	optional uint32 self_rank = 2; //自己的排名 0 未上榜
	repeated RebelArmyGuildHurtRank ranks = 3;//
}
//竞技场
message ArenaToChallengeUser {
	required uint64 user_id = 1; //玩家ID
	required uint32 rank = 2; //排名
	required string name = 3; //玩家名字
	required uint32 base_id = 4;
	required uint64 power = 5; //战力
	optional uint32 avatar_base_id = 6; //
	repeated uint32 heros = 7;
	optional uint32 officer_level = 8; //
	optional string guild_name = 9; //
	optional uint32 title = 10; //
	optional uint32 head_frame_id = 11;
}
//竞技场
message C2S_GetArenaInfo {
}

message S2C_GetArenaInfo {
	required uint32 ret = 1;
	optional uint64 user_id = 2; //玩家ID
	optional uint32 rank = 3; //当前排名
	optional uint32 arena_cnt = 4; //剩余挑战次数
	optional uint32 buy_arena_cnt = 5; //购买挑战次数的次数
	repeated ArenaToChallengeUser to_challenge_list= 6; //对手列表
	optional uint32 max_rank = 7; //历史最高排名
	optional uint32 first_battle = 8; //是否是第一次 1:是第一次 0:不是
}
//竞技场-挑战
message C2S_ChallengeArena {
	required uint32 rank = 1;
	required uint32 num  = 2; // 挑战次数
}

message S2C_ChallengeArena {
	required uint32 ret = 1;
	repeated ArenaFight arena_fight = 2;
	optional uint32 arena_cnt = 3; //剩余挑战次数
	repeated Award max_rank_reward = 4; //最高排名奖励
	optional uint32 first_battle = 5; //是否是第一次 1:是第一次 0:不是
	required uint32 num  = 6; // 挑战次数 扫荡还是打一次
}

message ArenaFight {
	optional uint64 battle_report = 1;//战报(只会在战一次的时候传)
	repeated Award rewards = 2; //战斗奖励
	repeated AddAward add_rewards = 3; //暴击
	optional uint32 old_rank = 4; //老排名(只会在战一次的时候传)
	optional uint32 new_rank = 5; //新排名(只会在战一次的时候传)
	optional bool result = 6;//true- 赢 false- 输 (战5次时用)
}
//竞技场战报
message ArenaReport {
	required uint32 change_rank = 1; //改变排名相对于自己
	required uint64 report_id = 2; //战报ID
	optional uint32 base_id = 3; //对方的base
	optional uint32 avatar_base_id = 4; //对方的base
	optional uint32 level = 5; //对方的等級
	optional uint32 fight_time = 6;//战斗时间
	optional string name = 7;//对方的名字
	required uint64 uid = 8; //玩家自己id
	optional uint32 num = 9;//打了几次
	optional uint32 battle_num = 10;//实际打了几次
	optional uint32 win_cnt = 11;//赢了几次
	optional uint32 officer_level = 12;//对方的官衔
	optional uint64 power = 13;//对方的战力
	optional uint32 head_frame_id = 14;//头像框
}
//巅峰对决
message ArenaBattle {
	required BattleUser attack = 1;
	required BattleUser defense = 2;
	required uint32 attack_rank = 3;
	required uint32 defense_rank = 4;
	required uint64 report_id = 5; //战报ID
	optional uint32 time = 6;
}
message C2S_GetArenaTopTenReport {
}

message S2C_GetArenaTopTenReport {
	required uint32 ret = 1;
	repeated ArenaBattle report = 2;
}
//竞技场排行榜
message C2S_GetArenaTopInfo{
}

message S2C_GetArenaTopInfo {
	required uint32 ret = 1;
	repeated ArenaToChallengeUser user_list = 2;
	optional uint32 user_arena_rank = 3; //玩家自己排名
	optional uint64 power = 4; //玩家战力
}
//领取竞技场最高排行奖励
message C2S_GetArenaRankReward{
	required uint32 reward_id = 1;
}

message S2C_GetArenaRankReward {
	required uint32 ret = 1;
	optional uint32 reward_id = 2;
	repeated Award award = 3;//
}
message S2C_SendArenaRankRewardClient {
	required uint32 ret = 1;
	required uint32 max_rank = 2; //历史最高排名
	repeated uint32 reward_id = 3; //已经领取的奖励id
	required uint32 arena_cnt = 4; //竞技场挑战次数
}
/////////////////公共接口
//通用战报接口
message C2S_CommonGetReport {
	required uint32 report_type = 1; //战报类型 1- 竞技场防守 2-竞技场进攻 4-pvp矿战 5-复仇战报 6-无差别竞技战报
}

message S2C_CommonGetReport {
	required uint32 ret = 1;
	optional uint32 report_type = 2; //战报类型
	repeated ArenaReport arena_reports = 3; //竞技场战报
	repeated MineReport mine_reports = 4; //pvp矿战
	repeated EnemyReport enemy_reports = 5; //复仇战报
	repeated FightsReport fights_reports = 6; //无差别竞技战报
	repeated GraveReport grave_reports = 7;//先秦皇陵战报
}
message C2S_GetBattleReport {
	required uint64 id = 1;
}
message S2C_GetBattleReport {
	required uint32 ret = 1;
	optional uint64 id = 2;
	optional uint64 battle_report = 3;
}
message C2S_BuyCommonCount {
	required uint32 id = 1; //功能id
}

message S2C_BuyCommonCount {
	required uint32 ret = 1;
	optional uint32 id = 2;
	optional uint32 cnt = 3;
	optional uint32 buy_cnt = 4;
}
message BattleUser {
	required User user = 1;
	repeated Hero heros = 2; //上阵的武将
	repeated Equipment equipments = 3; //装备
	repeated BattleResource battle_resources = 4;
	repeated Treasure treasures = 5;//宝物
	repeated uint32 embattle = 6;//布阵信息
}
/////////////////////////////

/// 七日活动
message C2S_GetSevenDaysData {

}


message SevenDaysTask {
	optional uint32 task_type = 1;
	optional uint64 task_value = 2;
	repeated uint32 task_rewards = 3;
}

message S2C_GetSevenDaysData {
	optional uint32 ret = 1;
	repeated SevenDaysTask tasks= 2;
	repeated uint32 shop_ids = 3;
	optional uint32 start_time = 4;
	optional uint32 end_time = 5;
	optional uint32 reward_time = 6;
	optional uint32 current_day = 7;
}

message S2C_UpdateSevenDaysInfo {
	optional SevenDaysTask task = 1;
}

// 七日活动领奖
message C2S_SevenDaysReward {
	optional uint32 id = 1;
	optional uint32 reward_index = 2;
}
message S2C_SevenDaysReward {
	optional uint32 ret = 1;
	optional uint32 id = 2;
	repeated Award awards = 3;
}

// 七日活动折扣商店
message C2S_SevenDaysShop {
	optional uint32 id = 1;
}
message S2C_SevenDaysShop {
	optional uint32 ret = 1;
	optional uint32 id = 2;
	repeated Award awards = 3;
}




message ActCheckin {
	optional uint32 checkin_count = 1; //累计签到天数
	optional uint32 checkin_month = 2;
	repeated uint32 checkin_day = 3; // 签到记录
}

// 活动签到数据
message C2S_GetActCheckin {

}

message S2C_GetActCheckin {
	optional uint32 ret = 1;
	optional uint32 checkin_count = 2;
	optional uint32 checkin_month = 3;
	repeated uint32 checkin_day = 4;
}

// 活动签到数据
message C2S_GetActCheckinSuper {

}

message S2C_GetActCheckinSuper {
	optional uint32 ret = 1;
	optional uint32 last_checkin_time = 2;
	repeated uint32 last_award = 3;
}

// 签到
message C2S_ActCheckin {
}

message S2C_ActCheckin {
	optional uint32 ret = 1;
	optional uint32 day = 2;
	repeated Award reward = 3; //奖励
}

// 签到
message C2S_ActCheckinSuper {
	repeated uint32 award_indexs = 1; // 奖品索引
}

message S2C_ActCheckinSuper {
	optional uint32 ret = 1;
	optional uint32 last_checkin_time = 2;
	repeated Award reward = 3; //奖励
}

message C2S_ActReCheckin {
	optional uint32 day = 1;
}

message S2C_ActReCheckin {
	optional uint32 ret = 1;
	optional uint32 day = 2;
	repeated Award reward = 3; //奖励
}
message ActDinnerBase {
	optional uint32 day = 1; //日期
	repeated uint32 ids = 2; //ids
	repeated uint32 states = 3;// 状态
}



// 活动宴会数据
message C2S_GetActDinner {

}

message S2C_GetActDinner {
	optional uint32 ret = 1;
	optional uint32 day = 2;
	repeated ActDinnerBase dinner = 3;
}

// 获取宴会赠送体力
message C2S_ActDinner {

}

message S2C_ActDinner {
	optional uint32 ret = 1;
	optional uint32 id = 2;
	repeated Award awards = 3;
}

message C2S_ActReDinner {
}

message S2C_ActReDinner {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}
// 活动基金数据
message C2S_GetActFund {
}

message S2C_GetActFund {
	optional uint32 ret = 1;
	optional uint32 fund_num = 2;
	repeated uint32 group = 3; // 已买组别
	repeated uint32 ids = 4;
}

// 领取基金奖励
message C2S_ActFund {
	optional uint32 id = 1;
}

message S2C_ActFund {
	optional uint32 ret = 1;
	optional uint32 id = 2;
}


// 活动打折礼包数据
message C2S_GetActDiscount {
	optional uint32 discount_type = 1;
}

message S2C_GetActDiscount {
	optional uint32 ret = 1;
	optional uint32 discount_type = 2;
	optional uint32 start_time = 3;
	repeated uint32 goods_ids = 4;
	repeated uint32 buy_times = 5;
}

// 购买礼包商品
message C2S_ActDiscount {
	optional uint32 discount_type = 1; //1: 每日  2: 每周
	repeated uint32 id = 2;
}

message S2C_ActDiscount {
	optional uint32 ret = 1;
	optional uint32 discount_type = 2;
	repeated uint32 id = 3;
	repeated Award awards = 4;
	repeated Award random_awards = 5;
}


// 活动摇钱树数据
message C2S_GetActMoneyTree {

}

message S2C_GetActMoneyTree {
	optional uint32 ret = 1;
	optional uint32 num = 2;
	repeated uint32 box_ids = 3;
}

// 摇一次
message C2S_ActMoneyTree {
}

message S2C_ActMoneyTree {
	optional uint32 ret = 1;
	optional uint32 num = 2;
	optional uint32 crit = 3; //暴击倍数
	optional uint32 money = 4; //获得银币
}

// 摇一次
message C2S_ActMoneyTreeBox {
	optional uint32 id = 1;
}

message S2C_ActMoneyTreeBox {
	optional uint32 ret = 1;
	optional uint32 id = 2; //宝箱id
	repeated Award awards = 3;
}

message ActLevelDiscountBase {
	optional uint32 id = 1;
	optional uint32 start_time = 2;
	optional uint32 buy = 3;
}

message C2S_GetActLevelDiscount {

}

message S2C_GetActLevelDiscount {
	optional uint32 ret = 1;
	repeated ActLevelDiscountBase level_discount = 2;
}


// 活动每日boss数据
message C2S_GetActDailyBoss {

}

message DailyBossState {
	optional uint32 chapter_id = 1;
	optional uint32 boss_id = 2;
	optional uint32 boss_state = 3; //状态0：可挑战 1：已挑战
}

message S2C_GetActDailyBoss {
	optional uint32 ret = 1;
	repeated DailyBossState boss_state = 2;
}

// 挑战每日boss
message C2S_ActDailyBoss {
	optional uint32 chapter_id = 1;
	optional uint32 boss_id = 2;
}

message S2C_ActDailyBoss {
	optional uint32 ret = 1;
	optional uint32 chapter_id = 2;
	optional uint32 boss_id = 3;
	optional BattleReport battle_report = 4;  //战报
	repeated Award awards = 5;                //奖励
	optional uint32 silver = 6; // 银两
	optional uint32 exp = 7; // 经验
}
message Achievement {
	required uint32 type = 1;        //成就类型
	required uint64 value = 2;      //成就值
	repeated uint32 reward_ids = 3;  //已领奖ID集合
}

message C2S_GetAchievementInfo {
}

message S2C_GetAchievementInfo {
	required uint32 ret = 1;
	repeated Achievement achs = 2;
}

message C2S_GetAchievementReward {
	required uint32 id = 1;
}

message S2C_GetAchievementReward {
	required uint32 ret = 1;
	optional uint32 id = 2;
	repeated Award awards = 3;
}

message S2C_UpdateAchievementInfo {
	repeated Achievement achs = 1;
}

message C2S_ActGetRechargeAward {

}

message S2C_ActGetRechargeAward {
	optional uint32 ret = 1;
	repeated IntMap record = 2;
}

message C2S_ActRechargeAward {
	optional uint32 record = 1;
}

message S2C_ActRechargeAward {
	optional uint32 ret = 1;
	repeated IntMap record = 2;
	repeated Award rewrad = 3;
}
//公会
//公会成员
message GuildMember {
	optional uint64 uid = 1;//成员id
	optional string name = 2;//玩家昵称
	optional uint32 level = 3;//玩家等级
	optional uint32 position = 4; //职位
	optional uint32 contribution = 5; //贡献
	optional uint32 time = 6; //加入时间
	optional uint32 offline = 7 ;//离线时间
	optional uint32 base_id = 8;
	optional uint32 rank_lv = 9;
	optional uint64 power = 10;
	optional uint32 week_contribution = 11; //周贡献
	optional uint32 vip = 12;//成员的vip
	optional uint32 avatar = 13;
	optional uint32 officer_level= 14;//官衔
	repeated uint32 heros= 15;//阵容英雄
	optional uint32 dungeon_point= 16;//副本积分
	optional uint32 active_cnt= 17;//活动参与次数
	optional uint32 home_tree_level = 18;//家园树等级
	optional uint32 train_daily_count = 19;//成员演武上限
	optional uint32 train_daily_acptcount = 20; // 成员接受演武上限
	optional uint32 head_frame_id = 21;			// 头像框ID
	optional uint32 head_frame_expire_time = 22;// 过期时间
}
//公会
message Guild {
	optional uint64 id = 1; //公会id
	optional string name = 2; //公会名称
	optional uint32 level = 3; //公会经验
	optional uint32 exp = 4; //公会经验
	optional string announcement = 5; //公告
	optional string declaration = 6; //宣言
	optional uint64 leader = 7; //会长id
	optional uint32 member_num = 8; //公会人数
	optional uint32 dungeon_score = 9; //公会副本积分
	optional uint32 icon = 10; //公会图标
	optional uint32 guild_rank = 11; //公会排名
	optional uint32 created = 12; //创建时间
	optional string leader_name = 13; //创建时间
	optional bool has_application = 14 ; //是否已经有入会申请
	optional uint32 impeach_time = 15; //弹劾时间
	optional uint32 leader_base_id = 16; //会长baseid
	optional uint32 daily_total_exp = 17; //每日累计经验
	repeated IntMap daily_part_count = 18; //每个玩法的累计人数
	repeated IntMap daily_part_exp = 19; //每个玩法的累计经验
	repeated Award	 week_pay = 20; //每周工资 （个人自己的）
	optional uint32 active_days = 21; //活跃天数（个人自己的）
	optional uint32 donate_point = 22; //捐献积分
	optional uint32 leader_officer_level = 23; //会长officer_level
	optional uint32 leader_avater_base_id = 24; //会长avater
	optional uint32 answer_time = 25; //公会答题时间
	optional uint32 answer_time_reset_cnt = 26; //公会答题时间重置次数
	optional uint32 mine_born_id = 27; //pvp矿战重生点
	optional uint32 kick_member_cnt = 28; //公会踢人次数
	optional uint32 war_declare_time = 29; //公会宣战时间
	optional bool entry = 30; //是否有跨服军团资格 true 是 false 否
}
message C2S_GetGuildBase{}

message S2C_GetGuildBase{
	required uint32 ret = 1;
	optional Guild guild = 2;//公会信息
	optional GuildMember self_member = 3;//
}
//创建公会
message C2S_CreateGuild{
	required string guild_name = 1; //公会名称
}

message S2C_CreateGuild{
	required uint32 ret = 1;
	optional Guild guild = 2;
}
//进入公会大厅
message C2S_QueryGuildMall{}

message S2C_QueryGuildMall{
	required uint32 ret = 1;
	optional Guild guild = 2;//公会信息
	repeated GuildMember members = 3;
}
//玩家公会信息
message UserGuildInfo {
	required uint32  leave_time = 1;  //上次退会时间
	required uint64	 guild_id	= 2;  //公会id
	required uint32	 finish_help_cnt	= 3;  //公会援助完成次数
	required uint32	 get_help_reward	= 4;  //公会援助奖励领取
	required uint32	 ask_help_cnt	= 5;  //公会援助捐献剩余次数
	required uint32	 dungeon_cnt	= 6;  //副本打了几次
	required uint32	 dungeon_atk_time	= 7;  //副本攻击时间
	repeated uint32  source_reward	=8;  //积分奖励

	required uint32	 ask_help_time	= 9;  //公会援助捐献上次时间
	required uint32	 ask_help_buy	= 10;  //公会援助捐献购买次数

	repeated uint32  total_exp_reward	=11;  //军团任务奖励领取
	required uint32	 ask_help_cd_sec	= 12;  //援助别人cd累计秒数
	repeated IntMap  part_count = 13; //每个玩法的次数
	required uint32	 donate	= 14;  //捐献
	repeated uint32 donate_reward = 15;//每日捐献奖励
	required uint32	 get_red_bag_cnt	= 16;  //已经抢到的红包数量
	required uint32	 create_guild_cnt	= 17;  //创建公会次数

}
//申请公会
message C2S_GuildApplication{
	required uint64 guild_id = 1; //公会id
	required uint32 op = 2; //1- 申请 2 取消申请
}

message S2C_GuildApplication {
	required uint32 ret = 1;
	optional uint64 guild_id = 2;
	optional uint32 op = 3;
}
//审核入会申请
message C2S_GuildCheckApplication {
	required uint64 application_id = 1; //入会申请人id
	required uint32 op = 2; //1 允许 2 拒绝
}

message S2C_GuildCheckApplication {
	required uint32 ret = 1;
	optional uint32 op = 2; //1 允许 2 拒绝
	optional uint64 application_id = 3;
}
//获取公会申请列表
message C2S_GetGuildApplication {}

message S2C_GetGuildApplication {
	required uint32 ret = 1;
	repeated GuildApplication applications = 2;
}
//公会申请
message GuildApplication {
	required uint64 uid = 1; //申请人id
	required string name = 2;//申请人昵称
	required uint64 power = 3; //战力
	required uint32 offline = 4;// 离线时间  0 表示在线
	required uint32 base_id = 5;
	required uint32 rank_lv = 6;
	required uint32 level = 7;
	required uint32 officer_level = 8;
	optional uint32 avatar = 9;
	optional uint32 head_frame_id = 10;
}
//退会
message C2S_GuildLeave{}

message S2C_GuildLeave{
	required uint32 ret = 1;
}
message GuildSystemNotify {
	required uint32 sn_type = 1;
	repeated NoticePair content =2;
	optional uint32 time = 3;
}
//获取个人公会信息
message C2S_GetUserGuild{}

message S2C_GetUserGuild{
	required uint32 ret = 1;
	optional UserGuildInfo user_guild =2;
}
//解散公会
message C2S_GuildDismiss{}

message S2C_GuildDismiss{
	required uint32 ret = 1;
}
//踢玩家
message C2S_GuildKick{
	required uint64 uid = 1; //被踢玩家id
}
message S2C_GuildKick {
	required uint32 ret = 1;
	optional uint64 uid = 2; //被踢玩家id
}
//获取公会成员列表
message C2S_GetGuildMember {}

message S2C_GetGuildMember{
	required uint32 ret = 1;
	repeated GuildMember members = 2;
}
//弹劾会长
message C2S_LeaderImpeachment {}

message S2C_LeaderImpeachment {
	required uint32 ret = 1;
}
//转让会长
message C2S_GuildTransfer {
    required uint64 uid = 1; //玩家id
}
message S2C_GuildTransfer {
	required uint32 ret = 1;
	optional uint64 uid = 2; //玩家id
}
//公会升降职
message C2S_GuildPromote {
	required uint64 uid = 1; //玩家id
	required uint32 op = 2; //职位
}

message S2C_GuildPromote {
	required uint32 ret = 1;
	optional uint64 uid = 2;
	optional uint32 op = 3;
}
//修改公会公告或者宣言
message C2S_SetGuildMessage {
	required string content = 1; //内容
	required uint32 type = 2; //1 -公告 2 - 宣言
}
message S2C_SetGuildMessage {
	required uint32 ret = 1;
	optional uint32 type = 2; //1 -公告 2 - 宣言
	optional string content = 3; //内容
}
//获取公会log
message C2S_GetGuildSystemNotify {}

message S2C_GetGuildSystemNotify{
	required uint32 ret = 1;
	repeated GuildSystemNotify notify = 2;
}
//获取公会列表
message C2S_GetGuildList {
	required uint32 num = 1;
}

message S2C_GetGuildList{
	required uint32 ret = 1;
	optional uint32 num = 2;
	optional uint32 total_cnt = 3;
	repeated Guild guilds = 4;
}
//获取公会援助
message GuildHelpBase{
	optional uint32 help_no =1;//编号
	optional uint32 help_id =2;//最大上线
	optional uint32 limit_max =3;//最大上线
	optional uint32 already_help = 4;//已经捐献
	optional uint32 already_get = 5;//已经领取
	optional uint32 time = 6;//时间
}
message GuildHelp {
	required GuildMember member = 1;   //成员
	repeated GuildHelpBase help_base = 2;   //援助
}
message C2S_GetGuildHelp {}

message S2C_GetGuildHelp{
	required uint32 ret = 1;
	repeated GuildHelp members = 2;
}
message C2S_AppGuildHelp {
	required uint32 helpNo = 1;
	required uint32 helpId = 2;//碎片id
}
message S2C_AppGuildHelp{
	required uint32 ret = 1;
	optional uint32 helpNo = 2;
	optional uint32 helpId = 3;
	optional GuildHelpBase help_base =4;
}
message C2S_UseGuildHelp {
	required uint32 helpNo = 1;
}
message S2C_UseGuildHelp{
	required uint32 ret = 1;
	optional uint32 helpNo = 2;
	optional GuildHelpBase help_base =3;
	repeated Award award =4;
}
message C2S_SurGuildHelp {
	required uint64 uid = 1;
	required uint32 helpNo = 2;
}
message S2C_SurGuildHelp{
	required uint32 ret = 1;
	optional uint64 uid = 2;
	optional uint32 helpNo = 3;
	optional GuildHelpBase help_base =4;
	repeated Award award =5;
}
message C2S_GuildHelpReward {
}
message S2C_GuildHelpReward{
	required uint32 ret = 1;
	repeated Award award =2;
}
//公会副本
message DungeonRecord{
	required uint64 player_id = 1;
	required string player_name = 2;
	required uint32 player_officer = 3;
	required uint32 target_rank = 4; //
	required uint64 target_id = 5; //
	required string target_name = 6;
	optional uint32 target_officer = 7;
	required bool   is_win = 8;
	required uint64 report_id = 9;
	required uint32 time = 10;
}
message GuildDungeonRank {
    optional uint64 guild_id = 1;
	optional uint32 rank 	= 2;
	optional string name 	= 3;
	optional uint32 point 	= 4;
	optional uint32 num 	= 5;
}
message GuildDungeonMemberPoint {
    optional uint64 user_id = 1;
	optional uint32 point 	= 2;
}
message C2S_GetGuildDungeon {
}
message GuildDungeonInfo{
	optional uint32 rank = 1;
	optional BattleUser dungeon =2;
}
message S2C_GetGuildDungeon{
	required uint32 ret = 1;
	repeated GuildDungeonInfo dungeons =2;
	optional bool  is_begin =3;
	optional bool  is_end =4;
}

message C2S_GetGuildDungeonRecord {
}
message S2C_GetGuildDungeonRecord{
	required uint32 ret = 1;
	repeated GuildMember members =2;
	repeated DungeonRecord dungeon_record =3;
	repeated GuildDungeonRank guild_dungeon_rank =4;
	optional GuildAuctionEndNotice  end_notice= 5;//
	optional uint32 self_rank = 6;
	optional uint32 self_player_num 	= 7;
	optional uint32 self_guild_point 	= 8;
}
message C2S_ChangeGuildIcon {
	required uint32 icon_id = 1;
}
message S2C_ChangeGuildIcon{
	required uint32 ret = 1;
	optional uint32 icon_id = 2;
}

message C2S_QueryGuildTrain {
	required uint64 user_id = 1;
}

message S2C_QueryGuildTrain {
	required uint64 userId = 1;
	required uint32 ret = 2;
}

message S2C_InviteGuildTrainNotify {
	required uint64 user_id = 1;
	optional string name = 2;  //名字
	optional uint32 level = 3;
	optional uint32 office_level = 4;
	optional uint32 title = 5;  //称号
	optional uint32 avatar_base_id = 6;  //图像id
	optional uint32 limit_level = 7;  //极限突破等级
	optional uint32 base_id = 8;  //极限突破等级
}

message S2C_InviteGuildTrainReturn {
	required bool   accept = 1;
	optional uint64 uid = 2;  //被邀请人id
	optional string name = 3;
}

message C2S_ConfirmGuildTrain{
	required uint64 userId = 1;
	required bool   accept = 2;
}

message S2C_ConfirmGuildTrain{
	required uint64 userId = 1;
	required uint32 ret = 2;
}

message PBusers{
	required SimpleUser user = 1;
	optional SimpleUser tar_user = 2;
}

message S2C_StartGuildTrainNotify{
	required uint32 endtime = 1;// 结束时间
	required uint32 starttime = 2; //开始时间
	repeated PBusers users = 3;	   //正在演武的玩家
}

message S2C_EndGuildTrainNotify{
	required uint32 totalExp = 1;	// 获得的经验值
}

message C2S_EndGuildTrain{
}

message S2C_EndGuildTrain{
	required uint32 ret = 1;
}

message S2C_GuildTrainChange{
	repeated  PBusers users = 1;	//正在演武的玩家
}

message S2C_GuildDungeonRecordRespond{
	required DungeonRecord dungeon_record =1;
	required GuildMember members =2;
	repeated GuildDungeonRank guild_dungeon_rank =3;
	optional uint32 self_rank = 4;
	optional uint32 self_player_num 	= 5;
	optional uint32 self_guild_point 	= 6;

}
message C2S_GuildDungeonBattle {
	required uint64 uid = 1;
}
message S2C_GuildDungeonBattle{
	required uint32 ret = 1;
	optional uint64 battle_report = 2;//战报
	repeated Award rewards = 3; //奖励
}
message C2S_GuildSourceReward {
	required uint32 id = 1;
}
message S2C_GuildSourceReward{
	required uint32 ret = 1;
	optional uint32 id =2;
	repeated Award rewards = 3; //奖励
}
//公会任务
message C2S_GetGuildTaskReward {
	required uint32 box_id = 1;
}
message S2C_GetGuildTaskReward{
	required uint32 ret = 1;
	optional uint32 box_id =2;
	repeated Award rewards = 3; //奖励
}
message S2C_GuildChangeState{
	required uint32 state_id = 1;//状态 1 职位改变
}




message TerritoryEvent {
	optional uint32 id = 1;      //自增ID
	optional uint32 territory_id = 2;
	optional uint32 time = 3;    //发生时间
	optional uint32 info_id = 4; //事件ID
	optional uint32 event_type = 5; //事件类型
	optional bool is_repress = 6;   //是否已经镇压
	optional bool for_help = 7;   //是否已求助
	optional bool is_award = 8;   //是否已领奖
	optional string fname = 9;   //镇压好友名字
	optional uint32 office_level = 10;   //镇压好友名字
	repeated Award awards = 11;   //事件奖励
}

message Territory {
	optional uint32 id = 1;
	optional uint32 patrol_hero_base_id = 2;
	optional uint32 patrol_type = 3;
	optional uint32 patrol_start = 4;
	optional uint32 patrol_end = 5;
	repeated TerritoryEvent patrol_events = 6;
}

// 获取占山为王各城池信息
message C2S_GetTerritory {

}

message S2C_GetTerritory {
	optional uint32 ret = 1;
	repeated Territory territorys = 2;
}

// 获取占山为王单个城池信息
message C2S_GetTerritorySingle {
	optional uint32 territory_id = 1;
}

message S2C_GetTerritorySingle {
	optional uint32 ret = 1;
	optional Territory territory = 2;
}

// 攻占城池
message C2S_AttackTerritory {
	optional uint32 id = 1;
}

message S2C_AttackTerritory {
	optional uint32 ret = 1;
	optional uint32 id = 2;
	optional BattleReport battle_report = 3;
	repeated Award awards = 4;
}

// 巡逻
message C2S_PatrolTerritory {
	optional uint32 id = 1; // 城池id
	optional uint32 patrol_type = 2; // 巡逻类型
	optional uint64 hero_id = 3; // 巡逻武将
}

message S2C_PatrolTerritory {
	optional uint32 ret = 1;
	optional uint32 id = 2; // 城池id
	optional Territory territory = 3;
	repeated Award awards = 4;
}

// 领取奖励
message C2S_GetPatrolAward {
	optional uint32 id = 1; // 城池id
}

message S2C_GetPatrolAward {
	optional uint32 ret = 1;
	optional uint32 id = 2; // 城池id
	repeated Award awards = 3;
	repeated Award other_awards = 4;
}

// 领取奖励
message C2S_GetAllPatrolAward {
}

message S2C_GetAllPatrolAward {
	optional uint32 ret = 1;
	repeated uint32 id = 2; // 城池id
	repeated Award awards = 3;
	repeated Award other_awards = 4;
}

message C2S_TerritoryForHelp {
	optional uint32 territory_id = 1;
	optional uint32 event_id = 2;
}

message S2C_TerritoryForHelp {
	optional uint32 ret = 1;
	optional uint32 territory_id = 2;
	optional uint32 event_id = 3;
}


message C2S_GetTerritoryRiotAward {
	optional uint32 territory_id = 1;
	optional uint32 event_id = 2;
}

message S2C_GetTerritoryRiotAward {
	optional uint32 ret = 1;
	optional uint32 territory_id = 2;
	optional uint32 event_id = 3;
	repeated Award awards = 4;
}

message C2S_TerritoryHelpRepressRiot {
	optional uint64 friend_id = 1;
	optional string friend_uuid = 2;
	optional uint64 friend_sid = 3;
	optional uint32 territory_id = 4;
	optional uint32 event_id = 5;
}

message S2C_TerritoryHelpRepressRiot {
	optional uint32 ret = 1;
	optional uint64 friend_id = 2;
	optional uint32 territory_id = 3;
	optional uint32 event_id = 4;
	optional uint32 repress_count = 5;
	optional uint32 exp = 6;
	repeated Award awards = 7;
	optional BattleReport battle_report = 8;
}

message TerritoryRiotInfo {
	 optional uint32 territory_id = 1;
	 optional uint32 end_time = 2;
	 optional TerritoryEvent event = 3;
}
message FriendTerritoryRiotInfo {
	optional uint64 user_id = 1;
	optional string uuid = 2;
	optional string name = 3;
	optional uint64 sid = 4;
	optional uint32 baseId = 5;
	optional uint32 level = 6;
	optional uint32 office_level = 7;
	optional uint32 avatar_base_id = 8;
	repeated TerritoryRiotInfo riots = 9;
	optional uint32 head_frame_id = 10;
}

message C2S_GetTerritoryForHelp {
}

message S2C_GetTerritoryForHelp {
	optional uint32 ret = 1;
	optional uint32 repress_count = 2;
	repeated FriendTerritoryRiotInfo friend_riots = 3;
}

message S2C_UpdateTerritoryForHelp {
	optional FriendTerritoryRiotInfo friend_riot = 1;
}

// 狂欢节活动
message Carnival {
	optional uint32 id = 1; // id
	optional string name = 2; // 活动名称
	optional uint32 preview_time = 3; // 活动开始时间
	optional uint32 start_time = 4; // 活动开始时间
	optional uint32 end_time = 5; // 活动结束时间
	optional uint32 award_time = 6; // 活动领奖结束时间
	optional uint32 main_view = 7; // 活动主视图
	optional uint32 icon_left_up = 8; // 活动主视图
	optional uint32 icon_left_down = 9; // 活动主视图
	optional uint32 icon_right_up = 10; // 活动主视图
	optional uint32 icon_right_down = 11; // 活动主视图

	optional uint32 first_term = 12; //第一期
	optional uint32 first_term_icon = 13; //第一期
	optional uint32 first_preview_time = 14; //第一期开始时间
	optional uint32 first_start_time = 15; //第一期开始时间
	optional uint32 first_end_time = 16; //第一期结束时间
	optional uint32 first_award_time = 17; //第一期领奖结束时间
	optional uint32 first_stage_one = 18; //页签1
	optional string first_stage_one_name = 19; //页签1名称
	optional uint32 first_stage_one_src = 20; //页签1资源
	optional uint32 first_stage_two = 21; //页签2
	optional string first_stage_two_name = 22; //页签2名称
	optional uint32 first_stage_two_src = 23; //页签2资源
	optional uint32 first_stage_three = 24; //页签3
	optional string first_stage_three_name = 25; //页签3名称
	optional uint32 first_stage_three_src = 26; //页签3资源
	optional uint32 first_stage_four = 27; //页签4
	optional string first_stage_four_name = 28; //页签4名称
	optional uint32 first_stage_four_src = 29; //页签4资源

	optional uint32 second_term = 30; //第二期
	optional uint32 second_term_icon = 31; //第二期
	optional uint32 second_preview_time = 32; //第二期开始时间
	optional uint32 second_start_time = 33; //第二期开始时间
	optional uint32 second_end_time = 34; //第二期结束时间
	optional uint32 second_award_time = 35; //第二期领奖结束时间
	optional uint32 second_stage_one = 36; //页签1
	optional string second_stage_one_name = 37; //页签1名称
	optional uint32 second_stage_one_src = 38; //页签1资源
	optional uint32 second_stage_two = 39; //页签2
	optional string second_stage_two_name = 40; //页签2名称
	optional uint32 second_stage_two_src = 41; //页签2资源
	optional uint32 second_stage_three = 42; //页签3
	optional string second_stage_three_name = 43; //页签3名称
	optional uint32 second_stage_three_src = 44; //页签3资源
	optional uint32 second_stage_four = 45; //页签4
	optional string second_stage_four_name = 46; //页签4名称
	optional uint32 second_stage_four_src = 47; //页签4资源

	optional uint32 third_term = 48; //第三期
	optional uint32 third_term_icon = 49; //第三期
	optional uint32 third_preview_time = 50; //第三期开始时间
	optional uint32 third_start_time = 51; //第三期开始时间
	optional uint32 third_end_time = 52; //第三期结束时间
	optional uint32 third_award_time = 53; //第三期领奖结束时间
	optional uint32 third_stage_one = 54; //页签1
	optional string third_stage_one_name = 55; //页签1名称
	optional uint32 third_stage_one_src = 56; //页签1资源
	optional uint32 third_stage_two = 57; //页签2
	optional string third_stage_two_name = 58; //页签2名称
	optional uint32 third_stage_two_src = 59; //页签2资源
	optional uint32 third_stage_three = 60; //页签3
	optional string third_stage_three_name = 61; //页签3名称
	optional uint32 third_stage_three_src = 62; //页签3资源
	optional uint32 third_stage_four = 63; //页签4
	optional string third_stage_four_name = 64; //页签4名称
	optional uint32 third_stage_four_src = 65; //页签4资源
}

// 狂欢节活动
message CarnivalActivity {
	optional uint32 id = 1; //活动ID
	optional uint32 carnival_id = 2; //主活动id
	optional uint32 term = 3; //期数
	optional uint32 stage = 4; //页签
	optional uint32 act_type = 5; //活动类型
	optional uint32 quest_type = 6; //任务类型
	optional string title = 7; //活动标题
	optional string desc = 8; //活动描述
	optional string title1 = 9; //活动标题
	optional string desc1 = 10; //活动描述
	optional string title2 = 11; //活动标题
	optional string desc2 = 12; //活动描述
	optional uint32 sort = 13;
	optional uint32 preview_time = 14; //活动开始时间
	optional uint32 start_time = 15; //活动开始时间
	optional uint32 end_time = 16; //活动结束时间
	optional uint32 award_time = 17; //活动领奖结束时间
	optional uint32 drop_res_id = 18; //活动领奖结束时间
}

message CarnivalActivityQuest {
	optional uint32 quest_id = 1; //任务ID
	optional uint32 act_id = 2; //活动ID
	optional uint32 quest_type = 3; //任务类型
	optional string param1 = 4; //参数1
	optional uint32 param2 = 5; //参数2
	optional uint32 param3 = 6; //参数3
	optional uint32 consume_type1 = 7; //消耗道具
	optional uint32 consume_value1 = 8;
	optional uint32 consume_size1 = 9;
	optional uint32 consume_type2 = 10;
	optional uint32 consume_value2 = 11;
	optional uint32 consume_size2 = 12;
	optional uint32 consume_type3 = 13;
	optional uint32 consume_value3 = 14;
	optional uint32 consume_size3 = 15;
	optional uint32 consume_type4 = 16;
	optional uint32 consume_value4 = 17;
	optional uint32 consume_size4 = 18;
	optional uint32 award_type1 = 19; //奖励道具
	optional uint32 award_value1 = 20;
	optional uint32 award_size1 = 21;
	optional uint32 award_type2 = 22;
	optional uint32 award_value2 = 23;
	optional uint32 award_size2 = 24;
	optional uint32 award_type3 = 25;
	optional uint32 award_value3 = 26;
	optional uint32 award_size3 = 27;
	optional uint32 award_type4 = 28;
	optional uint32 award_value4 = 29;
	optional uint32 award_size4 = 30;

	optional uint32 select_award_type1 = 31; //奖励道具
	optional uint32 select_award_value1 = 32;
	optional uint32 select_award_size1 = 33;
	optional uint32 select_award_type2 = 34;
	optional uint32 select_award_value2 = 35;
	optional uint32 select_award_size2 = 36;
	optional uint32 select_award_type3 = 37;
	optional uint32 select_award_value3 = 38;
	optional uint32 select_award_size3 = 39;
	optional uint32 select_award_type4 = 40;
	optional uint32 select_award_value4 = 41;
	optional uint32 select_award_size4 = 42;
    optional uint32 select_award_type5 = 43; //奖励道具
    optional uint32 select_award_value5 = 44;
    optional uint32 select_award_size5 = 45;
    optional uint32 select_award_type6 = 46;
    optional uint32 select_award_value6 = 47;
    optional uint32 select_award_size6 = 48;
    optional uint32 select_award_type7 = 49;
    optional uint32 select_award_value7 = 50;
    optional uint32 select_award_size7 = 51;
    optional uint32 select_award_type8 = 52;
    optional uint32 select_award_value8 = 53;
    optional uint32 select_award_size8 = 54;

	optional uint32 award_select = 55; //奖励道具是否可选
	optional uint32 award_limit = 56; //奖励限制次数
	optional uint32 server_limit = 57; //奖励全服限制次数
	optional uint32 server_times = 58; //奖励全服领取次数
	optional string quest_des = 59;		//任务描述
	optional string discout_id = 60;	//折扣标签
	optional uint32 sort_num = 61;   //排序索引
	optional uint32 show_limit_type = 62;   //显示限制
	optional uint32 show_limit_value = 63;   //显示限制
}





// 定制活动
message CustomActivity {
    required uint32 act_id = 1; //活动ID
    required uint32 act_type = 2; //活动类型
    optional uint32 icon_type = 3; //活动图标类型
    optional uint32 icon_value = 4; //活动图标
	optional uint32 icon_type_top_one = 5; //活动图标类型
	optional uint32 icon_value_top_one = 6; //活动图标
	optional uint32 icon_type_top_two = 7; //活动图标类型
	optional uint32 icon_value_top_two = 8; //活动图标
	optional uint32 icon_type_top_three = 9; //活动图标类型
	optional uint32 icon_value_top_three = 10; //活动图标
	optional string title = 11; //活动标题
	optional string sub_title = 12; //小标题
	optional string desc = 13; //活动描述
	optional string detail = 14; //活动描述
	optional uint32 preview_time = 15; //活动预览时间
	optional uint32 start_time = 16; //活动开始时间
	optional uint32 end_time = 17; //活动结束时间
	optional uint32 award_time = 18; //活动奖励领取结束时间
	optional uint32 min_vip = 19; //活动Vip等级限制
	optional uint32 max_vip = 20; //活动Vip等级限制
	optional uint32 min_level = 21; //活动Vip等级限制
	optional uint32 max_level = 22; //活动Vip等级限制
    optional uint32 button_id = 23;//未达成显示id
    optional uint32 show_schedule = 24;//是否显示进度
    optional uint32 batch = 25;//批次
    optional uint32 sort_num = 26;//排序字段
}

message CustomActivityQuest {
    required uint32 quest_id = 1; //任务ID
    required uint32 act_id = 2; //活动ID
    required uint32 quest_type = 3; //任务类型
    required string param1 = 4; //参数1
    required uint32 param2 = 5; //参数2
    required uint32 param3 = 6; //参数3
    required uint32 consume_type1 = 7; //消耗道具
    required uint32 consume_value1 = 8;
    required uint32 consume_size1 = 9;
    required uint32 consume_type2 = 10;
    required uint32 consume_value2 = 11;
    required uint32 consume_size2 = 12;
    required uint32 consume_type3 = 13;
    required uint32 consume_value3 = 14;
    required uint32 consume_size3 = 15;
    required uint32 consume_type4 = 16;
    required uint32 consume_value4 = 17;
    required uint32 consume_size4 = 18;
    required uint32 award_type1 = 19; //奖励道具
    required uint32 award_value1 = 20;
    required uint32 award_size1 = 21;
    required uint32 award_type2 = 22;
    required uint32 award_value2 = 23;
    required uint32 award_size2 = 24;
    required uint32 award_type3 = 25;
    required uint32 award_value3 = 26;
    required uint32 award_size3 = 27;
    required uint32 award_type4 = 28;
    required uint32 award_value4 = 29;
    required uint32 award_size4 = 30;

	required uint32 select_award_type1 = 31; //奖励道具
	required uint32 select_award_value1 = 32;
	required uint32 select_award_size1 = 33;
	required uint32 select_award_type2 = 34;
	required uint32 select_award_value2 = 35;
	required uint32 select_award_size2 = 36;
	required uint32 select_award_type3 = 37;
	required uint32 select_award_value3 = 38;
	required uint32 select_award_size3 = 39;
	required uint32 select_award_type4 = 40;
	required uint32 select_award_value4 = 41;
	required uint32 select_award_size4 = 42;
    required uint32 select_award_type5 = 43; //奖励道具
    required uint32 select_award_value5 = 44;
    required uint32 select_award_size5 = 45;
    required uint32 select_award_type6 = 46;
    required uint32 select_award_value6 = 47;
    required uint32 select_award_size6 = 48;
    required uint32 select_award_type7 = 49;
    required uint32 select_award_value7 = 50;
    required uint32 select_award_size7 = 51;
    required uint32 select_award_type8 = 52;
    required uint32 select_award_value8 = 53;
    required uint32 select_award_size8 = 54;

    required uint32 award_select = 55; //奖励道具是否可选
    required uint32 award_limit = 56; //奖励限制次数
    required uint32 server_limit = 57; //奖励全服限制次数
    required uint32 server_times = 58; //奖励全服领取次数
    optional string quest_des = 59;		//任务描述
    optional string discout_id = 60;	//折扣标签
	optional uint32 sort_num = 61;   //排序索引
	optional uint32 show_limit_type = 62;   //显示限制
	optional uint32 show_limit_value = 63;   //显示限制
}


message UserCarnivalActivityQuest {
	required uint32 act_id = 1; //活动ID
	required uint32 quest_id = 2; //任务ID
	required uint32 time = 3; //活动初始化时间
	required string progress = 4; //活动完成进度
	required uint32 award_time = 5; //奖励领取时间
	required uint32 award_times = 6; //奖励领取次数
	required string progress_second = 7; //活动完成进度2
	repeated IntMap value = 8; //参数
}

//获取活动信息
message C2S_GetCarnivalActivityInfo {
}

message S2C_GetCarnivalActivityInfo {
	required uint32 ret = 1;
	repeated Carnival carnival = 2;	//活动信息
	repeated CarnivalActivity activity = 3;	//活动信息
	repeated CarnivalActivityQuest quest = 4;	//任务信息
	repeated UserCarnivalActivityQuest user_quest = 5;//用户进度和领奖相关信息
}

message S2C_UpdateCarnivalActivityQuest {
	optional uint32 ret = 1;
	repeated UserCarnivalActivityQuest user_quest = 2;
}

//活动领奖
message C2S_GetCarnivalActivityAward {
	required uint32 act_id = 1;//活动id
	required uint32 quest_id = 2;//任务id
	optional uint32 award_id = 3;//可选奖励的第几个奖励 从0开始
	optional uint32 award_num = 4;//兑换奖励兑换次数
}

message S2C_GetCarnivalActivityAward {
	required uint32 ret = 1;
	required uint32 act_id = 2;
	required uint32 quest_id = 3;
	optional uint32 award_id = 4;
	optional uint32 award_num = 5;//兑换奖励兑换次数
}

//活动有修改的时候 全局广播
message S2C_UpdateCarnivalActivity {
	optional uint32 ret = 1;
	repeated Carnival carnival = 2;
	repeated CarnivalActivity activity = 3;
	repeated CarnivalActivityQuest quest = 4;
	repeated uint32 delete_activity = 5;
}


//获取个人记录
message C2S_GetUserCarnivalActivityQuest {
}

message S2C_GetUserCarnivalActivityQuest {
	required uint32 ret = 1;
	repeated UserCarnivalActivityQuest user_quest = 2;
}


message UserCustomActivityQuest {
    required uint32 act_id = 1; //活动ID
    required uint32 quest_id = 2; //任务ID
    required uint32 time = 3; //活动初始化时间
    required string progress = 4; //活动完成进度
    required uint32 award_time = 5; //奖励领取时间
    required uint32 award_times = 6; //奖励领取次数
    required string progress_second = 7; //活动完成进度2
	repeated IntMap value = 8; //参数
	required uint32 time2 = 9; //参数
}

//获取活动信息
message C2S_GetCustomActivityInfo {
}

message S2C_GetCustomActivityInfo {
    required uint32 ret = 1;
    repeated CustomActivity activity = 2;	//活动信息
    repeated CustomActivityQuest quest = 3;	//任务信息
    repeated UserCustomActivityQuest user_quest = 4;//用户进度和领奖相关信息
}


message Questionnaire {
	optional uint32 id = 1;
	optional string link = 2;
	optional uint32 start_time = 3;
	optional uint32 end_time = 4;
	optional uint32 level_min = 5;
	optional uint32 level_max = 6;
	optional uint32 vip_min = 7;
	optional uint32 vip_max = 8;
}

//获取活动信息
message C2S_GetQuestionnaireInfo {
}

message S2C_GetQuestionnaireInfo {
	required uint32 ret = 1;
	repeated Questionnaire questionnaires = 2;	//调查问卷信息
	repeated uint32 question_ids = 3;
}

message S2C_UpdateQuestionnaireInfo {
	optional Questionnaire questionnaire = 1;	//调查问卷信息
}

//获取活动信息
message C2S_Questionnaire {
	optional uint32 qid = 1;
}

message S2C_Questionnaire {
	optional uint32 ret = 1;
}

//获取个人记录
message C2S_GetUserCustomActivityQuest {
}

message S2C_GetUserCustomActivityQuest {
	required uint32 ret = 1;
	repeated UserCustomActivityQuest user_quest = 2;//用户进度和领奖相关信息
}

//活动领奖
message C2S_GetCustomActivityAward {
    required uint32 act_id = 1;//活动id
    required uint32 quest_id = 2;//任务id
    optional uint32 award_id = 3;//可选奖励的第几个奖励 从0开始
    optional uint32 award_num = 4;//兑换奖励兑换次数
}

message S2C_GetCustomActivityAward {
    required uint32 ret = 1;
    required uint32 act_id = 2;
    required uint32 quest_id = 3;
    optional uint32 award_id = 4;
    optional uint32 award_num = 5;//兑换奖励兑换次数
}

//活动领奖
message C2S_GetCustomActivityFundAward {
    required uint32 act_id = 1;//活动id
    required uint32 quest_id = 2;//任务id
    optional uint32 day = 3;//可选奖励的第几个奖励 从0开始
}

message S2C_GetCustomActivityFundAward {
    required uint32 ret = 1;
    required uint32 act_id = 2;
    required uint32 quest_id = 3;
    optional uint32 day = 4;
    repeated Award awards = 5;
}

//活动有修改的时候 全局广播
message S2C_UpdateCustomActivity {
    repeated CustomActivity activity = 1;
    repeated CustomActivityQuest quest = 2;
    repeated uint32 delete_activity = 3;
}

message S2C_UpdateCustomActivityQuest {
    repeated UserCustomActivityQuest user_quest = 1;
}


message C2S_UpdateGuideId {
	required uint32 guide_id = 1;
}

message S2C_UpdateGuideId {
	required uint32 ret = 1;
	required uint32 guide_id = 2;
}

message C2S_GeneralGuide {
     required uint32 guideid = 1;
     required uint32 sub_msgid = 2;
     required bytes sub_msg = 3;
}

message S2C_GeneralGuide {
     required uint32 ret = 1;
     required uint32 guide_id = 2;
}


message C2S_SetUserLevel {
	required uint32 level = 1;
}

message S2C_SetUserLevel {
	required uint32 ret = 1;
	required uint32 level = 2;
}


message C2S_GetGameGiftBag {
         required string code_id = 1;
}

message S2C_GetGameGiftBag {
    required uint32 ret = 1;
    required string code_id = 2;
    repeated Award awards = 3;
}

message WorldBossUserRank {
    optional uint64 user_id = 1;
	optional uint32 rank 	= 2;
	optional string name 	= 3;
	optional uint32 point 	= 4;
	optional uint32 office_level 	= 5;
	optional uint32 title 	= 6;
}
message WorldBossGuildRank {
    optional uint64 guild_id = 1;
	optional uint32 rank 	= 2;
	optional string name 	= 3;
	optional uint32 point 	= 4;
	optional uint32 num 	= 5;//参与人数
}
message SimpleUser {
    optional uint64 user_id = 1;
	optional string name 	= 2;
	optional uint32 officer_level 	= 3;
	optional uint32 leader 	= 4;//主角id
	optional uint32 avatar_base_id = 5;
	optional uint32 title = 6;
	optional uint32 level = 7;
}
message WorldBossEndNotice {
	repeated KvPair sys_notice =1;
}
message C2S_EnterWorldBoss {}

message S2C_EnterWorldBoss {
    required uint32 ret 		= 1;
	optional uint32 boss_id 	= 2;
	optional uint32 start_time 	= 3;
	optional uint32 user_point  = 4;
	optional uint32 challenge_boss_cnt  = 5;
	optional uint32 challenge_boss_time = 6;
	optional uint32 challenge_user_cnt  = 7;
	optional uint32 challenge_user_time = 8;
	optional uint32 bechallenge_cnt  	= 9;
	optional uint32 bechallenge_time  	= 10;
	optional uint32 guild_point  		= 11;
	optional uint32 self_user_rank  	= 12;
	optional uint32 self_guild_rank  	= 13;
	repeated WorldBossUserRank user_rank =14;
	repeated WorldBossGuildRank guild_rank=15;
	optional uint32 end_time 	= 16;
	optional WorldBossEndNotice end_notice 	= 17;
	repeated SimpleUser users=18;
}
message C2S_AttackWorldBoss {}

message S2C_AttackWorldBoss {
	required uint32 ret = 1;
	optional BattleReport report = 2;//战报
	optional uint32 point = 3;//获得积分
	optional uint64 hurt = 4;//造成伤害
}
message NoticePair {
	required string key = 1;//key
	required string value = 2;//value
	optional uint32 key_type = 3;//key的颜色类型 1:官衔
	optional uint32 key_value = 4;//key的颜色值
}
message S2C_WorldBossNotice {
	required uint32 sn_type = 1; //1:世界boss
	repeated NoticePair content =2;
}
message BulletNotice {
	required uint32 sn_type = 1; //1:世界boss
	required uint32 color = 2; //
	optional SimpleUser user = 3;
	repeated NoticePair content =4;
	optional uint32 param = 5; //保留参数
}
message S2C_BulletNotice {
	repeated BulletNotice content =4;
}

message C2S_GetWorldBossGrabList {

}

message WorldBossGrabInfo {
	required uint64 user_id = 1;
	required string name = 2;
	required uint32 point = 3;
	required uint32 rank = 4;
	required uint32 office_level = 5;
	required uint32 base_id =6;
	repeated uint32 hero_base_id =7;
	required string guild_name = 8;
	required uint32 avatar_base_id = 9;
}
message S2C_GetWorldBossGrabList {
	required uint32 ret = 1;
	repeated WorldBossGrabInfo list = 2;
}

message C2S_GrabWorldBossPoint {
	required uint64 user_id = 1;
}
message S2C_GrabWorldBossPoint{
	required uint32 ret = 1;
	optional uint32 point = 2;
	optional uint64 report = 3;//战报
}
message S2C_GetWorldBossInfo{
	required uint32 ret = 1;
	optional uint32 boss_id 	= 2;
	optional uint32 start_time 	= 3;
	optional uint32 end_time 	= 4;
}
message C2S_UpdateWorldBossRank {
}
message S2C_SyncWorldBossRank{
	required uint32 ret 		= 1;
	optional uint32 user_point  = 2;
	optional uint32 guild_point  		= 3;
	optional uint32 self_user_rank  	= 4;
	optional uint32 self_guild_rank  	= 5;
	repeated WorldBossUserRank user_rank =6;
	repeated WorldBossGuildRank guild_rank=7;
}

// 变身卡
message Avatar {
	optional uint64 id = 1;
	optional uint32 base_id = 2;
	optional uint32 level = 3;
}

message S2C_GetAvatar {
	optional uint32 ret = 1;
	repeated Avatar avatars = 2;
}

message C2S_EquipAvatar {
	optional uint64 avatar_id = 1;
}

message S2C_EquipAvatar {
	optional uint32 ret = 1;
	optional uint64 avatar_id = 2;
}

message C2S_EnhanceAvatar {
	optional uint64 avatar_id = 1;
}

message S2C_EnhanceAvatar {
	optional uint32 ret = 1;
	optional uint64 avatar_id = 2;
}

// 变身卡重生
message C2S_RebornAvatar {
	optional uint64 avatar_id = 1;
}

message S2C_RebornAvatar {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

//神兵
message Instrument {
	optional uint64 id 		= 1;
	optional uint32 base_id = 2;//系统ID
	optional uint32 level 	= 3;//进阶等级
	optional uint32 limit_level 	= 4;//界限突破等级
	repeated IntMap limit_res = 5;  //界限资源
}
message S2C_GetInstrument {
	repeated Instrument instruments = 1;
}
//穿神兵
message C2S_AddFightInstrument {
	required uint32 pos 	= 1; //阵容位置
	optional uint64 instrument_id 		= 2;//神兵id
}
message S2C_AddFightInstrument{
	required uint32 ret 	= 1; //返回码
	optional uint32 pos 	= 2; //阵位
	optional uint64 instrument_id 		= 3;//神兵id
	optional uint64 old_id 		= 4;//神兵id
}
message C2S_ClearFightInstrument {
	required uint32 pos 	= 1;
}

message S2C_ClearFightInstrument {
	required uint32 ret 	= 1;
	optional uint32 pos 	= 2;
	optional uint64 old_id 	= 3;
}
message C2S_InstrumentUpLevel {
	required uint64 id 	= 1;
}

message S2C_InstrumentUpLevel {
	required uint32 ret 	= 1;
}

message C2S_InstrumentUpLimitLevel {
	required uint64 id 	= 1;
}

message S2C_InstrumentUpLimitLevel {
	required uint32 ret 	= 1;
}

message C2S_InstrumentLimitLvPutRes {
	optional uint64 instrument_id =1;
	optional uint32 pos =2;
	repeated Item sub_item= 3;
}

message S2C_InstrumentLimitLvPutRes {
	optional uint32 ret = 1;
	optional uint32 pos =2;
}

// 神兵回收
message C2S_InstrumentRecycle {
	repeated uint64 instrument_id = 1;
}
message S2C_InstrumentRecycle {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}
// 神兵重生
message C2S_InstrumentReborn {
	required uint64 instrument_id = 1;
}
message S2C_InstrumentReborn {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}
message C2S_SellObjects {
	repeated Object objects = 1;
}

message S2C_SellObjects {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

message C2S_SetUserResource{
	 repeated Award awards =1;
}

message S2C_SetUserResource{
	required uint32 ret = 1;
	repeated Award awards =2;
}




//好友
message Friend {
	required uint64 id = 1;
	required string name = 2;
	required uint32 level = 3;
	required uint32 vip = 4;
	required uint64 power = 5; //战力
	required uint32 online = 6; //离线时间  0 表示在线  >0 离线
	optional bool present = 7; //是否可赠送玩家精力
	optional bool getpresent = 8; //是否可領取玩家赠送的精力
	optional uint32 base_id = 9;
	optional uint32 avatar_base_id = 10;
	optional string guild_name = 11; //公会名称
	optional uint32 friend_count = 12; //好友数量
	optional uint32 office_level = 13;//官衔
	optional uint32 head_frame_id = 14;// 头像框
}

//好友列表
message C2S_GetFriendList{}

message S2C_GetFriendList{
	repeated Friend friend = 1; //好友
	repeated Friend blacklist = 2; //黑名单
	repeated Friend friend_req = 3; //好友申请
	optional uint32 get_present_num = 4; //已领取精力次數
	required uint32 ret = 5; //
}


//添加好友
message C2S_AddFriend{
	required string name = 1; //添加玩家的昵称
	required uint32 friend_type = 2; //好友或者黑名单
}

message S2C_AddFriend{
	required uint32 ret = 1;
	optional uint32 friend_type = 2; //好友或者黑名单
	optional uint64 uid = 3; //玩家ID
}

//刪除好友
message C2S_DelFriend{
	required uint64 id = 1; //好友UID
	required uint32 friend_type = 2; //好友类型 1 好友 2 黑名单
}

message S2C_DelFriend{
	required uint32 ret = 1;
	optional uint64 id = 2;
	optional uint32 friend_type = 3;
}

//接受或者拒绝好友请求
message C2S_ConfirmAddFriend{
	required uint64 id = 1; //好友ID
	required bool accept = 2;//是否接受好友 true 同意  false 拒绝
}

message S2C_ConfirmAddFriend{
	required uint32 ret = 1;
	optional bool accept = 2; //是否接受好友 true 同意  false 拒绝
	optional uint64 id = 3 ;
}

message S2C_FriendRespond {
}

//赠送好友礼物
message C2S_FriendPresent {
	required uint64 id = 1; //好友ID
}

message S2C_FriendPresent {
	required uint32 ret = 1;
	repeated uint64 id = 2;// 好友ID
}

//领取好友禮物
message C2S_GetFriendPresent {
	required uint64 id = 1;// 好友ID  0 表示一键领取 > 0 领取某个玩家
}

message S2C_GetFriendPresent {
	required uint32 ret = 1;
	repeated uint64 uid = 2; //一键领取情况下 实际领取哪些玩家的体力
}

//推荐好友
message C2S_RecommandFriend {
}

message S2C_RecommandFriend {
	required uint32 ret = 1;
	repeated Friend friends = 2;//推荐好友列表
}


//!获取当前充值返利信息
message C2S_GetCurrentRechargeRebate {
}

//!获取当前充值返利信息
message S2C_GetCurrentRechargeRebate {
	required uint32 ret = 1;
	optional RechargeRebate rebates = 2;
}


message C2S_GetRechargeRebateInfo {
}


message RechargeRebate {
	required string serverName = 1;       //服务器名称
	required string money = 2;    //充值金额
	required uint32 returnMoney = 3;   //返利元宝
	required uint32 returnVipExp = 4;   //返利VIP经验
}

message S2C_GetRechargeRebateInfo {
	required uint32 ret = 1;
	optional uint32 start_time = 2;
	optional uint32 end_time = 3;
	repeated RechargeRebate rebates = 4;
	optional uint32 is_taken = 5;	//是否已领取
}

message C2S_GetRechargeRebateAward {
}

message S2C_GetRechargeRebateAward {
	required uint32 ret = 1;
	repeated Award award = 3;
}



message BetaCompActivity {
	required uint32 type = 1;
	required uint32 start_time = 2;
	required uint32 end_time = 3;
}

message C2S_BetaCompInfo {
}

message S2C_BetaCompInfo {
	required uint32 ret = 1;
	repeated BetaCompActivity infos = 2; //活动信息
	repeated uint32 ids = 3;
}

message C2S_BetaCompAward {
	required uint32 id = 1;
}

message S2C_BetaCompAward {
	required uint32 ret = 1;
	required uint32 id = 2;
	repeated Award awards = 3;
}


message OpenRedBagUser {
	required uint64 user_id = 1;//user_id
	required string user_name = 2;//user_name
	required uint32 get_money = 3;//抢到的钱
}

message GuildRedBagInfo {
	required uint64 id = 1;//红包唯一id
	required uint32 red_bag_id = 2;//红包表id
	required uint32 total_money = 3;//累计金额
	required uint32 multiple = 4;//倍数
	required uint64 user_id = 5;//所属玩家id
	required string user_name = 6;//所属玩家name
	required uint32 base_id = 7;//所属玩家id
	required uint32 avatar_base_id = 8;//所属玩家id
	required uint32 red_bag_state = 9;//红包领取状态 1：未发出 2:已领取 3：位领取
	required uint32 red_bag_sum = 10; //红包总数量
}

message C2S_GetGuildRedBagList {}

message S2C_GetGuildRedBagList {
	required uint32 ret = 1;
	repeated GuildRedBagInfo red_bag_list = 2;
}
message C2S_OpenGuildRedBag {
	required uint64 id = 1;//红包唯一id
}

message S2C_OpenGuildRedBag {
	required uint32 ret = 1;
	optional uint64 id = 2;//红包唯一id
	optional uint32 count = 3;//红包数量
	repeated OpenRedBagUser red_bag_list = 4;
}

message C2S_PutGuildRedBag {
	required uint64 id = 2;//红包唯一id
	required uint32 multiple = 3;
}

message S2C_PutGuildRedBag {
	required uint32 ret = 1;
	required uint64 id = 2;
}
message S2C_GuildRedBagRespondNew {
	required GuildRedBagInfo new_bag = 1;
}
message S2C_GuildRedBagRespondDel {
	required uint64 id = 1;
}

message C2S_GuildDonate {
	required uint32 id = 1;//
}

message S2C_GuildDonate {
	required uint32 ret = 1;
	required uint32 id = 2;
	optional bool crit = 3;//暴击
	repeated Award award = 4;
}
message C2S_GetGuildDonateReward {
	required uint32 id = 1;//
}

message S2C_GetGuildDonateReward {
	required uint32 ret = 1;
	required uint32 id = 2;
	repeated Award award = 4;
}
message C2S_GuildChangeName {
	optional string name = 1;
}

message S2C_GuildChangeName {
	optional uint32 ret = 1;
}

message C2S_SendClientLog {
	optional string logStr = 1;
}

message S2C_SendClientLog {
	required uint32 ret = 1;
	optional string logStr = 2;
}
message C2S_EnterGuildAnswer {
}


message S2C_EnterGuildAnswer {
	required uint32 ret = 1;
	repeated guildAnswerQuestion questions = 2;//所有的问题和答案
	repeated IntMap answers = 3;//这个里边是答过的答案
	optional bool can_answer  = 4;//
	repeated guildAnswerRank answer_rank = 5;//自己公会答题时间段的公会积分排名
	optional GuildAuctionEndNotice  end_notice= 6;//
	repeated GuildMemberAnsewerPoint member_point = 7;//军团成员自己的积分
	repeated Award now_rand_item =8;//当前随机出的物品
}
message C2S_AnswerGuildQuestion {
	required uint32 question_no = 1;//
	required uint32 answer_id = 2;//
}

message S2C_AnswerGuildQuestion {
	required uint32 ret = 1;
	optional uint32 question_no = 2;//
	optional uint32 answer_id = 3;//
	repeated Award reward = 4;//
}
///////////////////////////////////////////////

// 游戏状态
enum GuildAnswerState{
	ANSWER_STATE_INIT = 0;	  // 系统初始化
	ANSWER_STATE_IDLE = 1;	  // 系统未开启
	ANSWER_STATE_READY = 2;	  // 准备中
	ANSWER_STATE_PLAYING = 3; // 游戏中
	ANSWER_STATE_RESTING = 4; // 休息中
}
// 答题系统玩家信息
message GuildAnswerPlyInfo{
	required uint64 user_id = 1;
	optional string name = 2;	//名字
	optional uint32 level = 3;
	optional uint32 base_id = 4;
	optional uint32 avatar_base_id = 5;
	optional uint32 side = 6;		    // 答题站边
	optional uint64 guild_id = 7;		    //
	optional string guild_name = 8;		    //
}
message guildAnswerQuestion {
	required uint32 question_no = 1;
	required uint32 question_id = 2;
	repeated string questions = 3;
	required uint32 right_answer = 4;  //从1开始
	optional string question_param = 5;//问题参数
}
message guildAnswerRank {
    optional uint64 guild_id = 1;
	optional uint32 rank 	= 2;
	optional string name 	= 3;
	optional uint32 point 	= 4;
}

// 答题系统状态变更
message S2C_GuildAnswerSysNotify{
	optional GuildAnswerState state = 1;			// 状态
	optional uint32 stateEndTime = 2;				// 状态结束时间
	optional guildAnswerQuestion question = 3;	    // 下题目-里面有答案
}
// 更改答案全服广播
message S2C_GuildAnswerChangeNotify{
	repeated GuildAnswerPlyInfo update_player = 1;	// 更新玩家答案或者插入玩家
	repeated uint64 del_player = 2;	// 删除玩家
	optional uint32 utype = 3;		// 增加或者重置
}

message C2S_EnterNewAnswer{}

message S2C_EnterNewAnswer{
	required uint32 ret = 1;
	optional uint32 start_time =2;//开始时间
	optional GuildAnswerState state = 3;	// 状态
	optional uint32 stateEndTime = 4;		// 状态结束时间
	repeated GuildAnswerPlyInfo cur_player = 5;	// 玩家列表
	optional guildAnswerQuestion curQuestion = 6;//
	repeated guildAnswerRank answer_rank = 7;//自己公会答题时间段的公会积分排名
	repeated GuildMemberAnsewerPoint member_point = 8;//军团成员自己的积分
}



// 更改答案req
message C2S_GuildAnswerChange{
	required uint32 answer = 1;
}
// 更改答案resp
message S2C_GuildAnswerChange{
	required uint32 ret = 1;
}

message S2C_GetGuildNewAnswer{
	optional uint32 start_time =1;//开始时间
	repeated Award now_rand_item =2;//当前随机出的物品
}

message S2C_GuildNewAnswerPublic{
	repeated guildAnswerRank answer_rank = 1;//自己公会答题时间段的公会积分排名
	repeated GuildMemberAnsewerPoint member_point = 2;//军团成员自己的积分
}

message S2C_GuildAnswerPublic {
	repeated guildAnswerRank answer_rank = 1;//自己公会答题时间段的公会积分排名
	repeated GuildMemberAnsewerPoint member_point = 2;//军团成员自己的积分
}
message GuildAuctionEndNotice {
	repeated KvPair sys_notice =1;
}
message GuildMemberAnsewerPoint {
	required uint64 user_id = 1;//
	required string user_name = 2;//
	required uint32 point = 3;//
}
message S2C_GetGuildAnswer {
	repeated Award now_rand_item =1;//当前随机出的物品
	optional uint32 start_time =2;//开始时间
}

//pvp矿

message S2C_SendMineInfo {
	optional uint32 mine_id = 1;
	optional uint32 self_last_time = 2;
}
message S2C_SysMineOwn {
	required uint32 mine_id = 1;
}

message C2S_EnterMine {
	required uint32 mine_id = 1;
}

message S2C_EnterMine {
	required uint32 ret = 1;
	optional uint32 mine_id = 2;
	repeated MineUser mine_users =3;//这个矿所有的人
	optional bool  is_begin =4;
	optional bool  is_end =5;
}

message MineUser {
	required uint64 user_id = 1;//
	optional string user_name = 2;//
	optional uint64 guild_id = 3;//
	optional string guild_name = 4;//
	optional uint32 army_value = 5;// 兵力
	optional uint32 mine_id = 6;// 矿坑id
	optional uint32 tired_value = 7;// 疲劳值
	optional uint32 officer_level = 8;// 官衔
	optional uint32 base_id = 9;// base
	optional uint64 power = 10;// 战力
	optional uint32 guild_level = 11;//
	optional uint32 guild_exp = 12;//
	repeated uint32 buff_id = 13;// buff
	optional uint32 avatar_base_id = 14;//所属玩家id
	optional uint32 old_mine_id = 15;// 矿坑id
	optional uint32 level = 16;//等级
	optional uint32 guild_icon = 17;//旗子
	optional uint32 title = 18;//称号
	optional uint32 privilege_time = 19;//特权到期时间

}
message C2S_SettleMine {
	repeated uint32 mine_id = 1;//矿坑id
}

message S2C_SettleMine {
	required uint32 ret = 1;
}
message C2S_BattleMine {
	required uint64 user_id = 1;//
}

message S2C_BattleMine {
	required uint32 ret = 1;
	optional MineFight mine_fight=2;
	optional MineUser tar_mine_user =3;
}
message C2S_BattleMineFast {
	required uint64 user_id = 1;//
	required uint32 num = 2;//
}

message S2C_BattleMineFast {
	required uint32 ret = 1;
	required uint32 num = 2;//
	repeated MineFight mine_fight=3;
	optional MineUser tar_mine_user =4;
}
message C2S_MineBuyArmy {
	required uint32 num = 1;//
}

message S2C_MineBuyArmy {
	required uint32 ret = 1;
	optional uint32 num = 2;//
}


message MineFight {
	optional uint64 battle_report = 1;//战报(只会在战一次的时候传)
	optional uint32 self_begin_army= 2;
	optional uint32 self_red_army = 3;
	optional uint32 self_star = 4;
	optional uint32 tar_begin_army = 5;
	optional uint32 tar_red_army = 6;
	optional uint32 self_reborn_mine = 7;
	optional uint32 tar_reborn_mine = 8;
	optional bool self_is_die = 10;//自己是否死亡
	optional bool tar_is_die = 11;//对方是否死亡
	optional bool tar_is_privilege = 12;//对方是特权
}

message S2C_MineRespond {
	repeated MineWorld change_world_mine = 1; //变化的世界上的坑
	repeated MineUser replace_mine_user = 2; //变化的坑里的玩家
	optional uint32 self_money = 3;// 自己累积产出的银两
	optional uint32 self_last_produce_time = 4;// 自己上次产出结算时间
	optional uint32 self_last_time = 5;// 上次收获时间
	optional uint32 self_mine_id = 6;// 自己的所在位置
	optional uint32 self_army_value = 7;// 自己的兵力
	optional uint32 self_privilege_time = 8;// 特权到期时间
}
//pvp矿战战报
message MineReport {
	optional uint32 base_id = 1; //对方的base
	optional uint32 avatar_base_id = 2; //对方的base
	optional uint32 level = 3; //对方的等級
	optional uint32 fight_time = 4;//战斗时间
	optional string name = 5;//对方的名字
	optional uint32 officer_level = 6;//对方的官衔
	optional uint64 power = 7;//对方的战力
	optional uint64 uid = 8; //对方id
	optional uint32 win_type = 9;//胜利情况 0 是失败 非零是星星数
	optional uint32 self_dec_army = 10;//自己军队减少值
	optional uint32 tar_dec_army = 11;//对方军队减少值
	optional bool self_is_die = 12;//自己是否死亡
	optional bool tar_is_die = 13;//对方是否死亡
	optional uint64 report_id = 14; //reportid
	optional uint32 report_type = 15;//1:进攻2:防守
	optional uint32 self_army = 16;//自己剩余兵力
	optional uint32 tar_army = 17;//对方剩余兵力
	optional bool   self_is_privilege = 18;//自己是否特权
	optional bool   tar_is_privilege = 19;//自己是否特权
}
message C2S_GetMineWorld {
}

message S2C_GetMineWorld {
	required uint32 ret = 1;
	repeated MineWorld mine_info = 2;
	optional uint32 self_money = 3;// 自己累积产出的银两
	optional uint32 self_last_produce_time = 4;// 自己上次产出结算时间
	optional uint32 self_last_time = 5;// 上次收获时间
	optional uint32 self_mine_id = 6;// 自己的所在位置
	optional uint32 self_army_value = 7;// 自己的兵力
	optional uint32 self_privilege_time = 8;// 特权到期时间
}
message MineWorld {
	required uint32 mine_id = 1;
	optional uint64 guild_id = 2;
	optional string guild_name = 3;
	optional uint32 user_cnt = 4;
	optional bool is_own = 5;
	optional uint32 guild_icon = 6;
	optional uint32 multiple = 7;//小于2就是正常 大于等于2就是这个倍的速率
}
message C2S_ChangeMineGuildBorn {
	required uint32 district_id = 1;
}

message S2C_ChangeMineGuildBorn {
	required uint32 ret = 1;
	optional uint32 district_id = 2;
}
message MineSystemNotify {
	required uint32 sn_type = 1;
	repeated KvPair content =2;
	optional uint32 time = 3;
}
message C2S_GetMineSysNotice {}

message S2C_GetMineSysNotice {
	required uint32 ret = 1;
	repeated MineSystemNotify notices = 2;
}
message S2C_SendMineSysNotice {
	optional MineSystemNotify notices = 1;
}
message C2S_GetMineMoney {}

message S2C_GetMineMoney {
	required uint32 ret = 1;
	repeated Award  award = 2;
	optional uint32 self_money = 3;// 自己累积产出的银两
	optional uint32 self_last_produce_time = 4;// 自己上次产出结算时间
	optional uint32 self_last_time = 5;// 上次收获时间
}
message C2S_GameShare {}
message C2S_GameAdmit {
	required string real_name = 1;
	required string birthday = 2;
	required string phone = 3;
	required string qq = 4;
}
message S2C_GameAdmit {
	required uint32 ret = 1;
}

message C2S_LoadSGSCodeRecord {
}

message SGSCodeRecord {
	optional uint32 open_server_day = 1;
	optional string code = 2;
}

message S2C_LoadSGSCodeRecord {
	required uint32 ret = 1;
	required uint32 status = 2; // 0:没有领取资格 1:有领取资格
	repeated SGSCodeRecord records = 3;
	optional uint32 game_id = 4;// 1:手机三国杀 2:三国杀OL
	optional uint32 begin_time = 5;// 活动开始时间
	optional uint32 end_time = 6;// 活动结束时间
}

message C2S_TakeSGSCode {
	required uint32 open_server_day = 1;
}

message S2C_TakeSGSCode {
	required uint32 ret = 1;
	optional uint32 open_server_day = 2;
	optional string code = 3;
}

message C2S_GetWeChatBindCode {
}

message S2C_GetWeChatBindCode {
	required uint32 ret = 1;
	optional string bind_code = 2;
}

message S2C_GetWeChatBindInfo {
	required uint32 ret = 1;
	optional uint32 is_bind = 2; //!是否绑定 已绑定:1 未绑定:0
}

message C2S_FastGrowTest {
}

message S2C_FastGrowTest {
	required uint32 ret = 1;
	optional S2C_OpObject OpObject = 2;
}

message OnlyObjects {
	required uint32 object_type = 1;
	required uint64 object_id	= 2;
}

message C2S_SellOnlyObjects {
	repeated OnlyObjects objects = 1;
}

message S2C_SellOnlyObjects {
	required uint32 ret = 1;
	repeated Award awards =2;
}
//仇人
message Enemy {
	required uint64 uid = 1;
	required string name = 2;
	required uint32 level = 3;
	required uint32 vip = 4;
	required uint64 power = 5; //战力
	required uint32 online = 6; //离线时间  0 表示在线  >0 离线
	optional uint32 base_id = 7;
	optional uint32 avatar_base_id = 8;
	optional string guild_name = 9; //公会名称
	optional uint32 office_level = 10;//官衔
	optional uint32 enemy_value = 11;//官衔
	optional string mine_name = 12;//矿区名字
	optional uint64 guild_id = 13; //公会名称
	optional uint32 head_frame_id = 14; //头像框
}
message C2S_GetEnemyList{}

message S2C_GetEnemyList{
	required uint32 ret = 1; //
	repeated Enemy enemys = 2; //
	optional uint32 enemys_cnt = 3; //复仇次数
}
message S2C_EnemyRespond {
}
message C2S_DelEnemy{
	required uint64 uid = 1;
}

message S2C_DelEnemy{
	required uint32 ret = 1; //
	optional uint64 uid = 2;
}
//复仇战报
message EnemyReport {
	optional uint32 fight_time = 1;//战斗时间
	optional uint64 tar_uid = 2;//对方uid
	optional string name = 3;//对方的名字
	optional bool win_type = 4;//胜利情况
	optional uint32 grap_value = 5;//抢夺自己精力数量
	optional uint32 officer_level = 6;//对方官衔

}
message C2S_EnemyBattle {
	required uint64 user_id = 1;
}
message S2C_EnemyBattle{
	required uint32 ret = 1;
	repeated Award awards = 2;
	optional uint64 report = 3;//战报
}
//三国战纪

message CountryBoss {
	optional uint32 boss_id = 1;//
	optional uint64 max_hp = 2;//
	optional uint64 now_hp = 3;//
	repeated CountryBossRank boss_rank =4;
	optional CountryBossRank self_rank =5;
}
message CountryBossRank {
	optional uint64 guild_id = 1;
	optional uint32 hurt_rate = 2;
	optional string guild_name = 3;
	optional uint32 rank = 4;
}
message C2S_EnterCountryBoss {
}
message S2C_EnterCountryBoss{
	required uint32 ret = 1;
	optional uint32 challenge_boss_time1 = 2;//打小boss时间
	optional uint32 challenge_boss_time2 = 3;//打大boss时间
	optional uint32 challenge_boss_user = 4;//打玩家时间
	repeated CountryBoss country_boss = 5;
	repeated CountryBossVote boss_vote = 6;//
	optional uint32 self_vote = 7;//
	optional uint32 final_vote = 8;//
	optional uint32 ahead_time1 = 9;// //如果值为0表示没有提前
	optional uint32 ahead_time3 = 10;//整个活动提前结束时间
}
message C2S_AttackCountryBoss {
	required uint32 boss_id = 1;
}
message S2C_AttackCountryBoss{
	required uint32 ret = 1;
	optional BattleReport report = 2;//战报
	optional uint64 hurt = 3;//造成伤害
	optional uint32 challenge_boss_time1 = 4;//打小boss时间
	optional uint32 challenge_boss_time2 = 5;//打大boss时间
}
message C2S_GetMaxCountryBossList {
	required uint32 boss_id = 1;
}
message S2C_GetMaxCountryBossList{
	required uint32 ret = 1;
	repeated SimpleUser users=2;
}

message CountryBossVote {
	optional uint32 boss_id = 1;//
	optional bool is_kill = 2;//
	optional uint32 vote = 3;//

}



message C2S_CountryBossVote {
	required uint32 boss_id = 1;
}
message S2C_CountryBossVote{
	required uint32 ret = 1;
	optional uint32 boss_id = 2;
}

message C2S_InterceptCountryBossList {
	required uint32 boss_id = 1;
}

message InterceptCountryBossInfo {
	required uint64 user_id = 1;
	required string name = 2;
	required uint64 power = 3;
	required uint32 office_level = 4;
	required string guild_name = 5;
	required uint32 base_id =6;
	repeated uint32 hero_base_id =7;
	optional uint32 title =8;
	optional uint32 avatar_base_id =9;
}
message S2C_InterceptCountryBossList {
	required uint32 ret = 1;
	repeated InterceptCountryBossInfo list = 2;
}

message C2S_InterceptCountryBossUser {
	required uint64 user_id = 1;
	required uint32 boss_id = 2;
}
message S2C_InterceptCountryBossUser{
	required uint32 ret = 1;
	optional uint64 report = 2;//战报
	optional uint32 challenge_boss_user = 3;//打玩家时间
}
message S2C_SyncCountryBoss{
	repeated CountryBoss country_boss = 1;
	optional uint32 ahead_time1 = 2;// //如果值为0表示没有提前
	optional uint32 ahead_time3 = 3;// 整个活动提前结束时间
}
message S2C_SyncCountryBossVote{
	optional CountryBossVote boss_vote = 1;//
	optional uint32 final_vote = 2;//
}
message S2C_SyncCountryBossUser{
	optional uint32 challenge_boss_time2 = 1;//
}
message S2C_SyncCountryBossTime{
	optional uint32 ahead_time1 = 1;// //如果值为0表示没有提前
	optional uint32 ahead_time3 = 2;// 整个活动提前结束时间
}


message HomeTree {
	optional uint32 tree_id = 1;
	optional uint32 tree_level = 2;
	optional uint32 tree_exp = 3;
}

message HomeTreeManager {
	optional uint32 last_start_time = 1;
	optional uint32 last_harvest_time = 2;
	optional uint32 total = 3;
}

message C2S_GetHomeTree {

}

message S2C_GetHomeTree {
	optional uint32 ret = 1;
	repeated HomeTree home_trees = 2;
	optional HomeTreeManager home_manager = 3;
}

message S2C_UpdateHomeTree {
	optional HomeTree home_tree = 1;
}

message S2C_UpdateHomeTreeManager {
	optional HomeTreeManager home_tree_manager = 1;
}

message C2S_HomeTreeUpLevel {
	optional uint32 id = 1;
}

message S2C_HomeTreeUpLevel {
	optional uint32 ret = 1;
	optional uint32 id = 2;
	repeated uint32 open_trees = 3;
}

message C2S_HomeTreeHarvest {

}

message S2C_HomeTreeHarvest {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

message C2S_VisitFriendHome {
	optional uint64 friend_id = 1;
}

message S2C_VisitFriendHome {
	optional uint32 ret = 1;
	optional uint64 friend_id = 2;
	repeated HomeTree home_trees = 3;
}

message SevenDaySprintInfo {
	optional uint32 id = 1; // id
	optional uint32 sprint_type = 2;  // 类型
	optional string name = 3; // 活动名称
	optional uint32 function_id = 4; // 开启等级
	optional uint32 is_work = 5; // 是否生效
	optional uint32 open_day = 6; // 开启时间
	optional uint32 over_day = 7; // 结束时间
	optional uint32 over_view_day = 8; // 结束后显示时间
	optional uint32 order = 9; // 页签排序
	optional string activity_content_text = 10; // 活动内容文本
}

message S2C_GetSevenDaySprintInfo {
	repeated SevenDaySprintInfo sprint_info = 1;
}

message PlayHorseHero {
	optional uint64 hero_id = 1;		// 英雄id  或 玩家排名
	optional uint32 hero_win_rate = 2;	// 英雄胜率
	optional uint32 hero_bet_rate = 3;	// 英雄投注率
	optional uint32 hero_odds = 4; // 英雄赔率
	optional uint32 road_num = 5; // 跑道信息
	optional uint32 is_palyer = 6; // 是否玩家
	optional UserBaseInfo user = 7; // 玩家简单信息
	optional uint32 power_rank = 8; // 战力排名
}

message PlayHorseHistoryMatch {
	optional uint64 hero_id = 1;
	optional uint32 use_time = 2;
	optional uint32 odds = 3;
	optional uint32 rank = 4;
	optional uint32 is_player = 5;
	optional UserBaseInfo user = 6; // 玩家简单信息
}

message PlayHorseHistory {
	optional uint64 hero_id = 1; // 英雄id
	optional uint32 hero_grade = 2; // 历史成绩
}

message PlayHorseUserBetInfo {
	optional uint64 hero_id = 1; // 英雄
	optional uint32 bet_num = 2; // 押注数量
}

// 跑马信息
message C2S_PlayHorseInfo {
}

message S2C_PlayHorseInfo {
	required uint32 ret = 1;
	optional uint32 start_time = 2;  // 活动开启时间
	optional uint32 end_time = 3;    // 活动结束时间
	optional uint32 match_end = 4; 	// 跑步结束时间
	optional uint32 bet_end = 5;     // 下注结束时间
	optional uint32 match_start = 6; // 比赛开始时间
	optional uint32 open_times = 7; // 开启次数
	repeated PlayHorseHero bet_info = 8; // 押注信息
	repeated PlayHorseHistory histroy = 9; // 历史成绩
	repeated PlayHorseHistoryMatch last_match_info = 10;
	repeated PlayHorseUserBetInfo user_bet = 11; // 玩家下注信息
}

// 跑马押注
message C2S_PlayHorseBet {
	required uint64 hero_id = 1;
	required uint32 num = 2;
}

message S2C_PlayHorseBet {
	required uint32 ret = 1;
	repeated PlayHorseUserBetInfo user_bet = 2; // 玩家下注信息
	repeated PlayHorseHero bet_info = 3;
}

message PlayHorseMatchInfo {
	optional uint64 hero_id = 1;
	repeated uint32 use_time = 2;
	optional uint32 rank = 3;
}

// 比赛结果信息
message C2S_PlayHorseResult {

}

message S2C_PlayHorseResult {
	required uint32 ret = 1;
	optional uint64 win_hero = 2;
	repeated PlayHorseMatchInfo match_info = 3;
}
message PlayHorseBetInfo {
	optional uint64 hero = 1;
	optional uint32 bet_rate = 2;
}

message S2C_PlayHorseBetNotice {
	required uint32 ret = 1;
	repeated PlayHorseBetInfo bet_info = 2;
}

message TitleInfo {
	optional uint32 title_id = 1;
	optional int64 expire_time = 2;
}

message C2S_TitleInfo {

}

message S2C_TitleInfo {
	optional uint32 ret = 1;
	repeated TitleInfo title_info = 2;
}



//军团战
message GuildWarWatch {
	optional uint32 city_id = 1;
	optional uint32 point_id = 2; //据点id
	optional uint32 watch_value = 3;//建筑物血量值
}

message GuildWarRankValue {
	optional uint32 city_id = 1;
	optional uint64 guild_id = 2; //
	optional string guild_name = 3; //
	optional uint32 hurt = 4;//伤害
}

message GuildWarCity {
	optional uint32 city_id = 1;
	optional uint64 own_guild_id = 2; //占领的公会id
	optional string own_guild_name = 3;//占领的公会name
	optional uint32 own_guild_icon = 4;//占领的公会旗子
	optional bool is_declare = 5;//是否已经宣战
	optional uint32 declare_guild_num = 6;//已经宣战数量
}
message GuildWarNotice {
	optional string guild_name = 1;
	optional string user_name = 2; //
	optional uint32 point_id = 3;//
}

message GuildWarUser {
	optional uint32 city_id = 1;
	required uint64 user_id = 2;//
	optional string user_name = 3;//
	optional uint64 guild_id = 4;//
	optional string guild_name = 5;//
	optional uint32 old_point = 6;// 旧的据地id
	optional uint32 now_point =7;// 现在的据点id
	optional uint32 move_time = 8;// 移动时间
	optional uint32 challenge_time = 9;// 挑战时间
	optional uint32 challenge_cd  = 10;// 挑战cd
	optional uint32 officer_level = 11;// 官衔
	optional uint64 power = 12;// 战力
	optional uint32 avatar_base_id = 13;//
	optional uint32 war_value = 14;// 体力值
	optional uint32 base_id = 15;//
	optional uint32 guild_icon = 16;
	optional uint32 pk_type = 17; //1 攻击  2 防守
	optional uint32 born_point_id = 18; //出生点的pointid
	optional uint32 relive_time = 19; //复活时间
}


message C2S_GetGuildWarWorld {}

message S2C_GetGuildWarWorld {
	required uint32 ret = 1;
	repeated GuildWarCity war_city = 2;
	optional uint32 in_city_id = 3;//自己在那个城  0就不存在任何城
}
message C2S_EnterGuildWar {
	required uint32 city_id =1;
}

message S2C_EnterGuildWar {
	required uint32 ret = 1;
	optional uint32 city_id = 2;
	repeated GuildWarUser war_user = 3;
	repeated GuildWarWatch watcher =4;
	repeated GuildWarRankValue rank_list =5;
	optional uint64 battle_own_guild_id = 6;
	optional string battle_own_guild_name = 7;

}
message C2S_MoveGuildWarPoint {
	required uint32 point_id =1;
}

message S2C_MoveGuildWarPoint {
	required uint32 ret = 1;
	optional uint32 point_id = 2;
}


message S2C_SyncGuildWar {
	required uint32 city_id = 1;
	repeated GuildWarUser insert_user = 2;
	repeated GuildWarUser update_user = 3;
	repeated uint64 delete_user = 4;//
	optional GuildWarWatch watcher =5;
	optional GuildWarRankValue rank_value =6;
	optional GuildWarNotice war_notice = 7;
	optional uint64 battle_own_guild_id = 8;
	optional string battle_own_guild_name = 9;
}
message S2C_SyncGuildWarWorld {
	repeated GuildWarCity war_city =1;

}


message C2S_GuildWarBattleWatch {
	required uint32 point_id =1;
}

message S2C_GuildWarBattleWatch {
	required uint32 ret = 1;
	optional uint32 point_id = 2;
	optional uint32 city_id =3;
}

message C2S_GuildWarBattleUser {
	required uint64 user_id =1;
}

message S2C_GuildWarBattleUser {
	required uint32 ret = 1;
	optional uint64 user_id =3;
	optional string user_name =4;
	optional uint32 city_id =5;
	optional bool is_kill = 6;
	optional bool is_win = 7;
	optional bool is_be_kill = 8;
}


message C2S_GuildWarDeclareCity {
	required uint32 city_id =1;
}

message S2C_GuildWarDeclareCity {
	required uint32 ret = 1;
	optional uint32 city_id = 2;
}

message GuildWarMemberData {
	optional uint64 user_id = 1;
	optional string user_name = 2;
	optional uint32 officer_level = 3;
	repeated IntMap war_data = 4;//1:击杀次数 2:死亡次数3:攻打城门4:攻打龙柱5:军团贡献
}

message C2S_GuildWarData {
}

message S2C_GuildWarData {
	required uint32 ret = 1;
	repeated GuildWarMemberData member_data = 2;
}
message S2C_GuildWarNotice {
	optional string user_name = 1;
	optional bool is_kill = 2;
	optional bool is_win = 3;
	optional bool is_be_kill = 4;
}

message UserBaseInfo {
	optional uint32 title = 1;
	optional uint64 user_id = 2;
	optional uint32 base_id = 3;
	optional uint64 avatar_id = 4;
	optional uint32 avatar_base_id = 5;
	optional string name = 6;
	optional uint32 office_level = 7;
	optional uint32 level = 8;
	optional uint64 power = 9;
	optional string guild_name = 10;
	optional bool is_friend = 11;
	optional uint32 head_frame_id = 12;
}

message C2S_GetMultiUserBaseInfo {
	repeated uint64 user_ids = 1;
}

message S2C_GetMultiUserBaseInfo {
	optional uint32 ret = 1;
	repeated UserBaseInfo infos = 2;
}




message C2S_HeroLimitLvPutRes {
	required uint64 hero_id =1;
	required uint32 pos =2;
	repeated Item sub_item= 3;
}

message S2C_HeroLimitLvPutRes {
	required uint32 ret = 1;
	optional uint32 pos =2;
}

message C2S_HeroLimitLvUp {
	required uint64 hero_id =1;
}

message S2C_HeroLimitLvUp {
	required uint32 ret = 1;
}
message S2C_UpdateRechargeReset {
	optional uint32 id = 1;
	repeated uint32 date =2;
}

//	ID_C2S_WarHorseUpgrade = 32200; // 升星
message C2S_WarHorseUpgrade {
	required uint64 horseId = 1;
	optional uint32 times = 2;
}
//	ID_S2C_WarHorseUpgrade = 32201;
message S2C_WarHorseUpgrade {
	optional uint32 ret = 1;
}
//	ID_C2S_WarHorseReclaim = 32202; // 分解
message C2S_WarHorseReclaim {
	repeated uint64 horseId = 1;
}
//	ID_S2C_WarHorseReclaim = 32203;
message S2C_WarHorseReclaim {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}
//	ID_C2S_WarHorseFit = 32204; // 装备
message C2S_WarHorseFit {
	required uint64 horseId = 1;
	required uint32 pos = 2;
}
//	ID_S2C_WarHorseFit = 32205;
message S2C_WarHorseFit {
	optional uint32 ret = 1;
	optional uint32 pos = 2;
	optional uint64 id = 3;
	optional uint64 old_id = 4;
}

//	ID_C2S_WarHorseUnFit = 32206; // 卸载
message C2S_WarHorseUnFit {
	required uint32 pos = 1;
}
//	ID_S2C_WarHorseUnFit = 32207;
message S2C_WarHorseUnFit {
	optional uint32 ret = 1;
	optional uint32 pos = 2;
	optional uint64 old_id = 3;
}


//	ID_C2S_WarHorseInfo = 32208; // 战马信息
message C2S_WarHorseInfo {

}

message WarHorseData {
	required uint64 id = 1;
	required uint32 base_id = 2;
	optional uint32 star = 3;
	repeated uint64 equip = 4;
}

message WarHorseEquipData {
	required uint64 id = 1;
	required uint32 base_id = 2;
	required uint64 horse_id = 3;
}

//	ID_S2C_WarHorseInfo = 32208;
message S2C_WarHorseInfo {
	optional uint32 ret = 1;
	repeated WarHorseData datas = 2;
}

message S2C_GetHorseEquip {
	optional uint32 ret = 1;
	repeated WarHorseEquipData datas = 2;
}

message C2S_ActiveWarHorsePhoto {
	optional uint32 id = 1;
}

message S2C_ActiveWarHorsePhoto {
	optional uint32 ret = 1;
}


//	ID_C2S_WarHorseReborn = 32210; // 战马重生
message C2S_WarHorseReborn {
	required uint64 id = 1;
}

//	ID_S2C_WarHorseReborn = 32211;
message S2C_WarHorseReborn {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

//	ID_C2S_WarHorseDraw = 32212; // 相马
message C2S_WarHorseDraw {
	optional uint32 num = 1;
}
//	ID_S2C_WarHorseDraw = 32213;
message S2C_WarHorseDraw {
	optional uint32 ret = 1;
	repeated Award awards = 2;
}

// 骑马信息
message WarHorseRideInfo {
	optional uint32 num = 1;	// 第几次骑马
	optional uint32 horse_soul = 2; // 马魂
	optional uint32 horse_book = 3; // 相马经
}

//	ID_C2S_WarHorseRide = 32214; // 骑马
message C2S_WarHorseRide {
	optional uint32 distance = 1; // 距离奖励
	optional uint32 score = 2; // 积分奖励
	optional int64 token = 3;
}

//	ID_S2C_WarHorseRide = 32215;
message S2C_WarHorseRide {
	optional uint32 ret = 1;
	optional WarHorseRideInfo ride_info = 2;
	repeated Award awards = 3;
}

//	ID_C2S_WarHorseRideInfo = 32216; // 骑马信息
message C2S_WarHorseRideInfo {
}

//	ID_S2C_WarHorseRideInfo = 32217; // 骑马信息
message S2C_WarHorseRideInfo {
	optional uint32 ret = 1;
	optional WarHorseRideInfo ride_info = 2;
}

//	ID_C2S_WarHorseRideStart = 32218; // 骑马开始
message C2S_WarHorseRideStart {}
//	ID_S2C_WarHorseRideStart = 32219; // 骑马开始
message S2C_WarHorseRideStart {
	optional uint32 ret = 1;
	optional int64 token = 2;
}

//组队系统

message TeamUserInfo {
	optional uint64 user_id = 1;
	optional uint32 base_id = 2;
	optional uint32 avatar_base_id = 3;
	optional string name = 4;
	optional uint32 office_level = 5;
	optional uint32 level = 6;
	optional uint64 power = 7;
	optional string guild_name = 8;
	optional uint32 title = 9;
	optional uint32 head_frame_id = 10;
}
message TeamInfo {
	optional uint32 team_id = 1;//队伍id
	optional uint32 team_type = 2;//队伍类型
	optional uint32 team_target = 3;//队伍目标
	optional uint32 min_level = 4;//队伍等级限制
	optional uint32 max_level = 5;//队伍等级限制
	optional uint64 team_leader = 6;//队长
	repeated TeamMember members = 7;//成员
	optional bool is_scene = 8;//是否进入场景
}
message AppTeamInfo {
	optional uint32 team_id = 1;//队伍id
	optional uint32 app_time = 2;//申请时间
}
message TeamMember {
	optional TeamUserInfo user = 1;//
	optional uint32 team_no = 2;//几号位
}
message MyTeamInfo {
	optional TeamInfo team = 1;//
	optional bool team_auto  = 2;//是否自动加入
}
message C2S_GetTeamList {
	optional uint32 team_type = 1;//玩法id
}
message S2C_GetTeamList {
	required uint32 ret = 1;
	optional uint32 team_type = 2;//玩法id
	repeated TeamInfo teams = 3;
	repeated AppTeamInfo appteams = 4;

}
message S2C_UpdateTeamInfo {
	optional TeamInfo update = 1;
	optional uint32 del = 2;
	optional uint32 del_team_type = 3;

}
message S2C_UpdateTeamAppList {
	optional TeamUserInfo update = 1;
}
message C2S_CreateTeam {
	optional uint32 team_type = 1;//玩法id
}
message S2C_CreateTeam {
	required uint32 ret = 1;
	optional MyTeamInfo team = 2;
}
message S2C_UpdateMyTeam {
	optional MyTeamInfo team = 1;
	optional bool  is_online  =2;
}

message C2S_AppTeam {
	optional uint32 team_type = 1;//玩法id
	optional uint32 team_id = 2;//申请的队伍id 如果快速加入则为0
}
message S2C_AppTeam {
	required uint32 ret = 1;
	repeated uint32 app_team = 2;//已经申请的队伍的id
	optional uint32 team_id = 3;//申请的队伍id 如果快速加入则为0
	optional uint32 team_type = 4;//玩法id
}
message C2S_LeaveTeam {
	optional uint32 leave_type = 1;// 0:正常退出 1：队长解散
}
message S2C_LeaveTeam {
	required uint32 ret = 1;
	optional uint32 leave_type = 2;// 0:正常退出 1：队长解散
}
message C2S_ApproveTeam {
	required uint64 user_id = 1;
	optional uint32 op = 2;//1:同意 不为1 拒绝
}
message S2C_ApproveTeam {
	required uint32 ret = 1; //
	optional uint64 user_id = 2;//如果不为0就把对应的删掉
	optional uint32 op = 3;//1:同意 不为1 拒绝
}
message C2S_ChangeTeamSet {
	optional uint32 team_target = 1;//队伍目标
	optional uint32 min_level = 2;//队伍等级限制
	optional uint32 max_level = 3;//队伍等级限制
	optional bool team_auto  = 4;//是否自动加入
}
message S2C_ChangeTeamSet {
	required uint32 ret = 1;
	optional uint32 team_target = 2;//队伍目标
	optional uint32 min_level = 3;//队伍等级限制
	optional uint32 max_level = 4;//队伍等级限制
	optional bool team_auto  = 5;//是否自动加入
}
//转让队长
message C2S_TransferLeader {
	optional uint64 user_id = 1;//
}
message S2C_TransferLeader {
	required uint32 ret = 1;
	optional uint64 user_id = 2;//
}
//申请带队
message C2S_AppTransferLeader {
}
message S2C_AppTransferLeader {
	required uint32 ret = 1;
}
//申请带队通知
message S2C_AppTransferLeaderNotice {
	optional uint64 user_id = 1;
	optional string user_name = 2;
}
//申请带队操作
message C2S_OpTransferLeader {
	optional uint64 user_id = 1;
	optional uint32 op = 2;//1:同意 2：拒绝
}
message S2C_OpTransferLeader {
	required uint32 ret = 1;
	optional uint64 user_id = 2;
	optional uint32 op = 3;//1:同意 2：拒绝
}
//邀请好友组队
message C2S_InviteJoinTeam {
	required uint64 user_id = 1;
}
message S2C_InviteJoinTeam {
	required uint32 ret = 1;
	optional uint64 user_id = 2;
}
//邀请好友组队通知
message S2C_InviteJoinTeamNotice {
	optional TeamUserInfo user = 1;
	optional uint32 team_id = 2;//队伍id
	optional uint32 team_type = 3;//队伍类型
	optional uint32 team_target = 4;//队伍目标
}
//审批邀请好友组队
message C2S_OpInviteJoinTeam {
	optional uint64 user_id = 1;
	optional uint32 op = 2;//1:同意 2：拒绝
	optional uint32 team_id = 3;//队伍id
}
message S2C_OpInviteJoinTeam {
	required uint32 ret = 1;
	optional uint32 op = 2;//1:同意 2：拒绝
	optional uint32 team_id = 3;//队伍id
}
message S2C_TeamTips {
	optional uint32 tips_type = 1;
	//1:被踢出队伍（param 1 自己时间不足） 2:拒绝申请带队 3:队伍被解散 （param 2 整个活动结束）4：拒绝入队申请 5:xxx拒绝了您的组队邀请 6:xxx接受了您的组队邀请（不显示 只消邀请） 7:xxx成功加入队伍 8：xxx时间不足加入失败9：进入皇陵时间减少10：您已成功接任队长11：您已成功移交队长
	optional string user_name = 2;
	optional uint64 user_id = 3;
	optional uint32 param = 4;
}

message C2S_TeamEnterScene {
	optional uint32 team_type = 1;//玩法id
}
message S2C_TeamEnterScene {
	required uint32 ret = 1;
	optional uint32 team_type = 2;//玩法id
}
message EnterSceneState {
	optional TeamMember member = 1;//
	optional bool state = 2;//是否确认
}

message S2C_UpdateEnterSceneState {
	repeated EnterSceneState member_state = 1;
	optional uint32 team_target = 2;//队伍目标
	optional bool first = 3;//
}
message C2S_OpEnterScene {
	optional uint32 op = 1;//1:同意 2：拒绝
}
message S2C_OpEnterScene {
	required uint32 ret = 1;
	optional uint32 op = 2;//1:同意 2：拒绝
}
message C2S_TeamKick {
	optional uint64 user_id = 1;//
}
message S2C_TeamKick {
	required uint32 ret = 1;
	optional uint64 user_id = 2;//
}
message C2S_TeamChangeMemberNo {
	optional uint32 old_no = 1;//
	optional uint32 new_no = 2;//
}
message S2C_TeamChangeMemberNo {
	required uint32 ret = 1;
}
message InviteInfo {
	required uint64 user_id = 1;
	required uint32 invite_time = 2;
}

message S2C_SyncInviteList {
	repeated InviteInfo invite_list = 1;
}
message S2C_SyncAppTeamList {
	repeated AppTeamInfo app_team_list = 1;
}

//先秦皇陵
message GraveTeam {
	optional TeamInfo  team_info= 1;
	repeated uint32  path =2;
	optional uint32  begin_time =3;
	optional uint32  need_time =4;
	optional uint32  reborn_time =5;
}
message GraveMonster {
	optional uint32 point_id = 1;
	optional uint32 monster_type = 2;//1:普通 2精英
	optional uint32 begin_time = 3; //剩余时间left_time改变的时间
	optional uint32 left_time = 4;//怪物剩余多长时间
	optional uint32 own_team_id = 5; //
	optional uint32 battle_team_id = 6;
	optional uint32 stop_time = 7;//怪物血量停止倒计时时间 如果这有值 怪物血量倒计时停止并通过change_time left_time 算出怪物剩余时间
	optional uint32  reborn_time =8;
	optional uint32  speed =9;//速度
}
message GraveTeamMonument{
	optional uint32 point_id = 1;
	repeated TeamMember member =2;
	optional uint32 die_time =3;
	optional uint32 position =4; //1:攻击方2：防守方
}

message GraveRoundReport{
	optional uint32  team_no =1;
	optional TeamUserInfo attack =2;
	optional TeamUserInfo defense =3;
	optional uint32  result =4;//0是平局 1是输  2是赢
}
message GraveReport{
	repeated GraveRoundReport report =1;
	optional uint32  report_time  =2;
	optional bool  is_win =3;//这场战斗是否胜利
	optional uint32  report_type =4; //1:进攻战报 2： 防守战报
}
message C2S_GraveEnterScene {
}
message S2C_GraveEnterScene {
	required uint32 ret = 1;
	repeated GraveTeam teams = 2;
	repeated GraveMonster mosters =3;
	repeated GraveTeamMonument monuments =4;
	optional uint32  my_team_id  =5;
}
message S2C_UpdateGrave {
	optional GraveTeam team = 1;
	optional GraveMonster monster = 2;
	optional GraveTeamMonument add_monument = 3;
	optional uint32 del =4;
}
message C2S_GraveMove {
	repeated uint32  path =1;
	optional uint32 need_time =2;
}
message S2C_GraveMove {
	required uint32 ret = 1;
}
message C2S_GraveBattlePoint {
}
message S2C_GraveBattlePoint {
	required uint32 ret = 1;
}
message S2C_GraveBattleNotice {
	optional GraveReport  report =1;
}
message C2S_GraveLeaveBattle {
}
message S2C_GraveLeaveBattle {
	required uint32 ret = 1;
}
message S2C_GraveReward {
	repeated Award awards = 1;
}



//	ID_C2S_GetCombineTaskStatus = 32500;
message C2S_GetCombineTaskStatus { }

message CombineTaskStatus {
	optional uint32 task_id = 1;
	optional uint32 status = 2;
	optional uint32 param1 = 3;
}
//	ID_S2C_GetCombineTaskStatus = 32501;
message S2C_GetCombineTaskStatus {
	optional uint32 ret = 1;
	optional uint32 act_status = 2; // 0: close 1: open
	repeated CombineTaskStatus tasks = 3;
}

message Star {
	optional uint64 id = 1;
	optional uint32 system_id = 2;
	optional uint32 break_through = 3;
	repeated Award materials = 4;
}

message StarWeapon {
	optional uint32 id = 1;
	optional uint32 num = 2;
}
message OpStarWeapon {
	repeated StarWeapon insert = 1;
	repeated StarWeapon update = 2;
	repeated uint32 delete = 3;
}

message OpStar {
	repeated Star insert = 1;
	repeated Star update = 2;
	repeated uint64 delete = 3;
}

message C2S_StarBreakThrough {
	required uint64 id = 1;
	optional uint32 idx = 2; //从1开始 0表示觉醒
	optional uint64 star_id = 3;//名将id
}

message S2C_StarBreakThrough {
	required uint32 ret = 1;
}

message C2S_StarEquip {
	required uint64 id = 1;  //名将id
	required uint32 idx = 2; //从0开始
}

message S2C_StarEquip {
	required uint32 ret = 1;
	optional uint64 id = 2;
	optional uint32 idx = 3;
}

message C2S_StarReborn {
	required uint64 id = 1;
}

message S2C_StarReborn {
	required uint32 ret = 1;
	repeated Award awards = 2;
}

message C2S_StarCollection {
	required uint32 id = 1;
}

message S2C_StarCollection {
	required uint32 ret = 1;
	optional uint32 id = 2;
}

message S2C_GetStarCollection {
	repeated uint32 ids = 1;
}

message S2C_GetStarFormation {
	required uint32 ret = 1;
	repeated uint64 id = 2;
}

//	ID_C2S_MJZ2SS_CombineTaskQueryTask = 32502;
message C2S_MJZ2SS_CombineTaskQueryTask {

}

message MJZ2SS_CombineTaskQueryTask {
	optional uint32 task_id = 1;
	optional uint32 task_status = 2;
}
//	ID_S2C_MJZ2SS_CombineTaskQueryTask = 32503;
message S2C_MJZ2SS_CombineTaskQueryTask {
	optional uint32 ret = 1;
	optional uint32 status = 2; // 0: 没资格 1: 未报名 2： 已报名 3： 进行中 4: 已结束
	optional int64 finish_time = 3;
	repeated MJZ2SS_CombineTaskQueryTask tasks = 4;
}
//	ID_C2S_MJZ2SS_CombineTaskSignUp = 32504;
message C2S_MJZ2SS_CombineTaskSignUp {
	optional string version = 1;
}
//	ID_S2C_MJZ2SS_CombineTaskSignUp = 32505;
message S2C_MJZ2SS_CombineTaskSignUp {
	optional uint32 ret = 1;
	optional uint32 status = 2;
}

//	ID_C2S_MJZ2SS_CombineTaskAward = 32506;
message C2S_MJZ2SS_CombineTaskAward {
	optional uint32 task_id = 1;
}
//	ID_S2C_MJZ2SS_CombineTaskAward = 32507;
message S2C_MJZ2SS_CombineTaskAward {
	optional uint32 ret = 1;
	optional uint32 task_id = 2;
	optional uint32 task_status = 3;
}

//跨服军团战 start ------

//个人排行榜对象
message BrawlGuildsPlayerLadder {
	optional uint64 uid = 1;  //玩家id
	optional string name = 2; //玩家昵称
	optional uint32 base_id = 3; //主角id
	optional uint32 avatar_base_id = 4; //变身卡id
	optional uint32 officer_level = 5; //头衔
	optional uint32 killed_num = 6; //击杀
	optional uint32 attack_num = 7; //攻击
	optional uint32 score = 8; //积分
	optional uint32 time = 9; //时间
	optional uint32 title = 10; //称号
}

//军团排行榜对象
message BrawlGuildsGuildLadder {
	optional uint64 guild_id = 1;//公会id
	optional string guild_name = 2; //公会名称
	optional string sname = 3; //服务器名称
	optional uint32 key_point_num = 4; //占据点数量
	optional uint32 score = 5; //积分
}

//玩家对象
message BrawlGuildsPlayer {
	optional uint64 uid = 1; //玩家id
	optional uint64 sid = 2; //玩家服务器id
	optional string sname = 3; //服务器名称
	optional string name = 4; //玩家昵称
	optional uint32 base_id = 5; //主角id
	optional uint32 avatar_base_id = 6; //变身卡id
	optional uint32 hp = 7; //体力
	optional string guild_name = 8; //军团名称
	optional uint64 power = 9; //战力
	optional uint32 key_point_id = 10; //据点id
	optional uint32 pos = 11; //坑位
	optional uint32 officer_level = 12; //官衔
	optional uint32 title = 13; //称号
	optional uint64 guild_id = 14; //公会id
}

message BrawlGuildsPosition {
	optional uint32 pos = 1;
	optional uint32 key_point_id = 2;
}

//占据点对象
message BrawlGuildsKeyPoint {
	optional uint64 hp = 1; //占据点boss血量
	optional uint32 key_point_id =2; //占据点id
	optional uint64 guild_id = 3; //占领公会id
	optional string guild_name = 4; //占领公会名称
	optional string sname = 5; //服务器名称
	optional uint64 max_hp = 6; //总血量
}

//入口
message C2S_BrawlGuildsEntry {}

message S2C_BrawlGuildsEntry {
	required uint32 ret = 1;
	optional BrawlGuildsKeyPoint key_point = 2;
	repeated BrawlGuildsPlayer players = 3;
	optional uint32 revive_time = 4; //复活时间
	optional uint32 fight_cd = 5; // 战斗cd
	optional uint32 move_cd = 6; //移动cd
	optional uint32 init_key_point_id = 7;
}

//移动
message C2S_BrawlGuildsMove {
	optional BrawlGuildsPosition to = 1;
	optional uint32 id = 2;
	optional uint32 need_time = 3;
}

message S2C_BrawlGuildsMove {
	required uint32 ret = 1;
	optional BrawlGuildsKeyPoint key_point = 2;
	repeated BrawlGuildsPlayer players = 3;
	optional BrawlGuildsPosition to = 4;
	optional uint32 move_cd = 5; //移动cd
	optional uint32 need_time = 6;
}

//推送玩家移动信息
message S2C_BrawlGuildsUpdatePlayer {
	optional BrawlGuildsPlayer player = 1;
	optional BrawlGuildsPosition from = 2;
	optional BrawlGuildsPosition to = 3;
	optional uint32 action = 4; // 0-移动据点 1-复活返回初始点 2-血量更新 3-首次进入
	optional uint32 need_time = 5;//移动所需时间
	optional uint32 revive_time = 6; //复活时间
}

message S2C_BrawlGuildsUpdateKeyPoint {
	optional BrawlGuildsKeyPoint key_point = 1;
	optional uint32 action = 2; //0 -击败守卫  1- 攻陷据点
}

//战斗广播
message S2C_BrawlGuildsFightNotice {
	optional uint64 uid = 1;
	optional uint64 hurt = 2; //伤害
	optional uint32 key_point_id = 3;
}

//战斗
message C2S_BrawlGuildsFight {
	optional uint64 target = 1; //攻击目标 (攻击守卫不需要传  or  玩家传玩家id)
}

message S2C_BrawlGuildsFight {
	required uint32 ret = 1;
	optional uint32 battle_result = 2; //0 完胜 1 完败 2 胜利 3 失败 4险胜 5 惜败
	optional uint64 hurt = 3; //伤害
	optional uint32 fight_cd = 4; //战斗cd
	optional uint32 revive_time = 5; //复活时间
	optional BrawlGuildsKeyPoint key_point = 6; //据点信息 这是在玩家被击杀返回初始点的时候推送的
	repeated BrawlGuildsPlayer players = 7; //据点成员 这是在玩家被击杀返回初始点的时候推送的
	optional bool fight_type = 8; //战斗类型 false 守卫 true 玩家
	optional string target_name = 9; //对手名称
	optional bool is_attacker = 10; //己方是否是攻击者
	optional uint32 own_hp = 11; //己方消耗体力
	optional uint32 target_hp = 12; //对方消耗体力
	optional bool is_kill = 13; //是否击杀
}

//查看排行榜
message C2S_BrawlGuildsLadder {
	required uint32 ladder_type = 1; // 0 军团 1 个人
}

message S2C_BrawlGuildsLadder {
	required uint32 ret = 1;
	repeated BrawlGuildsPlayerLadder player_ladders = 2;
	repeated BrawlGuildsGuildLadder guild_ladders = 3;
}

//军团长指令
message C2S_BrawlGuildsFollowMe {
	required uint32 key_point_id = 1;
}

message S2C_BrawlGuildsFollowMe {
	required uint32 ret = 1;
	optional uint32 key_point_id = 2;
}

//跨服军团战 end ------

message SingleRaceBattleReport {
  optional uint32 position = 1;
  optional uint32 battle_no = 2;
  optional uint64 atk_user = 3;
  optional uint64 def_user = 4;
  optional uint64 win_user = 5;
  optional uint32 first_hand = 6;
  optional uint64 atk_power = 7;
  optional uint64 def_power = 8;
  repeated uint32 atk_heros = 9;
  repeated uint32 def_heros = 10;
  optional uint64 report_id = 11;
}

message SingleRaceInfo {
  optional uint64 user_id = 1;
  optional string user_name = 2;
  optional uint64 power = 3;
  optional uint32 base_id = 4;
  optional uint32 rank = 5;
  optional uint32 avatar_base_id = 6;
  optional uint32 officer_level = 7;
  optional uint32 server_id = 8;
  optional string server_name = 9;
  repeated uint64 formation = 10;
  repeated uint32 embattle = 11;
  repeated CampRaceUserFormationBase hero_data = 12;
}
message SingleRacePkInfo {
  optional PositionRace position_info = 1;
  repeated SingleRaceBattleReport reports = 2;
}
message PositionRace {
  optional uint64 user_id = 1;
  optional uint32 position = 2;
  optional uint32 atk_user_support = 3;
  optional uint32 def_user_support = 4;
}

message SingleRaceServerRank {
  optional uint32 server_id = 1;
  optional string server_name = 2;
  optional uint32 sorce = 3;
  optional uint32 rank = 4;
}
message SingleRacePlayerRank {
  optional uint32 server_id = 1;
  optional string server_name = 2;
  optional uint32 sorce = 3;
  optional uint32 rank = 4;
  optional uint64 user_id = 5;
  optional string user_name = 6;
}
message AnswerSupport {
  optional uint64 support_id = 1;
  optional uint32 support_num = 2;

}
message SingleRaceAnswerSupport {
  optional uint32 answer_id = 1;
  repeated AnswerSupport support =2;
  optional uint64 my_support  =3;
}

message C2S_GetSingleRacePkInfo {}

message S2C_GetSingleRacePkInfo {
  required uint32 ret = 1;
  repeated SingleRaceInfo users = 2;
  repeated SingleRacePkInfo pk_infos = 3;
  optional uint32 now_round = 4;
  optional uint32 round_begin_time = 5;
  optional uint32 support_pos = 6;
  optional uint64 support_user_id = 7;
  repeated SingleRaceServerRank server_rank =8;
  optional uint32 my_server_id =9;
  repeated SingleRacePlayerRank player_rank =10;
  repeated SingleRaceAnswerSupport answer_support =11;
}
message S2C_UpdateSingleRacePkInfo {
  repeated PositionRace  pk_infos =1;
  repeated SingleRaceBattleReport reports = 2;
  optional uint32 now_round = 3;
  optional uint32 round_begin_time = 4;
  repeated SingleRaceServerRank server_rank =5;
  repeated SingleRacePlayerRank player_rank =6;
}


message C2S_SingleRaceChangeEmbattle {
	required uint64 user_id = 1;
	repeated uint32 positions = 2;
}

message S2C_SingleRaceChangeEmbattle {
	required uint32 ret = 1;
}
message S2C_UpdateSingleRaceEmbattle {
	optional SingleRaceInfo user = 1;
}


message C2S_SingleRaceSupport {
	optional uint32 pos = 1;
	optional uint64 userId = 2;
}

message S2C_SingleRaceSupport {
  required uint32 ret = 1;
  optional uint32 pos = 2;
  optional uint64 userId = 3;
}
message C2S_GetSingleRacePositionInfo {
	optional uint32 pos = 1;
}

message S2C_GetSingleRacePositionInfo {
  required uint32 ret = 1;
  optional SingleRaceInfo user = 2;
  optional UserDetailInfo detail_user =3;
}
message C2S_SingleRaceAnswerSupport {
	optional uint32 answer_id = 1;
	optional uint64 support_id = 2;
}

message S2C_SingleRaceAnswerSupport {
  required uint32 ret = 1;
  optional uint32 answer_id = 2;
  optional uint64 support_id = 3;
}
message S2C_UpdateSingleRaceAnswerSupport {
  optional uint32 answer_id = 1;
  optional AnswerSupport support_info = 2;
}


message S2C_GetSingleRaceStatus {
  optional uint32 status = 1;//0:未开个人竞技1:个人竞技开始前2:个人竞技进行中3：结束
}

message C2S_ChangeHeadFrame {
  required uint32 id = 1;
}
message S2C_ChangeHeadFrame {
  optional uint32 ret = 1;
  optional HeadFrame cur_head_frame = 2;
}
message C2S_ClearHeadFrameRedPoint{

}
message S2C_ClearHeadFrameRedPoint{

}
message S2C_GetHeadFrameInfo {
	repeated HeadFrame headFrames = 1;
	optional HeadFrame cur_head_frame = 2;
	repeated uint32 red_point_list = 3;		// 所有红点的ID
}

// 红包类型
enum NewRedPacketType{
	BIG_RED_PACKET = 1; // 大红包
	SMALL_RED_PACKET = 2; // 小红包
}

message NewPacketInfo{
	required uint64 id = 1;							// 红包id
	required NewRedPacketType redpacket_type = 2;	// 红包类型
	required uint32 money = 3;						// 红包金额
}

message S2C_NewRedPacketStartNotify{
	required uint32 actId = 1;					// 活动id
	required uint32 actOpenTime = 2;			// 活动开启时间
	required uint32 actEndTime = 3;				// 活动结束时间
	optional uint32 usrActEndTime = 4;			// 玩家参加活动结束时间(0代表未参加)

}

message C2S_EnterNewRedPacket{
	required uint32 actId = 1;
}

message S2C_EnterNewRedPacket{
	required  uint32 ret = 1;					// 错误码
	required  uint32 actId = 2;					// 活动id
	repeated  NewPacketInfo redpacketInfo = 3;	// 红包详情
	optional  uint32 empty_big_num = 4;			//空大红包数量
	optional  uint32 empty_small_num = 5;		// 空小红包数量
	optional  uint32 rob_big_num = 6;			// 被抢大红包数量
	optional  uint32 rob_small_num = 7;			// 被抢小红包数量
	required  uint32 act_end_time = 8;			// 活动结束时间
	optional  uint32 act_start_time = 9;		// 活动开启时间
}

message C2S_ReportUserInfo {
	optional string push_token = 1; // push token
	optional uint32 client_type = 2; // 客户端类型 1 安卓 2 ios
	optional string app_id = 3; // app id
}

message C2S_GetNewRedPacket{
	required uint64 red_bag_id = 1;				// 领取红包
}

message S2C_GetNewRedPacket{
	required uint32 ret = 1;					// 错误码
	optional uint64 red_bag_id = 2;				// 红包id
}

message NewRedPacketNotic{
	required SimpleUser user = 1;				// 玩家信息
	required NewPacketInfo red_packet_info = 2;	// 领取红包信息
}

message S2C_GetNewRedPacketNotifyMulti{
	repeated NewRedPacketNotic messages = 1;	//玩家领取红包广播
}

message C2S_GetRegression {}

message S2C_GetRegression{
	required uint32 ret = 1;
	repeated RegressionFormat activities = 2; //活动完成情况
	repeated RegressionFormat gifts = 3; //福利领取情况
	repeated RegressionFormat discount = 4; //折扣活动购买情况
	optional uint32 end_time = 5; //活动结束时间
}

message RegressionFormat {
	optional uint32 id = 1; //任务id
	optional uint32 num = 2; //可领取次数
}

message C2S_ReceiveAwards {
	optional uint32 receive_type = 1; // 0 -活动完成奖励 1- 福利奖励
	optional uint32 id = 2; //任务id
}

message S2C_ReceiveAwards {
	required uint32 ret = 1;
	repeated Award awards = 2; //奖励
	optional RegressionFormat state = 3; //领取后状态
}

message C2S_LevelDirect {}

message S2C_LevelDirect{
	required uint32 ret = 1;
}

message S2C_RegressionBuyDiscount {
	required uint32 ret = 1;
	optional RegressionFormat  state = 2;
	repeated Award awards = 3;
}

//金将招募
//积分排行榜
message GachaLadder {
	optional uint64 user_id = 1;
	optional uint64 svr_id = 2;
	optional string user_name = 3;
	optional string svr_name = 4;
	optional uint32 base_id = 5;
	optional uint32 avatar_base_id = 6;
	optional uint32 title = 7;
	optional uint32 head_icon_id = 8;
	optional uint32 point = 9;
	optional uint32 time = 10;
	optional uint32 officer_level = 11;
}

message S2C_GetGacha {
	optional uint32 start_time = 1;
	optional uint32 end_time = 2;
	optional uint32 show_end_time = 3;
}

//中奖名单下发
message S2C_GachaLuckDrawList {
	required uint32 ret = 1;
	repeated GachaUser lists = 2;
	repeated GachaLadder ladders = 3;
	optional uint32 point = 4; //积分
	optional uint32 drop_id = 5;
}

message GachaUser {
	optional uint64 user_id = 1;
	optional uint64 svr_id = 2;
	optional string user_name = 3;
	optional string svr_name = 4;
	optional uint32 base_id = 5;
	optional uint32 avatar_base_id = 6;
	optional uint32 title = 7;
	optional uint32 head_icon_id = 8;
	optional uint32 officer_level = 9;
}

message C2S_GachaEntry{}

message S2C_GachaEntry{
	required uint32 ret = 1;
	optional uint32 drop_id = 2; //欢乐抽奖奖池掉落id
	repeated GachaUser prize_lists = 3; //中奖名单
	optional uint32 free_cnt = 4; //使用免费次数
	optional uint32 free_cd = 5; //免费cd
	optional uint32 luck_draw_num = 6; //欢乐抽奖次数
}

//退出活动界面
message C2S_GachaExit{

}

message S2C_GachaExit {
	required uint32 ret = 1;
}


//获取本轮欢乐抽奖排行榜
message C2S_GetGachaLadder {
	required uint32 ladder_type = 1; //0-总榜 1-阶段欢乐抽奖排行榜
}

message S2C_GetGachaLadder {
	required uint32 ret = 1;
	repeated GachaLadder ladders = 2;
	optional uint32 point = 3; //积分
	optional uint32 ladder_type = 4; //排行榜类型
	optional uint32 own_rank = 5; // 不传或者0表示未上榜
}

//招募
message C2S_Gacha {
	required uint32 gacha_type = 1; //0-免费单抽 1-道具单抽 2-10连
	required uint32 pool_type = 2; //池子id
}

message S2C_Gacha {
	required uint32 ret = 1;
	repeated Award awards = 2;
	optional uint32 free_cnt = 3; //使用免费次数
	optional uint32 free_cd = 4; //免费cd
	optional uint32 luck_draw_num = 5; //欢乐抽奖次数 
}

//招募弹幕
message S2C_GachaNotify{
	required uint32 ret = 1;
	repeated string content = 2;
}

//金将招募充值
message S2C_GachaRechrageReward {
	repeated Award awards = 1;
}


////////////////////////////////////////////////////
message CakeTask {
	required uint32 type = 1;       //任务类型
	required uint32 value = 2;      //对应类型的当前积累值
	repeated uint32 reward_id = 3;  //已领取过的ID集合
}
message GuildCake {
	optional uint64 guild_id = 1;       //
	optional string guild_name = 2;
	optional uint32 cake_level = 3;      //
	optional uint32 cake_exp = 4;  //
	optional uint32 guild_icon = 5;  //
	optional uint32 guild_noraml_end_rank = 6;  //
}
message CakeActivityGuildRank {
	optional uint64 guild_id = 1;
	optional string guild_name = 2;
	optional uint32 cake_level = 3;
	optional uint32 cake_exp = 4;
	optional uint32 rank = 5;
		optional uint32 server_id =6;
	optional string server_name =7;
}
message CakeActivityUserRank {
	optional uint64 user_id = 1;
	optional uint32 rank 	= 2;
	optional string name 	= 3;
	optional uint32 point 	= 4;
	optional uint32 office_level 	= 5;
	optional uint32 server_id =6;
	optional string server_name =7;
	optional uint32 head_frame_id 	= 8;
	optional uint32 base_id 	= 9;
	optional uint32 avater_base_id 	= 10;
}

message CakeActivityNotice {
	optional uint32 notice_id 		= 1;
	repeated KvPair contents 	= 2;//内容
}


message C2S_GetCakeActivityTaskReward {
	required uint32 task_id = 1; //
}

message S2C_GetCakeActivityTaskReward {
	required uint32 ret = 1;
	required uint32 task_id = 2; //
	repeated Award awards = 3;
}

message C2S_EnterCakeActivity {}

message S2C_EnterCakeActivity {
	required uint32 ret = 1;
	repeated CakeTask tasks = 2;
	repeated GuildCake guild_cake = 3;
	repeated IntMap up_reward = 4;
	repeated CakeActivityGuildRank cake_guild_rank = 5;
	optional CakeActivityGuildRank self_cake_guild_rank = 6;
	repeated CakeActivityUserRank cake_user_rank = 7;
	optional CakeActivityUserRank self_cake_user_rank = 8;
	repeated CakeActivityNotice cake_notice = 9;
}
message S2C_UpdateCakeTaskInfo {
	repeated CakeTask tasks = 1;   //有改变的日常任务信息
}

message C2S_AddGuildCakeExp {
	optional uint64 add_guild_id = 1;
	required uint32 item_id =2;
	required uint32 item_num = 3;
}

message S2C_AddGuildCakeExp {
	required uint32 ret = 1;
	optional uint32 item_id = 2;
	optional uint32 item_num = 3;
	repeated Award   awards = 4;
	repeated CakeActivityNotice cake_notice = 5;
	optional bool add_egg_limit = 6;
	optional uint64 add_guild_id = 7;
}

message S2C_UpdateGuildCakeInfo {
	repeated GuildCake guild_cake = 1;
}
message S2C_UpdateGuildCakeLvUpReward {
	repeated IntMap up_reward = 1;

}
message S2C_UpdateRankCakeAndNotice {
	repeated CakeActivityGuildRank cake_guild_rank = 1;
	optional CakeActivityGuildRank self_cake_guild_rank = 2;
	repeated CakeActivityUserRank cake_user_rank = 3;
	optional CakeActivityUserRank self_cake_user_rank = 4;
	repeated CakeActivityNotice cake_notice = 5;
}

message S2C_GetCakeActivityStatus {
	optional uint32 batch_id 		= 1;
	optional uint32 activity_start_time	= 2;
}

message C2S_GetGuildCakeUpLvReward {
	required uint32 up_reward_id = 1;
}

message S2C_GetGuildCakeUpLvReward {
	required uint32 ret = 1;
	optional uint32 up_reward_id = 2;
	repeated Award   awards = 3;
	repeated IntMap up_reward = 4;
}
message S2C_CakeRechrageReward {
	repeated Award   awards = 1;
}

message C2S_ShopCommentAction {
	required uint32 store_comment_action = 1; // 1 已弹出界面 2 领奖
}

message S2C_ShopCommentAction {
	required uint32 ret = 1;
}

message C2S_GetDailyGiftInfo {
}

message S2C_GetDailyGiftInfo {
	repeated uint32 acquired_gifts = 1;
}

message C2S_GetDailyGiftAward {
	required uint32 daily_gift_id = 1;
}

message S2C_GetDailyGiftAward {
	required uint32 ret = 1;
}

message C2S_GetLateRegistTaskInfo {
}

message LateRegistTask {
	required uint32 type = 1;       //任务类型
	required uint32 value = 2;      //对应类型的当前积累值
	repeated uint32 award_id = 3;  //已领取过的ID集合 
}

message S2C_GetLateRegistTaskInfo {
	required uint32 ret = 1;
	repeated LateRegistTask tasks = 2;   //各任务数据
}

//领取晚注册任务奖励
message C2S_GetLateRegistTaskAward {
	required uint32 id = 1;         //任务ID
}

message S2C_GetLateRegistTaskAward {
	required uint32 ret = 1;
	optional uint32 id = 2;         //任务ID
	repeated Award awards = 3;      //奖励
}

message S2C_UpdateLateRegistTaskInfo {
	repeated LateRegistTask tasks = 1;
}
