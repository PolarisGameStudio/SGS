--hero_emaki

local _lang = "cn"
local _isExist = false
local _isBaseExist = false
local _isDataExist = false

-- key
local __key_map = {
  id = 1,    --id-int 
  active_type1 = 2,    --激活属性1类型-int 
  active_value1 = 3,    --激活属性1类型值-int 
  active_type2 = 4,    --激活属性2类型-int 
  active_value2 = 5,    --激活属性2类型值-int 
  active_type3 = 6,    --激活属性3类型-int 
  active_value3 = 7,    --激活属性3类型值-int 
  active_type4 = 8,    --激活属性4类型-int 
  active_value4 = 9,    --激活属性4类型值-int 
  all_combat = 10,    --总战力-int 
  lv_up_type1 = 11,    --升品质属性1类型-int 
  lv_up_value1 = 12,    --升品质属性1类型值-int 
  lv_up_type2 = 13,    --升品质属性2类型-int 
  lv_up_value2 = 14,    --升品质属性2类型值-int 
  lv_up_type3 = 15,    --升品质属性3类型-int 
  lv_up_value3 = 16,    --升品质属性3类型值-int 
  lv_up_type4 = 17,    --升品质属性4类型-int 
  lv_up_value4 = 18,    --升品质属性4类型值-int 
  final_combat = 19,    --升品质总战力-int 

}

-- key type
local __key_type = {
  id = "int",    --id-1 
  active_type1 = "int",    --激活属性1类型-2 
  active_value1 = "int",    --激活属性1类型值-3 
  active_type2 = "int",    --激活属性2类型-4 
  active_value2 = "int",    --激活属性2类型值-5 
  active_type3 = "int",    --激活属性3类型-6 
  active_value3 = "int",    --激活属性3类型值-7 
  active_type4 = "int",    --激活属性4类型-8 
  active_value4 = "int",    --激活属性4类型值-9 
  all_combat = "int",    --总战力-10 
  lv_up_type1 = "int",    --升品质属性1类型-11 
  lv_up_value1 = "int",    --升品质属性1类型值-12 
  lv_up_type2 = "int",    --升品质属性2类型-13 
  lv_up_value2 = "int",    --升品质属性2类型值-14 
  lv_up_type3 = "int",    --升品质属性3类型-15 
  lv_up_value3 = "int",    --升品质属性3类型值-16 
  lv_up_type4 = "int",    --升品质属性4类型-17 
  lv_up_value4 = "int",    --升品质属性4类型值-18 
  final_combat = "int",    --升品质总战力-19 

}


-- data
local hero_emaki = {
    version =  1,
    _data = {
        [1] = {101,80,1000,81,500,82,500,83,7500,12000,80,3000,81,1500,82,1500,83,22500,36000,},
        [2] = {102,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,12000,},
        [3] = {103,80,1000,81,500,82,500,83,7500,12000,80,3000,81,1500,82,1500,83,22500,36000,},
        [4] = {104,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [5] = {105,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [6] = {106,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [7] = {107,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [8] = {108,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [9] = {109,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [10] = {110,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [11] = {111,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [12] = {112,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [13] = {113,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [14] = {114,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [15] = {115,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [16] = {116,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [17] = {117,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [18] = {118,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [19] = {119,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [20] = {150,80,3000,81,1500,82,1500,83,22500,12000,0,0,0,0,0,0,0,0,0,},
        [21] = {151,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [22] = {152,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [23] = {153,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [24] = {201,80,1000,81,500,82,500,83,7500,12000,80,3000,81,1500,82,1500,83,22500,36000,},
        [25] = {202,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [26] = {203,80,1000,81,500,82,500,83,7500,12000,80,3000,81,1500,82,1500,83,22500,36000,},
        [27] = {204,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [28] = {205,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [29] = {206,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [30] = {207,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [31] = {208,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [32] = {209,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [33] = {210,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [34] = {211,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [35] = {212,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [36] = {213,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [37] = {214,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [38] = {215,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [39] = {216,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [40] = {217,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [41] = {218,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [42] = {219,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [43] = {250,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [44] = {251,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [45] = {252,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [46] = {253,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [47] = {301,80,1000,81,500,82,500,83,7500,12000,80,3000,81,1500,82,1500,83,22500,36000,},
        [48] = {302,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [49] = {303,80,1000,81,500,82,500,83,7500,12000,80,3000,81,1500,82,1500,83,22500,36000,},
        [50] = {304,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [51] = {305,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [52] = {306,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [53] = {307,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [54] = {308,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [55] = {309,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [56] = {310,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [57] = {311,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [58] = {312,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [59] = {313,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [60] = {314,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [61] = {315,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [62] = {316,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [63] = {317,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [64] = {318,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [65] = {319,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [66] = {350,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [67] = {351,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [68] = {352,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [69] = {353,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [70] = {401,80,1000,81,500,82,500,83,7500,12000,80,3000,81,1500,82,1500,83,22500,36000,},
        [71] = {402,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [72] = {403,80,1000,81,500,82,500,83,7500,12000,80,3000,81,1500,82,1500,83,22500,36000,},
        [73] = {404,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [74] = {405,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [75] = {406,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [76] = {407,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [77] = {408,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [78] = {409,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [79] = {410,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [80] = {411,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [81] = {412,80,500,81,250,82,250,83,3750,6000,80,1000,81,500,82,500,83,7500,38000,},
        [82] = {413,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [83] = {414,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [84] = {415,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [85] = {416,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [86] = {417,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [87] = {418,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [88] = {419,80,100,81,50,82,50,83,750,1200,0,0,0,0,0,0,0,0,0,},
        [89] = {450,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [90] = {451,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [91] = {452,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
        [92] = {453,80,3000,81,1500,82,1500,83,22500,36000,0,0,0,0,0,0,0,0,0,},
    }
}

-- index
local __index_id = {
    [101] = 1,
    [102] = 2,
    [103] = 3,
    [104] = 4,
    [105] = 5,
    [106] = 6,
    [107] = 7,
    [108] = 8,
    [109] = 9,
    [110] = 10,
    [111] = 11,
    [112] = 12,
    [113] = 13,
    [114] = 14,
    [115] = 15,
    [116] = 16,
    [117] = 17,
    [118] = 18,
    [119] = 19,
    [150] = 20,
    [151] = 21,
    [152] = 22,
    [153] = 23,
    [201] = 24,
    [202] = 25,
    [203] = 26,
    [204] = 27,
    [205] = 28,
    [206] = 29,
    [207] = 30,
    [208] = 31,
    [209] = 32,
    [210] = 33,
    [211] = 34,
    [212] = 35,
    [213] = 36,
    [214] = 37,
    [215] = 38,
    [216] = 39,
    [217] = 40,
    [218] = 41,
    [219] = 42,
    [250] = 43,
    [251] = 44,
    [252] = 45,
    [253] = 46,
    [301] = 47,
    [302] = 48,
    [303] = 49,
    [304] = 50,
    [305] = 51,
    [306] = 52,
    [307] = 53,
    [308] = 54,
    [309] = 55,
    [310] = 56,
    [311] = 57,
    [312] = 58,
    [313] = 59,
    [314] = 60,
    [315] = 61,
    [316] = 62,
    [317] = 63,
    [318] = 64,
    [319] = 65,
    [350] = 66,
    [351] = 67,
    [352] = 68,
    [353] = 69,
    [401] = 70,
    [402] = 71,
    [403] = 72,
    [404] = 73,
    [405] = 74,
    [406] = 75,
    [407] = 76,
    [408] = 77,
    [409] = 78,
    [410] = 79,
    [411] = 80,
    [412] = 81,
    [413] = 82,
    [414] = 83,
    [415] = 84,
    [416] = 85,
    [417] = 86,
    [418] = 87,
    [419] = 88,
    [450] = 89,
    [451] = 90,
    [452] = 91,
    [453] = 92,

}

-- index mainkey map
local __main_key_map = {
    [1] = 101,
    [2] = 102,
    [3] = 103,
    [4] = 104,
    [5] = 105,
    [6] = 106,
    [7] = 107,
    [8] = 108,
    [9] = 109,
    [10] = 110,
    [11] = 111,
    [12] = 112,
    [13] = 113,
    [14] = 114,
    [15] = 115,
    [16] = 116,
    [17] = 117,
    [18] = 118,
    [19] = 119,
    [20] = 150,
    [21] = 151,
    [22] = 152,
    [23] = 153,
    [24] = 201,
    [25] = 202,
    [26] = 203,
    [27] = 204,
    [28] = 205,
    [29] = 206,
    [30] = 207,
    [31] = 208,
    [32] = 209,
    [33] = 210,
    [34] = 211,
    [35] = 212,
    [36] = 213,
    [37] = 214,
    [38] = 215,
    [39] = 216,
    [40] = 217,
    [41] = 218,
    [42] = 219,
    [43] = 250,
    [44] = 251,
    [45] = 252,
    [46] = 253,
    [47] = 301,
    [48] = 302,
    [49] = 303,
    [50] = 304,
    [51] = 305,
    [52] = 306,
    [53] = 307,
    [54] = 308,
    [55] = 309,
    [56] = 310,
    [57] = 311,
    [58] = 312,
    [59] = 313,
    [60] = 314,
    [61] = 315,
    [62] = 316,
    [63] = 317,
    [64] = 318,
    [65] = 319,
    [66] = 350,
    [67] = 351,
    [68] = 352,
    [69] = 353,
    [70] = 401,
    [71] = 402,
    [72] = 403,
    [73] = 404,
    [74] = 405,
    [75] = 406,
    [76] = 407,
    [77] = 408,
    [78] = 409,
    [79] = 410,
    [80] = 411,
    [81] = 412,
    [82] = 413,
    [83] = 414,
    [84] = 415,
    [85] = 416,
    [86] = 417,
    [87] = 418,
    [88] = 419,
    [89] = 450,
    [90] = 451,
    [91] = 452,
    [92] = 453,

}

-- metatable
local mt = { 
    __index = function(t, k) 
        local key_map = t._raw_key_map
        assert(key_map[k], "cannot find " .. k .. " in hero_emaki")
        if _lang ~= "cn" and _isDataExist  and t._data_key_map[k] then
            return t._data[t._data_key_map[k]]
        end
        if _lang ~= "cn" and _isExist  and t._lang_key_map[k] then
            return t._lang[t._lang_key_map[k]]
        end
        return t._raw[key_map[k]]
    end
}

-- 
function hero_emaki.length()
    return #hero_emaki._data
end

-- 
function hero_emaki.hasKey(k)
    if __key_map[k] == nil then
        return false
    else
        return true
    end
end

--
function hero_emaki.isVersionValid(v)
    if hero_emaki.version then
        if v then
            return hero_emaki.version <= v
        else
            return false
        end
    else
        return true
    end
end

--
function hero_emaki.indexOf(index)
    if index == nil or not hero_emaki._data[index] then
        return nil
    end
    if Lang.lang ~= _lang then 
        _lang = Lang.lang
        if Lang.lang ~= "cn" then
            _isDataExist = Lang.isFileExist("app/i18n/".. _lang .."/data/hero_emaki.lua")
            _isExist = Lang.isFileExist("app/i18n/".. _lang .."/config/hero_emaki.lua")
            _isBaseExist =  Lang.isFileExist("app/i18n/".. _lang .."/base/hero_emaki.lua")

            if _isDataExist then
                local table = require( "app.i18n.".. _lang ..".data." .. "hero_emaki" )
                _isDataExist = hero_emaki.isVersionValid(table.version)
            end
            if _isBaseExist then
                local table = require( "app.i18n.".. _lang ..".base." .. "hero_emaki" )
                _isBaseExist = hero_emaki.isVersionValid(table.version)
            end
            if _isExist then
                local table = require( "app.i18n.".. _lang ..".config." .. "hero_emaki" )
                _isExist = hero_emaki.isVersionValid(table.version)
            end
        end
    end
    local config = {_raw = nil,_raw_key_map = __key_map,_lang = nil,_lang_key_map = nil,_data = nil,_data_key_map = nil}
    if _lang ~= "cn" and _isDataExist then
        local table = require( "app.i18n.".. _lang ..".data." .. "hero_emaki" )
        local main_key = __main_key_map[index]
		local index_key = "__index_id"
        local data_index = table[index_key][main_key]
        config._data = table._data[data_index]
        config._data_key_map = table.__key_map
    end

    if _lang ~= "cn" and _isExist then
        local table = require( "app.i18n.".. _lang ..".config." .. "hero_emaki" )
        local main_key = __main_key_map[index]
		local index_key = "__index_id"
        local lang_index = table[index_key][main_key]
        config._lang = table._data[lang_index]
        config._lang_key_map = table.__key_map
    end
    config._raw = hero_emaki._data[index]
    if _lang ~= "cn" and _isBaseExist then
        local table_base = require( "app.i18n.".. _lang ..".base." .. "hero_emaki" )
        config._raw = table_base._data[index] 
    end
    return setmetatable(config, mt)
end

--
function hero_emaki.get(id)
    
    return hero_emaki.indexOf(__index_id[id])
        
end

--
function hero_emaki.set(id, key, value)
    local record = hero_emaki.get(id)
    if record then
        if _lang ~= "cn" and _isDataExist then
            local keyIndex =  record._data_key_map[key]
            if keyIndex then
                record._data[keyIndex] = value
                return
            end
        end
        if _lang ~= "cn" and _isExist then
            local keyIndex =  record._lang_key_map[key]
            if keyIndex then
                record._lang[keyIndex] = value
                return
            end
        end
        local keyIndex = record._raw_key_map[key]
        if keyIndex then
            record._raw[keyIndex] = value
        end
    end
end

--
function hero_emaki.index()
    return __index_id
end

return hero_emaki